
Stepping_Motor_Driver_G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a720  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800a900  0800a900  0001a900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf4  0800adf4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adfc  0800adfc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae00  0800ae00  0001ae00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ae04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001e4  0800afe8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800afe8  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015098  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bb  00000000  00000000  000352ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00037b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00038ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4e6  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ece  00000000  00000000  00059256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7c0f  00000000  00000000  0006d124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006064  00000000  00000000  00134d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a8e8 	.word	0x0800a8e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800a8e8 	.word	0x0800a8e8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <Motor>:
int Gun_Angle =0;

//uint8_t buffer[sizeof(float)];
uint8_t buffer[4];

void Motor(int16_t MotorL,int16_t MotorR){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4613      	mov	r3, r2
 8001056:	80bb      	strh	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,MotorL);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <Motor+0x30>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001060:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,MotorR);
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <Motor+0x34>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800106a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000300 	.word	0x20000300
 800107c:	200002b4 	.word	0x200002b4

08001080 <setServoAngle>:
void setServoAngle(TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t angle) {
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4613      	mov	r3, r2
 800108c:	80fb      	strh	r3, [r7, #6]
    // 角度の範囲を制限 (0〜180度)
    if (angle > 180) {
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	2bb4      	cmp	r3, #180	; 0xb4
 8001092:	d901      	bls.n	8001098 <setServoAngle+0x18>
        angle = 180;
 8001094:	23b4      	movs	r3, #180	; 0xb4
 8001096:	80fb      	strh	r3, [r7, #6]
    }

    // パルス幅 (ticks) を計算
    uint32_t pulseWidthTicks = MIN_PULSE_WIDTH_TICKS +
                               ((angle * (MAX_PULSE_WIDTH_TICKS - MIN_PULSE_WIDTH_TICKS)) / 180);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2264      	movs	r2, #100	; 0x64
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <setServoAngle+0x98>)
 80010a2:	fb82 1203 	smull	r1, r2, r2, r3
 80010a6:	441a      	add	r2, r3
 80010a8:	11d2      	asrs	r2, r2, #7
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad3      	subs	r3, r2, r3
    uint32_t pulseWidthTicks = MIN_PULSE_WIDTH_TICKS +
 80010ae:	3319      	adds	r3, #25
 80010b0:	617b      	str	r3, [r7, #20]

    // PWMデューティ比を設定
    __HAL_TIM_SET_COMPARE(htim, Channel, pulseWidthTicks);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d104      	bne.n	80010c2 <setServoAngle+0x42>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010c0:	e023      	b.n	800110a <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulseWidthTicks);
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d104      	bne.n	80010d2 <setServoAngle+0x52>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010d0:	e01b      	b.n	800110a <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulseWidthTicks);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d104      	bne.n	80010e2 <setServoAngle+0x62>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e0:	e013      	b.n	800110a <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulseWidthTicks);
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b0c      	cmp	r3, #12
 80010e6:	d104      	bne.n	80010f2 <setServoAngle+0x72>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f0:	e00b      	b.n	800110a <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulseWidthTicks);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d104      	bne.n	8001102 <setServoAngle+0x82>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001100:	e003      	b.n	800110a <setServoAngle+0x8a>
    __HAL_TIM_SET_COMPARE(htim, Channel, pulseWidthTicks);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	b60b60b7 	.word	0xb60b60b7

0800111c <set_Stepping_Motor>:
void set_Stepping_Motor(int16_t angle){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]

	if(angle < 10) angle = 10;
 8001126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112a:	2b09      	cmp	r3, #9
 800112c:	dc01      	bgt.n	8001132 <set_Stepping_Motor+0x16>
 800112e:	230a      	movs	r3, #10
 8001130:	80fb      	strh	r3, [r7, #6]
	if(angle > 175 ) angle = 175;
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	2baf      	cmp	r3, #175	; 0xaf
 8001138:	dd01      	ble.n	800113e <set_Stepping_Motor+0x22>
 800113a:	23af      	movs	r3, #175	; 0xaf
 800113c:	80fb      	strh	r3, [r7, #6]


	int deviation = Gun_Angle-angle;
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <set_Stepping_Motor+0xd4>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]

	if(deviation ==0)return;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d04a      	beq.n	80011e6 <set_Stepping_Motor+0xca>

	if (deviation < 0 ) {
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	da09      	bge.n	800116a <set_Stepping_Motor+0x4e>
		deviation = deviation*-1;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	425b      	negs	r3, r3
 800115a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f001 fa84 	bl	8002670 <HAL_GPIO_WritePin>
 8001168:	e005      	b.n	8001176 <set_Stepping_Motor+0x5a>
	}
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f001 fa7d 	bl	8002670 <HAL_GPIO_WritePin>

	int step= ((float)Stepping_Motor_step/360)*deviation;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80011f4 <set_Stepping_Motor+0xd8>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118c:	ee17 3a90 	vmov	r3, s15
 8001190:	60fb      	str	r3, [r7, #12]
	//int step= 800;
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f001 fa69 	bl	8002670 <HAL_GPIO_WritePin>



	for(int i=0;i<step;i++){
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	e014      	b.n	80011ce <set_Stepping_Motor+0xb2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2120      	movs	r1, #32
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f001 fa60 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 fed1 	bl	8001f58 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 fa57 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fec8 	bl	8001f58 <HAL_Delay>
	for(int i=0;i<step;i++){
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	3301      	adds	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbe6      	blt.n	80011a4 <set_Stepping_Motor+0x88>
//		if(limit_switche_2()){
//			Gun_Angle=180;
//			break;
//		}
	}
	Gun_Angle = angle;
 80011d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <set_Stepping_Motor+0xd4>)
 80011dc:	6013      	str	r3, [r2, #0]

	angel_floag=0;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <set_Stepping_Motor+0xdc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e000      	b.n	80011e8 <set_Stepping_Motor+0xcc>
	if(deviation ==0)return;
 80011e6:	bf00      	nop
	 //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000218 	.word	0x20000218
 80011f4:	400e38e4 	.word	0x400e38e4
 80011f8:	20000208 	.word	0x20000208

080011fc <UART_Receive>:
void UART_Receive(void){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    // バッファを初期化
    memset(buffer, 0, sizeof(buffer));
 8001200:	2204      	movs	r2, #4
 8001202:	2100      	movs	r1, #0
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <UART_Receive+0x58>)
 8001206:	f004 fe11 	bl	8005e2c <memset>

    // UART受信
    if (HAL_UART_Receive(&hlpuart1, buffer, sizeof(buffer), 800) == HAL_OK) {
 800120a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800120e:	2204      	movs	r2, #4
 8001210:	4910      	ldr	r1, [pc, #64]	; (8001254 <UART_Receive+0x58>)
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <UART_Receive+0x5c>)
 8001214:	f003 fb86 	bl	8004924 <HAL_UART_Receive>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d115      	bne.n	800124a <UART_Receive+0x4e>
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <UART_Receive+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
        // バッファからfloat型にデータ変換
        memcpy(&receive_data, buffer, sizeof(float));
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <UART_Receive+0x60>)
 8001224:	6013      	str	r3, [r2, #0]

        // デバッグ用に値を表示
        printf("%f", receive_data);
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <UART_Receive+0x60>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f9b4 	bl	8000598 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <UART_Receive+0x64>)
 8001236:	f005 fc7b 	bl	8006b30 <iprintf>

        // データ解析関数を呼び出し
        data_analysis(receive_data);
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <UART_Receive+0x60>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	f000 f810 	bl	8001268 <data_analysis>
    } else {
        printf("-1");
    }
}
 8001248:	e002      	b.n	8001250 <UART_Receive+0x54>
        printf("-1");
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <UART_Receive+0x68>)
 800124c:	f005 fc70 	bl	8006b30 <iprintf>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000021c 	.word	0x2000021c
 8001258:	20000220 	.word	0x20000220
 800125c:	20000000 	.word	0x20000000
 8001260:	0800a900 	.word	0x0800a900
 8001264:	0800a904 	.word	0x0800a904

08001268 <data_analysis>:
void data_analysis(float data){
 8001268:	b480      	push	{r7}
 800126a:	b08f      	sub	sp, #60	; 0x3c
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0a01 	vstr	s0, [r7, #4]
	//data= data+0.135;
	int num = data;
 8001272:	edd7 7a01 	vldr	s15, [r7, #4]
 8001276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127a:	ee17 3a90 	vmov	r3, s15
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
	 int digits[10];
	 int count = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30

	while (num > 0) {
 8001284:	e01c      	b.n	80012c0 <data_analysis+0x58>
		digits[count] = num % 10; // 最下位桁を取得
 8001286:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <data_analysis+0xb0>)
 800128a:	fb83 2301 	smull	r2, r3, r3, r1
 800128e:	109a      	asrs	r2, r3, #2
 8001290:	17cb      	asrs	r3, r1, #31
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	1aca      	subs	r2, r1, r3
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	3338      	adds	r3, #56	; 0x38
 80012a4:	443b      	add	r3, r7
 80012a6:	f843 2c30 	str.w	r2, [r3, #-48]
		num /= 10;               // 次の桁に移動
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <data_analysis+0xb0>)
 80012ae:	fb82 1203 	smull	r1, r2, r2, r3
 80012b2:	1092      	asrs	r2, r2, #2
 80012b4:	17db      	asrs	r3, r3, #31
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
		count++;
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	3301      	adds	r3, #1
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
	while (num > 0) {
 80012c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dcdf      	bgt.n	8001286 <data_analysis+0x1e>
	}

	step_angle = (data-(int)data)*1000;
 80012c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800131c <data_analysis+0xb4>
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e6:	ee17 2a90 	vmov	r2, s15
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <data_analysis+0xb8>)
 80012ec:	601a      	str	r2, [r3, #0]
	angel_floag = digits[0];
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <data_analysis+0xbc>)
 80012f2:	6013      	str	r3, [r2, #0]
	motor_flog = digits[1];
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <data_analysis+0xc0>)
 80012f8:	6013      	str	r3, [r2, #0]
	push_servo_flog = digits[2];
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <data_analysis+0xc4>)
 80012fe:	6013      	str	r3, [r2, #0]
	face_detection = digits[3];
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <data_analysis+0xc8>)
 8001304:	6013      	str	r3, [r2, #0]
	caliblation = digits[4];
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <data_analysis+0xcc>)
 800130a:	6013      	str	r3, [r2, #0]

}
 800130c:	bf00      	nop
 800130e:	373c      	adds	r7, #60	; 0x3c
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	66666667 	.word	0x66666667
 800131c:	447a0000 	.word	0x447a0000
 8001320:	2000020c 	.word	0x2000020c
 8001324:	20000208 	.word	0x20000208
 8001328:	20000204 	.word	0x20000204
 800132c:	20000200 	.word	0x20000200
 8001330:	20000210 	.word	0x20000210
 8001334:	20000214 	.word	0x20000214

08001338 <limit_switche_1>:
int limit_switche_1(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==0);
 800133c:	2101      	movs	r1, #1
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <limit_switche_1+0x1c>)
 8001340:	f001 f97e 	bl	8002640 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	bd80      	pop	{r7, pc}
 8001354:	48000400 	.word	0x48000400

08001358 <limit_switche_2>:
int limit_switche_2(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)==0);
 800135c:	2102      	movs	r1, #2
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <limit_switche_2+0x1c>)
 8001360:	f001 f96e 	bl	8002640 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf0c      	ite	eq
 800136a:	2301      	moveq	r3, #1
 800136c:	2300      	movne	r3, #0
 800136e:	b2db      	uxtb	r3, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	48000800 	.word	0x48000800

08001378 <push_marshmallow>:
void push_marshmallow(uint8_t flag){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	if(flag)setServoAngle(&htim3, TIM_CHANNEL_1,50);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <push_marshmallow+0x1c>
 8001388:	2232      	movs	r2, #50	; 0x32
 800138a:	2100      	movs	r1, #0
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <push_marshmallow+0x30>)
 800138e:	f7ff fe77 	bl	8001080 <setServoAngle>
	else setServoAngle(&htim3, TIM_CHANNEL_1,120);
}
 8001392:	e004      	b.n	800139e <push_marshmallow+0x26>
	else setServoAngle(&htim3, TIM_CHANNEL_1,120);
 8001394:	2278      	movs	r2, #120	; 0x78
 8001396:	2100      	movs	r1, #0
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <push_marshmallow+0x30>)
 800139a:	f7ff fe71 	bl	8001080 <setServoAngle>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000300 	.word	0x20000300

080013ac <init>:
void init(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	while(1){
		if(limit_switche_1()){
 80013b0:	f7ff ffc2 	bl	8001338 <limit_switche_1>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <init+0x16>
			Gun_Angle=0;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <init+0x2c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
			break;
 80013c0:	e007      	b.n	80013d2 <init+0x26>
		}
		if(limit_switche_2()){
 80013c2:	f7ff ffc9 	bl	8001358 <limit_switche_2>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f1      	beq.n	80013b0 <init+0x4>
			Gun_Angle=180;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <init+0x2c>)
 80013ce:	22b4      	movs	r2, #180	; 0xb4
 80013d0:	601a      	str	r2, [r3, #0]
			break;
		}

	}

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000218 	.word	0x20000218

080013dc <buzzer>:
void buzzer(int flag){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if(flag)HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <buzzer+0x1c>
 80013ea:	2201      	movs	r2, #1
 80013ec:	2101      	movs	r1, #1
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f001 f93d 	bl	8002670 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
}
 80013f6:	e005      	b.n	8001404 <buzzer+0x28>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2101      	movs	r1, #1
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f001 f936 	bl	8002670 <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <step_Initialization>:
void step_Initialization(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f001 f92a 	bl	8002670 <HAL_GPIO_WritePin>
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f001 f924 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 fd95 	bl	8001f58 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2120      	movs	r1, #32
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f001 f91b 	bl	8002670 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 fd8c 	bl	8001f58 <HAL_Delay>
		if(limit_switche_2()){
 8001440:	f7ff ff8a 	bl	8001358 <limit_switche_2>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0e8      	beq.n	800141c <step_Initialization+0x10>
			Gun_Angle=180;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <step_Initialization+0x54>)
 800144c:	22b4      	movs	r2, #180	; 0xb4
 800144e:	601a      	str	r2, [r3, #0]
			caliblation=0;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <step_Initialization+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
			set_Stepping_Motor(90);
 8001456:	205a      	movs	r0, #90	; 0x5a
 8001458:	f7ff fe60 	bl	800111c <set_Stepping_Motor>
			return;
 800145c:	bf00      	nop
			break;

		}
	}
}
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000218 	.word	0x20000218
 8001464:	20000214 	.word	0x20000214

08001468 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001470:	1d39      	adds	r1, r7, #4
 8001472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001476:	2201      	movs	r2, #1
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <__io_putchar+0x20>)
 800147a:	f003 f9c5 	bl	8004808 <HAL_UART_Transmit>
	return ch;
 800147e:	687b      	ldr	r3, [r7, #4]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000220 	.word	0x20000220

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f000 fcf1 	bl	8001e76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 f876 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f000 f9f4 	bl	8001884 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800149c:	f000 f8be 	bl	800161c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80014a0:	f000 f96c 	bl	800177c <MX_TIM3_Init>
  MX_TIM2_Init();
 80014a4:	f000 f904 	bl	80016b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014a8:	2100      	movs	r1, #0
 80014aa:	482d      	ldr	r0, [pc, #180]	; (8001560 <main+0xd4>)
 80014ac:	f002 f978 	bl	80037a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014b0:	2104      	movs	r1, #4
 80014b2:	482b      	ldr	r0, [pc, #172]	; (8001560 <main+0xd4>)
 80014b4:	f002 f974 	bl	80037a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014b8:	2100      	movs	r1, #0
 80014ba:	482a      	ldr	r0, [pc, #168]	; (8001564 <main+0xd8>)
 80014bc:	f002 f970 	bl	80037a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014c0:	2104      	movs	r1, #4
 80014c2:	4828      	ldr	r0, [pc, #160]	; (8001564 <main+0xd8>)
 80014c4:	f002 f96c 	bl	80037a0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	setServoAngle(&htim3, TIM_CHANNEL_1, 0);

	 init();
 80014c8:	f7ff ff70 	bl	80013ac <init>

//	 setServoAngle(&htim3, TIM_CHANNEL_1, 170);
	 setbuf(stdout, NULL);
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <main+0xdc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fb43 	bl	8006b60 <setbuf>
	 setbuf(stdin, NULL);
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <main+0xdc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fb3c 	bl	8006b60 <setbuf>

  set_Stepping_Motor(90);
 80014e8:	205a      	movs	r0, #90	; 0x5a
 80014ea:	f7ff fe17 	bl	800111c <set_Stepping_Motor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART_Receive();
 80014ee:	f7ff fe85 	bl	80011fc <UART_Receive>
	  if(push_servo_flog){
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <main+0xe0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <main+0x76>
		  push_marshmallow(1);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff3c 	bl	8001378 <push_marshmallow>
 8001500:	e002      	b.n	8001508 <main+0x7c>
		  //HAL_Delay(100);
	  }else  {
		  push_marshmallow(0);
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ff38 	bl	8001378 <push_marshmallow>

	  }
	 // setServoAngle(&htim3, TIM_CHANNEL_1,50);
//
	  if(angel_floag) {
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <main+0xe4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <main+0x90>
		  set_Stepping_Motor(step_angle);
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <main+0xe8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fe00 	bl	800111c <set_Stepping_Motor>
		  //
	  }
	 // if(angel_floag) stepping_motor(step_angle/100);
	 // else  set_Stepping_Motor(0);
//
	  if(motor_flog) Motor(1000,1000);
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <main+0xec>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <main+0xa6>
 8001524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800152c:	f7ff fd8c 	bl	8001048 <Motor>
 8001530:	e003      	b.n	800153a <main+0xae>
	  else  Motor(0,0);
 8001532:	2100      	movs	r1, #0
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fd87 	bl	8001048 <Motor>

	  if(face_detection) buzzer(1);
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <main+0xf0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <main+0xbe>
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff ff4a 	bl	80013dc <buzzer>
 8001548:	e002      	b.n	8001550 <main+0xc4>
	  else buzzer(0);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff ff46 	bl	80013dc <buzzer>

	  if(caliblation)step_Initialization();
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <main+0xf4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ca      	beq.n	80014ee <main+0x62>
 8001558:	f7ff ff58 	bl	800140c <step_Initialization>
	  UART_Receive();
 800155c:	e7c7      	b.n	80014ee <main+0x62>
 800155e:	bf00      	nop
 8001560:	20000300 	.word	0x20000300
 8001564:	200002b4 	.word	0x200002b4
 8001568:	20000010 	.word	0x20000010
 800156c:	20000200 	.word	0x20000200
 8001570:	20000208 	.word	0x20000208
 8001574:	2000020c 	.word	0x2000020c
 8001578:	20000204 	.word	0x20000204
 800157c:	20000210 	.word	0x20000210
 8001580:	20000214 	.word	0x20000214

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2238      	movs	r2, #56	; 0x38
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fc4a 	bl	8005e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f001 f87a 	bl	80026a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b6:	2340      	movs	r3, #64	; 0x40
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015be:	2302      	movs	r3, #2
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80015c6:	2315      	movs	r3, #21
 80015c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 f914 	bl	8002808 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015e6:	f000 f9d1 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80015f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2104      	movs	r1, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fc11 	bl	8002e2c <HAL_RCC_ClockConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001610:	f000 f9bc 	bl	800198c <Error_Handler>
  }
}
 8001614:	bf00      	nop
 8001616:	3750      	adds	r7, #80	; 0x50
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001624:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800165e:	4812      	ldr	r0, [pc, #72]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001660:	f003 f882 	bl	8004768 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800166a:	f000 f98f 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001672:	f004 fae6 	bl	8005c42 <HAL_UARTEx_SetTxFifoThreshold>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800167c:	f000 f986 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	f004 fb1b 	bl	8005cbe <HAL_UARTEx_SetRxFifoThreshold>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800168e:	f000 f97d 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_LPUART1_UART_Init+0x8c>)
 8001694:	f004 fa9c 	bl	8005bd0 <HAL_UARTEx_DisableFifoMode>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800169e:	f000 f975 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000220 	.word	0x20000220
 80016ac:	40008000 	.word	0x40008000

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <MX_TIM2_Init+0xc8>)
 80016d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <MX_TIM2_Init+0xc8>)
 80016de:	f44f 7252 	mov.w	r2, #840	; 0x348
 80016e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <MX_TIM2_Init+0xc8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <MX_TIM2_Init+0xc8>)
 80016ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_TIM2_Init+0xc8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_TIM2_Init+0xc8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016fe:	481e      	ldr	r0, [pc, #120]	; (8001778 <MX_TIM2_Init+0xc8>)
 8001700:	f001 fff7 	bl	80036f2 <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800170a:	f000 f93f 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <MX_TIM2_Init+0xc8>)
 800171e:	f002 ffa1 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001728:	f000 f930 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	2204      	movs	r2, #4
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM2_Init+0xc8>)
 8001744:	f002 f92c 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800174e:	f000 f91d 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	2208      	movs	r2, #8
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM2_Init+0xc8>)
 800175a:	f002 f921 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001764:	f000 f912 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM2_Init+0xc8>)
 800176a:	f000 f9d7 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002b4 	.word	0x200002b4

0800177c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <MX_TIM3_Init+0x100>)
 80017b0:	4a33      	ldr	r2, [pc, #204]	; (8001880 <MX_TIM3_Init+0x104>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <MX_TIM3_Init+0x100>)
 80017b6:	f44f 7252 	mov.w	r2, #840	; 0x348
 80017ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <MX_TIM3_Init+0x100>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <MX_TIM3_Init+0x100>)
 80017c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <MX_TIM3_Init+0x100>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <MX_TIM3_Init+0x100>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d6:	4829      	ldr	r0, [pc, #164]	; (800187c <MX_TIM3_Init+0x100>)
 80017d8:	f001 ff34 	bl	8003644 <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80017e2:	f000 f8d3 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4822      	ldr	r0, [pc, #136]	; (800187c <MX_TIM3_Init+0x100>)
 80017f4:	f002 f9e8 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80017fe:	f000 f8c5 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001802:	481e      	ldr	r0, [pc, #120]	; (800187c <MX_TIM3_Init+0x100>)
 8001804:	f001 ff75 	bl	80036f2 <HAL_TIM_PWM_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800180e:	f000 f8bd 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4816      	ldr	r0, [pc, #88]	; (800187c <MX_TIM3_Init+0x100>)
 8001822:	f002 ff1f 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800182c:	f000 f8ae 	bl	800198c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001830:	2360      	movs	r3, #96	; 0x60
 8001832:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	2200      	movs	r2, #0
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_TIM3_Init+0x100>)
 8001848:	f002 f8aa 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001852:	f000 f89b 	bl	800198c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	2204      	movs	r2, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	; (800187c <MX_TIM3_Init+0x100>)
 800185e:	f002 f89f 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001868:	f000 f890 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <MX_TIM3_Init+0x100>)
 800186e:	f000 f955 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 8001872:	bf00      	nop
 8001874:	3738      	adds	r7, #56	; 0x38
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000300 	.word	0x20000300
 8001880:	40000400 	.word	0x40000400

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <MX_GPIO_Init+0xfc>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a38      	ldr	r2, [pc, #224]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a32      	ldr	r2, [pc, #200]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a2c      	ldr	r2, [pc, #176]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b27      	ldr	r3, [pc, #156]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <MX_GPIO_Init+0xfc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 80018fa:	2200      	movs	r2, #0
 80018fc:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f000 feb4 	bl	8002670 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4819      	ldr	r0, [pc, #100]	; (8001984 <MX_GPIO_Init+0x100>)
 8001920:	f000 fd0c 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <MX_GPIO_Init+0x100>)
 8001938:	f000 fd00 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin PA6 PA7
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 800193c:	f240 43e1 	movw	r3, #1249	; 0x4e1
 8001940:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f000 fcf0 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15|GPIO_PIN_9;
 800195c:	f248 2301 	movw	r3, #33281	; 0x8201
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001966:	2301      	movs	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_GPIO_Init+0x104>)
 8001972:	f000 fce3 	bl	800233c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	48000800 	.word	0x48000800
 8001988:	48000400 	.word	0x48000400

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_MspInit+0x44>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_MspInit+0x44>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6613      	str	r3, [r2, #96]	; 0x60
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_MspInit+0x44>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_MspInit+0x44>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_MspInit+0x44>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6593      	str	r3, [r2, #88]	; 0x58
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_MspInit+0x44>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019ce:	f000 ff0b 	bl	80027e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09a      	sub	sp, #104	; 0x68
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2244      	movs	r2, #68	; 0x44
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 fa13 	bl	8005e2c <memset>
  if(huart->Instance==LPUART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <HAL_UART_MspInit+0xb8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d13e      	bne.n	8001a8e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a10:	2320      	movs	r3, #32
 8001a12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fc21 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a28:	f7ff ffb0 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_UART_MspInit+0xbc>)
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_UART_MspInit+0xbc>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_UART_MspInit+0xbc>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_MspInit+0xbc>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_UART_MspInit+0xbc>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_UART_MspInit+0xbc>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f000 fc5f 	bl	800233c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	205b      	movs	r0, #91	; 0x5b
 8001a84:	f000 fb65 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a88:	205b      	movs	r0, #91	; 0x5b
 8001a8a:	f000 fb7c 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3768      	adds	r7, #104	; 0x68
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40008000 	.word	0x40008000
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d10b      	bne.n	8001aca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x38>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10b      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_TIM_Base_MspInit+0x3c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_TIM_Base_MspInit+0x3c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_TIM_Base_MspInit+0x3c>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d11d      	bne.n	8001b7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001b56:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4823      	ldr	r0, [pc, #140]	; (8001c00 <HAL_TIM_MspPostInit+0xe4>)
 8001b74:	f000 fbe2 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b78:	e03c      	b.n	8001bf4 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_TIM_MspPostInit+0xe8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d137      	bne.n	8001bf4 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_TIM_MspPostInit+0xe0>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <HAL_TIM_MspPostInit+0xec>)
 8001bd0:	f000 fbb4 	bl	800233c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001be4:	2302      	movs	r3, #2
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <HAL_TIM_MspPostInit+0xe4>)
 8001bf0:	f000 fba4 	bl	800233c <HAL_GPIO_Init>
}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400
 8001c04:	40000400 	.word	0x40000400
 8001c08:	48000800 	.word	0x48000800

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f960 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <LPUART1_IRQHandler+0x10>)
 8001c66:	f002 ff25 	bl	8004ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000220 	.word	0x20000220

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f004 f8a3 	bl	8005dd8 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
  }

  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fbab 	bl	8001468 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf1      	blt.n	8001d04 <_write+0x12>
  }
  return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_close>:

int _close(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	605a      	str	r2, [r3, #4]
  return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f004 f808 	bl	8005dd8 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20008000 	.word	0x20008000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	2000034c 	.word	0x2000034c
 8001dfc:	20000368 	.word	0x20000368

08001e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff ffea 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f003 ffc7 	bl	8005de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff fb19 	bl	800148c <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   r0, =_estack
 8001e5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e68:	0800ae04 	.word	0x0800ae04
  ldr r2, =_sbss
 8001e6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e70:	20000364 	.word	0x20000364

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>

08001e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f95b 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 f80e 	bl	8001ea8 <HAL_InitTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	e001      	b.n	8001e9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e98:	f7ff fd7e 	bl	8001998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_InitTick+0x68>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d022      	beq.n	8001f02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ebc:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_InitTick+0x6c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_InitTick+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f966 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d809      	bhi.n	8001ef6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	f000 f932 	bl	8002152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_InitTick+0x70>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e004      	b.n	8001f06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000000c 	.word	0x2000000c
 8001f14:	20000004 	.word	0x20000004
 8001f18:	20000008 	.word	0x20000008

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000350 	.word	0x20000350
 8001f3c:	2000000c 	.word	0x2000000c

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000350 	.word	0x20000350

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d004      	beq.n	8001f7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_Delay+0x40>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7c:	bf00      	nop
 8001f7e:	f7ff ffdf 	bl	8001f40 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d8f7      	bhi.n	8001f7e <HAL_Delay+0x26>
  {
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000000c 	.word	0x2000000c

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff40 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff90 	bl	8002090 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5f 	bl	800203c <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff33 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa4 	bl	80020f8 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d005      	beq.n	80021de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e037      	b.n	800224e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 020e 	bic.w	r2, r2, #14
 80021ec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 021f 	and.w	r2, r3, #31
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800222a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00c      	beq.n	800224e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800224c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d00d      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e047      	b.n	8002330 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 020e 	bic.w	r2, r2, #14
 80022ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002304:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800230e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
    }
  }
  return status;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800234a:	e15a      	b.n	8002602 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 814c 	beq.w	80025fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002378:	2b02      	cmp	r3, #2
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d017      	beq.n	800241a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d123      	bne.n	800246e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	6939      	ldr	r1, [r7, #16]
 800246a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a6 	beq.w	80025fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6613      	str	r3, [r2, #96]	; 0x60
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x2e8>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024f2:	d01f      	beq.n	8002534 <HAL_GPIO_Init+0x1f8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a4c      	ldr	r2, [pc, #304]	; (8002628 <HAL_GPIO_Init+0x2ec>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d019      	beq.n	8002530 <HAL_GPIO_Init+0x1f4>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <HAL_GPIO_Init+0x1f0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x2f4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00d      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x2f8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d007      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2fc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_GPIO_Init+0x1e4>
 800251c:	2305      	movs	r3, #5
 800251e:	e00a      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002520:	2306      	movs	r3, #6
 8002522:	e008      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002524:	2304      	movs	r3, #4
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002528:	2303      	movs	r3, #3
 800252a:	e004      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 800252c:	2302      	movs	r3, #2
 800252e:	e002      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_GPIO_Init+0x1fa>
 8002534:	2300      	movs	r3, #0
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	f002 0203 	and.w	r2, r2, #3
 800253c:	0092      	lsls	r2, r2, #2
 800253e:	4093      	lsls	r3, r2
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002546:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2e8>)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002554:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_GPIO_Init+0x300>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002578:	4a30      	ldr	r2, [pc, #192]	; (800263c <HAL_GPIO_Init+0x300>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_GPIO_Init+0x300>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025a2:	4a26      	ldr	r2, [pc, #152]	; (800263c <HAL_GPIO_Init+0x300>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_GPIO_Init+0x300>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_GPIO_Init+0x300>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_GPIO_Init+0x300>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_GPIO_Init+0x300>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f ae9d 	bne.w	800234c <HAL_GPIO_Init+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	40010000 	.word	0x40010000
 8002628:	48000400 	.word	0x48000400
 800262c:	48000800 	.word	0x48000800
 8002630:	48000c00 	.word	0x48000c00
 8002634:	48001000 	.word	0x48001000
 8002638:	48001400 	.word	0x48001400
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e001      	b.n	8002662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e002      	b.n	8002694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d141      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d131      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026bc:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c2:	4a46      	ldr	r2, [pc, #280]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d4:	4a41      	ldr	r2, [pc, #260]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2232      	movs	r2, #50	; 0x32
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a3f      	ldr	r2, [pc, #252]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f2:	e002      	b.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002706:	d102      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d158      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e057      	b.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002720:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	4a2d      	ldr	r2, [pc, #180]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002730:	e04d      	b.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002738:	d141      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002746:	d131      	bne.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4a23      	ldr	r2, [pc, #140]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002760:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2232      	movs	r2, #50	; 0x32
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	3301      	adds	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277e:	e002      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3b01      	subs	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d102      	bne.n	800279a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f2      	bne.n	8002780 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a6:	d112      	bne.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e011      	b.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027bc:	e007      	b.n	80027ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40007000 	.word	0x40007000
 80027e0:	20000004 	.word	0x20000004
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80027f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f6:	6093      	str	r3, [r2, #8]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40007000 	.word	0x40007000

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e2fe      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4b97      	ldr	r3, [pc, #604]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002830:	4b94      	ldr	r3, [pc, #592]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0x3e>
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d002      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b8d      	ldr	r3, [pc, #564]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e2d9      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a84      	ldr	r2, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7e      	ldr	r2, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7b      	ldr	r2, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a77      	ldr	r2, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b75      	ldr	r3, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a74      	ldr	r2, [pc, #464]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff fb3e 	bl	8001f40 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff fb3a 	bl	8001f40 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e29e      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7ff fb2a 	bl	8001f40 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fb26 	bl	8001f40 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e28a      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d075      	beq.n	8002a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291e:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d102      	bne.n	800293e <HAL_RCC_OscConfig+0x136>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d002      	beq.n	8002944 <HAL_RCC_OscConfig+0x13c>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11f      	bne.n	8002984 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x154>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e25d      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4946      	ldr	r1, [pc, #280]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fa97 	bl	8001ea8 <HAL_InitTick>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d043      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e249      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3c      	ldr	r2, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff fad2 	bl	8001f40 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7ff face 	bl	8001f40 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e232      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	492d      	ldr	r1, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
 80029d2:	e01a      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2a      	ldr	r2, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80029da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7ff faae 	bl	8001f40 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff faaa 	bl	8001f40 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e20e      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1e0>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d041      	beq.n	8002a9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a24:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fa87 	bl	8001f40 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff fa83 	bl	8001f40 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1e7      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ef      	beq.n	8002a36 <HAL_RCC_OscConfig+0x22e>
 8002a56:	e020      	b.n	8002a9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x27c>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7ff fa6a 	bl	8001f40 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6e:	e00d      	b.n	8002a8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff fa66 	bl	8001f40 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d906      	bls.n	8002a8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1ca      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a8c:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ea      	bne.n	8002a70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80a6 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aac:	4b84      	ldr	r3, [pc, #528]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_OscConfig+0x2b4>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x2b6>
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	4a7e      	ldr	r2, [pc, #504]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ace:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ade:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <HAL_RCC_OscConfig+0x4bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aea:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x4bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x4bc>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff fa23 	bl	8001f40 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff fa1f 	bl	8001f40 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e183      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b10:	4b6c      	ldr	r3, [pc, #432]	; (8002cc4 <HAL_RCC_OscConfig+0x4bc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_RCC_OscConfig+0x32e>
 8002b24:	4b66      	ldr	r3, [pc, #408]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b34:	e024      	b.n	8002b80 <HAL_RCC_OscConfig+0x378>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d110      	bne.n	8002b60 <HAL_RCC_OscConfig+0x358>
 8002b3e:	4b60      	ldr	r3, [pc, #384]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a5a      	ldr	r2, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5e:	e00f      	b.n	8002b80 <HAL_RCC_OscConfig+0x378>
 8002b60:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	4a56      	ldr	r2, [pc, #344]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7ff f9da 	bl	8001f40 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7ff f9d6 	bl	8001f40 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e138      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba6:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ed      	beq.n	8002b90 <HAL_RCC_OscConfig+0x388>
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f9c3 	bl	8001f40 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7ff f9bf 	bl	8001f40 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e121      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ed      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be8:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	4a34      	ldr	r2, [pc, #208]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d03c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c08:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7ff f992 	bl	8001f40 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c20:	f7ff f98e 	bl	8001f40 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0f2      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <HAL_RCC_OscConfig+0x418>
 8002c40:	e01b      	b.n	8002c7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c52:	f7ff f975 	bl	8001f40 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5a:	f7ff f971 	bl	8001f40 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0d5      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ef      	bne.n	8002c5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80c9 	beq.w	8002e16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	f000 8083 	beq.w	8002d98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d15e      	bne.n	8002d58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f94b 	bl	8001f40 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f947 	bl	8001f40 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d905      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0ab      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc8:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ec      	bne.n	8002cae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b52      	ldr	r3, [pc, #328]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <HAL_RCC_OscConfig+0x61c>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6a11      	ldr	r1, [r2, #32]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce4:	3a01      	subs	r2, #1
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cee:	0212      	lsls	r2, r2, #8
 8002cf0:	4311      	orrs	r1, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cf6:	0852      	lsrs	r2, r2, #1
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0552      	lsls	r2, r2, #21
 8002cfc:	4311      	orrs	r1, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d02:	0852      	lsrs	r2, r2, #1
 8002d04:	3a01      	subs	r2, #1
 8002d06:	0652      	lsls	r2, r2, #25
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d0e:	06d2      	lsls	r2, r2, #27
 8002d10:	430a      	orrs	r2, r1
 8002d12:	4943      	ldr	r1, [pc, #268]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d18:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d24:	4b3e      	ldr	r3, [pc, #248]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f906 	bl	8001f40 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff f902 	bl	8001f40 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e066      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x530>
 8002d56:	e05e      	b.n	8002e16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7ff f8ec 	bl	8001f40 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7ff f8e8 	bl	8001f40 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04c      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	4924      	ldr	r1, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_OscConfig+0x620>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	60cb      	str	r3, [r1, #12]
 8002d96:	e03e      	b.n	8002e16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e039      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_OscConfig+0x618>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d12c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d123      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11b      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d113      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	019f800c 	.word	0x019f800c
 8002e28:	feeefffc 	.word	0xfeeefffc

08002e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e11e      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b91      	ldr	r3, [pc, #580]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d910      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b8e      	ldr	r3, [pc, #568]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	498c      	ldr	r1, [pc, #560]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e106      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d073      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d129      	bne.n	8002edc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0f4      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e98:	f000 f99e 	bl	80031d8 <RCC_GetSysClockFreqFromPLLSource>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4a7c      	ldr	r2, [pc, #496]	; (8003094 <HAL_RCC_ClockConfig+0x268>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d93f      	bls.n	8002f26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ea6:	4b7a      	ldr	r3, [pc, #488]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d033      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d12f      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ec6:	4b72      	ldr	r3, [pc, #456]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ece:	4a70      	ldr	r2, [pc, #448]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e024      	b.n	8002f26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0c6      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0be      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f04:	f000 f8ce 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_RCC_ClockConfig+0x268>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d909      	bls.n	8002f26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1a:	4a5d      	ldr	r2, [pc, #372]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b5a      	ldr	r3, [pc, #360]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4957      	ldr	r1, [pc, #348]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f38:	f7ff f802 	bl	8001f40 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fe fffe 	bl	8001f40 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e095      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a42      	ldr	r2, [pc, #264]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f98:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
 8002fba:	e008      	b.n	8002fce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d105      	bne.n	8002fce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4a32      	ldr	r2, [pc, #200]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8002fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d21d      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 020f 	bic.w	r2, r3, #15
 8002fe4:	4929      	ldr	r1, [pc, #164]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fec:	f7fe ffa8 	bl	8001f40 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fe ffa4 	bl	8001f40 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e03b      	b.n	8003082 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x260>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d1ed      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4917      	ldr	r1, [pc, #92]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490f      	ldr	r1, [pc, #60]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003056:	f000 f825 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_ClockConfig+0x264>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490c      	ldr	r1, [pc, #48]	; (8003098 <HAL_RCC_ClockConfig+0x26c>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x270>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x274>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ff14 	bl	8001ea8 <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40022000 	.word	0x40022000
 8003090:	40021000 	.word	0x40021000
 8003094:	04c4b400 	.word	0x04c4b400
 8003098:	0800a908 	.word	0x0800a908
 800309c:	20000004 	.word	0x20000004
 80030a0:	20000008 	.word	0x20000008

080030a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e047      	b.n	800314c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e03e      	b.n	800314c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d136      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3301      	adds	r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003102:	68d2      	ldr	r2, [r2, #12]
 8003104:	0a12      	lsrs	r2, r2, #8
 8003106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
      break;
 8003110:	e00c      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	0a12      	lsrs	r2, r2, #8
 8003120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
      break;
 800312a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0e5b      	lsrs	r3, r3, #25
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	e001      	b.n	800314c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800314c:	693b      	ldr	r3, [r7, #16]
}
 800314e:	4618      	mov	r0, r3
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	00f42400 	.word	0x00f42400
 8003164:	016e3600 	.word	0x016e3600

08003168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000004 	.word	0x20000004

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	0800a918 	.word	0x0800a918

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031b0:	f7ff ffda 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0adb      	lsrs	r3, r3, #11
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4904      	ldr	r1, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	0800a918 	.word	0x0800a918

080031d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d10c      	bne.n	8003216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003206:	68d2      	ldr	r2, [r2, #12]
 8003208:	0a12      	lsrs	r2, r2, #8
 800320a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
    break;
 8003214:	e00c      	b.n	8003230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003220:	68d2      	ldr	r2, [r2, #12]
 8003222:	0a12      	lsrs	r2, r2, #8
 8003224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
    break;
 800322e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0e5b      	lsrs	r3, r3, #25
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800324a:	687b      	ldr	r3, [r7, #4]
}
 800324c:	4618      	mov	r0, r3
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	016e3600 	.word	0x016e3600
 8003260:	00f42400 	.word	0x00f42400

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800326c:	2300      	movs	r3, #0
 800326e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003270:	2300      	movs	r3, #0
 8003272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8098 	beq.w	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	4a3f      	ldr	r2, [pc, #252]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	; 0x58
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a39      	ldr	r2, [pc, #228]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ba:	f7fe fe41 	bl	8001f40 <HAL_GetTick>
 80032be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c0:	e009      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe fe3d 	bl	8001f40 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d902      	bls.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	74fb      	strb	r3, [r7, #19]
        break;
 80032d4:	e005      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ef      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d159      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032e8:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01e      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	d019      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe fdfd 	bl	8001f40 <HAL_GetTick>
 8003346:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003348:	e00b      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fdf9 	bl	8001f40 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d902      	bls.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	74fb      	strb	r3, [r7, #19]
            break;
 8003360:	e006      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ec      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800338c:	e008      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	74bb      	strb	r3, [r7, #18]
 8003392:	e005      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003394:	40021000 	.word	0x40021000
 8003398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a0:	7c7b      	ldrb	r3, [r7, #17]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4ba6      	ldr	r3, [pc, #664]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	4aa5      	ldr	r2, [pc, #660]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033be:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f023 0203 	bic.w	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	499c      	ldr	r1, [pc, #624]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033e0:	4b97      	ldr	r3, [pc, #604]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f023 020c 	bic.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4994      	ldr	r1, [pc, #592]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003402:	4b8f      	ldr	r3, [pc, #572]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	498b      	ldr	r1, [pc, #556]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003424:	4b86      	ldr	r3, [pc, #536]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4983      	ldr	r1, [pc, #524]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003446:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	497a      	ldr	r1, [pc, #488]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	4972      	ldr	r1, [pc, #456]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800348a:	4b6d      	ldr	r3, [pc, #436]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	4969      	ldr	r1, [pc, #420]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ac:	4b64      	ldr	r3, [pc, #400]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4961      	ldr	r1, [pc, #388]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ce:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	4958      	ldr	r1, [pc, #352]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	4950      	ldr	r1, [pc, #320]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350e:	d105      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a4a      	ldr	r2, [pc, #296]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003528:	4b45      	ldr	r3, [pc, #276]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	4942      	ldr	r1, [pc, #264]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003546:	d105      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003548:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a3c      	ldr	r2, [pc, #240]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800354e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003552:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d015      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003560:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4934      	ldr	r1, [pc, #208]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800357e:	d105      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003580:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a2e      	ldr	r2, [pc, #184]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	4926      	ldr	r1, [pc, #152]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b6:	d105      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d0:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4918      	ldr	r1, [pc, #96]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ee:	d105      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a12      	ldr	r2, [pc, #72]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	490a      	ldr	r1, [pc, #40]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003626:	d105      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003634:	7cbb      	ldrb	r3, [r7, #18]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e049      	b.n	80036ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fa36 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f000 fb9a 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e049      	b.n	8003798 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe f9c1 	bl	8001aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f000 fb43 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_TIM_PWM_Start+0x24>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e03c      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d109      	bne.n	80037de <HAL_TIM_PWM_Start+0x3e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e02f      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d109      	bne.n	80037f8 <HAL_TIM_PWM_Start+0x58>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e022      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d109      	bne.n	8003812 <HAL_TIM_PWM_Start+0x72>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e015      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b10      	cmp	r3, #16
 8003816:	d109      	bne.n	800382c <HAL_TIM_PWM_Start+0x8c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e097      	b.n	8003976 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start+0xb6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003854:	e023      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start+0xc6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003864:	e01b      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start+0xd6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003874:	e013      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xe6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003884:	e00b      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b10      	cmp	r3, #16
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xf6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	e003      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 feb6 	bl	8004618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_TIM_PWM_Start+0x1e0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a32      	ldr	r2, [pc, #200]	; (8003984 <HAL_TIM_PWM_Start+0x1e4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_TIM_PWM_Start+0x1e8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <HAL_TIM_PWM_Start+0x1ec>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <HAL_TIM_PWM_Start+0x1f0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x142>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_TIM_PWM_Start+0x144>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a20      	ldr	r2, [pc, #128]	; (8003980 <HAL_TIM_PWM_Start+0x1e0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_TIM_PWM_Start+0x194>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d013      	beq.n	8003934 <HAL_TIM_PWM_Start+0x194>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <HAL_TIM_PWM_Start+0x1f4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_TIM_PWM_Start+0x194>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_TIM_PWM_Start+0x1f8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_TIM_PWM_Start+0x194>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_TIM_PWM_Start+0x1e4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_PWM_Start+0x194>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_TIM_PWM_Start+0x1e8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d115      	bne.n	8003960 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_TIM_PWM_Start+0x1fc>)
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d015      	beq.n	8003972 <HAL_TIM_PWM_Start+0x1d2>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d011      	beq.n	8003972 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395e:	e008      	b.n	8003972 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e000      	b.n	8003974 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40013400 	.word	0x40013400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800
 800399c:	00010007 	.word	0x00010007

080039a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e0ff      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b14      	cmp	r3, #20
 80039ca:	f200 80f0 	bhi.w	8003bae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003baf 	.word	0x08003baf
 80039dc:	08003baf 	.word	0x08003baf
 80039e0:	08003baf 	.word	0x08003baf
 80039e4:	08003a69 	.word	0x08003a69
 80039e8:	08003baf 	.word	0x08003baf
 80039ec:	08003baf 	.word	0x08003baf
 80039f0:	08003baf 	.word	0x08003baf
 80039f4:	08003aab 	.word	0x08003aab
 80039f8:	08003baf 	.word	0x08003baf
 80039fc:	08003baf 	.word	0x08003baf
 8003a00:	08003baf 	.word	0x08003baf
 8003a04:	08003aeb 	.word	0x08003aeb
 8003a08:	08003baf 	.word	0x08003baf
 8003a0c:	08003baf 	.word	0x08003baf
 8003a10:	08003baf 	.word	0x08003baf
 8003a14:	08003b2d 	.word	0x08003b2d
 8003a18:	08003baf 	.word	0x08003baf
 8003a1c:	08003baf 	.word	0x08003baf
 8003a20:	08003baf 	.word	0x08003baf
 8003a24:	08003b6d 	.word	0x08003b6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa60 	bl	8003ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e0a5      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fad0 	bl	8004014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e084      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fb39 	bl	8004128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e064      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fba1 	bl	8004238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e043      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fc0a 	bl	800434c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b6a:	e023      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fc4e 	bl	8004414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003bac:	e002      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop

08003bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_ConfigClockSource+0x1c>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0de      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x1da>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f000 80a9 	beq.w	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003c24:	4a61      	ldr	r2, [pc, #388]	; (8003dac <HAL_TIM_ConfigClockSource+0x1e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f200 80ae 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c2c:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f000 80a1 	beq.w	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003c34:	4a5e      	ldr	r2, [pc, #376]	; (8003db0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f200 80a6 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c3c:	4a5d      	ldr	r2, [pc, #372]	; (8003db4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f000 8099 	beq.w	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003c44:	4a5b      	ldr	r2, [pc, #364]	; (8003db4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f200 809e 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c4c:	4a5a      	ldr	r2, [pc, #360]	; (8003db8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f000 8091 	beq.w	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	f200 8096 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c60:	f000 8089 	beq.w	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003c64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c68:	f200 808e 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c70:	d03e      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0x128>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	f200 8087 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	f000 8086 	beq.w	8003d8e <HAL_TIM_ConfigClockSource+0x1c6>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d87f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c8c:	2b70      	cmp	r3, #112	; 0x70
 8003c8e:	d87b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c90:	2b60      	cmp	r3, #96	; 0x60
 8003c92:	d050      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d877      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003c98:	2b50      	cmp	r3, #80	; 0x50
 8003c9a:	d03c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x14e>
 8003c9c:	2b50      	cmp	r3, #80	; 0x50
 8003c9e:	d873      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d058      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x18e>
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d86f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003ca8:	2b30      	cmp	r3, #48	; 0x30
 8003caa:	d064      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d86b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d060      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d867      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d05a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003cc0:	e062      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fc81 	bl	80045d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	609a      	str	r2, [r3, #8]
      break;
 8003cee:	e04f      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f000 fc6a 	bl	80045d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d12:	609a      	str	r2, [r3, #8]
      break;
 8003d14:	e03c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fbdc 	bl	80044e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2150      	movs	r1, #80	; 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fc35 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d34:	e02c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fbfb 	bl	800453e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2160      	movs	r1, #96	; 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc25 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d54:	e01c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fbbc 	bl	80044e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc15 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d74:	e00c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fc0c 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d86:	e003      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e000      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	00100070 	.word	0x00100070
 8003db0:	00100040 	.word	0x00100040
 8003db4:	00100030 	.word	0x00100030
 8003db8:	00100020 	.word	0x00100020

08003dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a42      	ldr	r2, [pc, #264]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00f      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d00b      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3f      	ldr	r2, [pc, #252]	; (8003edc <TIM_Base_SetConfig+0x120>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3e      	ldr	r2, [pc, #248]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x38>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <TIM_Base_SetConfig+0x128>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a33      	ldr	r2, [pc, #204]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01b      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d017      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <TIM_Base_SetConfig+0x120>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <TIM_Base_SetConfig+0x124>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00f      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2e      	ldr	r2, [pc, #184]	; (8003ee4 <TIM_Base_SetConfig+0x128>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <TIM_Base_SetConfig+0x12c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <TIM_Base_SetConfig+0x130>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <TIM_Base_SetConfig+0x134>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <TIM_Base_SetConfig+0x11c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <TIM_Base_SetConfig+0x128>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <TIM_Base_SetConfig+0x12c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <TIM_Base_SetConfig+0x130>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xe8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <TIM_Base_SetConfig+0x134>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f023 0201 	bic.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f023 0201 	bic.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 0302 	bic.w	r3, r3, #2
 8003f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a2c      	ldr	r2, [pc, #176]	; (8004000 <TIM_OC1_SetConfig+0x10c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00f      	beq.n	8003f74 <TIM_OC1_SetConfig+0x80>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a2b      	ldr	r2, [pc, #172]	; (8004004 <TIM_OC1_SetConfig+0x110>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00b      	beq.n	8003f74 <TIM_OC1_SetConfig+0x80>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <TIM_OC1_SetConfig+0x114>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <TIM_OC1_SetConfig+0x80>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <TIM_OC1_SetConfig+0x118>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_OC1_SetConfig+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <TIM_OC1_SetConfig+0x11c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10c      	bne.n	8003f8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0308 	bic.w	r3, r3, #8
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <TIM_OC1_SetConfig+0x10c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00f      	beq.n	8003fb6 <TIM_OC1_SetConfig+0xc2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <TIM_OC1_SetConfig+0x110>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_OC1_SetConfig+0xc2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <TIM_OC1_SetConfig+0x114>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_OC1_SetConfig+0xc2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <TIM_OC1_SetConfig+0x118>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC1_SetConfig+0xc2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a17      	ldr	r2, [pc, #92]	; (8004010 <TIM_OC1_SetConfig+0x11c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d111      	bne.n	8003fda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40013400 	.word	0x40013400
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800

08004014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f023 0210 	bic.w	r2, r3, #16
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0320 	bic.w	r3, r3, #32
 8004062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a28      	ldr	r2, [pc, #160]	; (8004114 <TIM_OC2_SetConfig+0x100>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC2_SetConfig+0x6c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a27      	ldr	r2, [pc, #156]	; (8004118 <TIM_OC2_SetConfig+0x104>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10d      	bne.n	800409c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <TIM_OC2_SetConfig+0x100>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <TIM_OC2_SetConfig+0xb0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <TIM_OC2_SetConfig+0x104>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_OC2_SetConfig+0xb0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a1b      	ldr	r2, [pc, #108]	; (800411c <TIM_OC2_SetConfig+0x108>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_OC2_SetConfig+0xb0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <TIM_OC2_SetConfig+0x10c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC2_SetConfig+0xb0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a19      	ldr	r2, [pc, #100]	; (8004124 <TIM_OC2_SetConfig+0x110>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d113      	bne.n	80040ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a27      	ldr	r2, [pc, #156]	; (8004224 <TIM_OC3_SetConfig+0xfc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_OC3_SetConfig+0x6a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <TIM_OC3_SetConfig+0x100>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <TIM_OC3_SetConfig+0xfc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00f      	beq.n	80041d6 <TIM_OC3_SetConfig+0xae>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <TIM_OC3_SetConfig+0x100>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <TIM_OC3_SetConfig+0xae>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <TIM_OC3_SetConfig+0x104>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <TIM_OC3_SetConfig+0xae>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a19      	ldr	r2, [pc, #100]	; (8004230 <TIM_OC3_SetConfig+0x108>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_OC3_SetConfig+0xae>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a18      	ldr	r2, [pc, #96]	; (8004234 <TIM_OC3_SetConfig+0x10c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d113      	bne.n	80041fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40013400 	.word	0x40013400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800

08004238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	031b      	lsls	r3, r3, #12
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <TIM_OC4_SetConfig+0x100>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC4_SetConfig+0x6c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a27      	ldr	r2, [pc, #156]	; (800433c <TIM_OC4_SetConfig+0x104>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	031b      	lsls	r3, r3, #12
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <TIM_OC4_SetConfig+0x100>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_OC4_SetConfig+0xb0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <TIM_OC4_SetConfig+0x104>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_OC4_SetConfig+0xb0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <TIM_OC4_SetConfig+0x108>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_OC4_SetConfig+0xb0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <TIM_OC4_SetConfig+0x10c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC4_SetConfig+0xb0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <TIM_OC4_SetConfig+0x110>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d113      	bne.n	8004310 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	019b      	lsls	r3, r3, #6
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40013400 	.word	0x40013400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <TIM_OC5_SetConfig+0xb4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a16      	ldr	r2, [pc, #88]	; (8004404 <TIM_OC5_SetConfig+0xb8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <TIM_OC5_SetConfig+0xbc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <TIM_OC5_SetConfig+0xc0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a13      	ldr	r2, [pc, #76]	; (8004410 <TIM_OC5_SetConfig+0xc4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d109      	bne.n	80043da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40013400 	.word	0x40013400
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800

08004414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800445a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	051b      	lsls	r3, r3, #20
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <TIM_OC6_SetConfig+0xb8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a17      	ldr	r2, [pc, #92]	; (80044d0 <TIM_OC6_SetConfig+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00b      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <TIM_OC6_SetConfig+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <TIM_OC6_SetConfig+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <TIM_OC6_SetConfig+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d109      	bne.n	80044a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	029b      	lsls	r3, r3, #10
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40013400 	.word	0x40013400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800

080044e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0210 	bic.w	r2, r3, #16
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800457a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	f043 0307 	orr.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	021a      	lsls	r2, r3, #8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2201      	movs	r2, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	43db      	mvns	r3, r3
 800463a:	401a      	ands	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e065      	b.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d013      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a12      	ldr	r2, [pc, #72]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a13      	ldr	r2, [pc, #76]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d10c      	bne.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004722:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	4313      	orrs	r3, r2
 800472c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40013400 	.word	0x40013400
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800
 8004764:	40014000 	.word	0x40014000

08004768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e042      	b.n	8004800 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7fd f927 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2224      	movs	r2, #36	; 0x24
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 ff8e 	bl	80056d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fcbf 	bl	800513c <UART_SetConfig>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e01b      	b.n	8004800 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f001 f80d 	bl	8005818 <UART_CheckIdleState>
 80047fe:	4603      	mov	r3, r0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	2b20      	cmp	r3, #32
 8004820:	d17b      	bne.n	800491a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_Transmit+0x26>
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e074      	b.n	800491c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004842:	f7fd fb7d 	bl	8001f40 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d108      	bne.n	8004874 <HAL_UART_Transmit+0x6c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e003      	b.n	800487c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800487c:	e030      	b.n	80048e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f001 f86f 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e03d      	b.n	800491c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	3302      	adds	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e007      	b.n	80048ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1c8      	bne.n	800487e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f001 f838 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e006      	b.n	800491c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493a:	2b20      	cmp	r3, #32
 800493c:	f040 80b5 	bne.w	8004aaa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Receive+0x28>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0ad      	b.n	8004aac <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2222      	movs	r2, #34	; 0x22
 800495c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fd faeb 	bl	8001f40 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d10e      	bne.n	80049a4 <HAL_UART_Receive+0x80>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <HAL_UART_Receive+0x76>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004998:	e02d      	b.n	80049f6 <HAL_UART_Receive+0xd2>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	22ff      	movs	r2, #255	; 0xff
 800499e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049a2:	e028      	b.n	80049f6 <HAL_UART_Receive+0xd2>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <HAL_UART_Receive+0xa4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d104      	bne.n	80049be <HAL_UART_Receive+0x9a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	22ff      	movs	r2, #255	; 0xff
 80049b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049bc:	e01b      	b.n	80049f6 <HAL_UART_Receive+0xd2>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	227f      	movs	r2, #127	; 0x7f
 80049c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049c6:	e016      	b.n	80049f6 <HAL_UART_Receive+0xd2>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049d0:	d10d      	bne.n	80049ee <HAL_UART_Receive+0xca>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <HAL_UART_Receive+0xc0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	227f      	movs	r2, #127	; 0x7f
 80049de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049e2:	e008      	b.n	80049f6 <HAL_UART_Receive+0xd2>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	223f      	movs	r2, #63	; 0x3f
 80049e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049ec:	e003      	b.n	80049f6 <HAL_UART_Receive+0xd2>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a06:	d108      	bne.n	8004a1a <HAL_UART_Receive+0xf6>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e003      	b.n	8004a22 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a22:	e036      	b.n	8004a92 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2120      	movs	r1, #32
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 ff9c 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e032      	b.n	8004aac <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10c      	bne.n	8004a66 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	8a7b      	ldrh	r3, [r7, #18]
 8004a56:	4013      	ands	r3, r2
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3302      	adds	r3, #2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e00c      	b.n	8004a80 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	8a7b      	ldrh	r3, [r7, #18]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	4013      	ands	r3, r2
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1c2      	bne.n	8004a24 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b0ba      	sub	sp, #232	; 0xe8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11b      	bne.n	8004b28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 82e3 	beq.w	80050e4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
      }
      return;
 8004b26:	e2dd      	b.n	80050e4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8123 	beq.w	8004d78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <HAL_UART_IRQHandler+0x2b8>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b42:	4b8b      	ldr	r3, [pc, #556]	; (8004d70 <HAL_UART_IRQHandler+0x2bc>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8116 	beq.w	8004d78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <HAL_UART_IRQHandler+0xc8>
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f043 0201 	orr.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d011      	beq.n	8004bac <HAL_UART_IRQHandler+0xf8>
 8004b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <HAL_UART_IRQHandler+0x128>
 8004bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f043 0202 	orr.w	r2, r3, #2
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004bf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004bf8:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <HAL_UART_IRQHandler+0x2b8>)
 8004bfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2208      	movs	r2, #8
 8004c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f043 0208 	orr.w	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d012      	beq.n	8004c4a <HAL_UART_IRQHandler+0x196>
 8004c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8249 	beq.w	80050e8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d054      	beq.n	8004d58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fec9 	bl	8005a46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d146      	bne.n	8004d50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1d9      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_UART_IRQHandler+0x2c0>)
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fd fa9f 	bl	800226c <HAL_DMA_Abort_IT>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004d42:	4610      	mov	r0, r2
 8004d44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d46:	e00f      	b.n	8004d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f9e1 	bl	8005110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4e:	e00b      	b.n	8004d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f9dd 	bl	8005110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d56:	e007      	b.n	8004d68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f9d9 	bl	8005110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004d66:	e1bf      	b.n	80050e8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	bf00      	nop
    return;
 8004d6a:	e1bd      	b.n	80050e8 <HAL_UART_IRQHandler+0x634>
 8004d6c:	10000001 	.word	0x10000001
 8004d70:	04000120 	.word	0x04000120
 8004d74:	08005b13 	.word	0x08005b13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f040 8153 	bne.w	8005028 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 814c 	beq.w	8005028 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8145 	beq.w	8005028 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	f040 80bb 	bne.w	8004f2c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 818f 	beq.w	80050ec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	f080 8187 	bcs.w	80050ec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004de4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f040 8087 	bne.w	8004f0a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1da      	bne.n	8004dfc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3308      	adds	r3, #8
 8004e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e1      	bne.n	8004e46 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004eac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e3      	bne.n	8004e82 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed8:	f023 0310 	bic.w	r3, r3, #16
 8004edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e4      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fd f958 	bl	80021ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8fd 	bl	8005124 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f2a:	e0df      	b.n	80050ec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80d1 	beq.w	80050f0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80cc 	beq.w	80050f0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e4      	bne.n	8004f58 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3308      	adds	r3, #8
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e1      	bne.n	8004f8e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	69b9      	ldr	r1, [r7, #24]
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	617b      	str	r3, [r7, #20]
   return(result);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e4      	bne.n	8004fde <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800501a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f87f 	bl	8005124 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005026:	e063      	b.n	80050f0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00e      	beq.n	8005052 <HAL_UART_IRQHandler+0x59e>
 8005034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fda2 	bl	8005b94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005050:	e051      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d014      	beq.n	8005088 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800506a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507a:	2b00      	cmp	r3, #0
 800507c:	d03a      	beq.n	80050f4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
    }
    return;
 8005086:	e035      	b.n	80050f4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <HAL_UART_IRQHandler+0x5f4>
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fd4c 	bl	8005b3e <UART_EndTransmit_IT>
    return;
 80050a6:	e026      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <HAL_UART_IRQHandler+0x614>
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fd7b 	bl	8005bbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050c6:	e016      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d010      	beq.n	80050f6 <HAL_UART_IRQHandler+0x642>
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	da0c      	bge.n	80050f6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fd63 	bl	8005ba8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050e2:	e008      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
      return;
 80050e4:	bf00      	nop
 80050e6:	e006      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
    return;
 80050e8:	bf00      	nop
 80050ea:	e004      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
      return;
 80050ec:	bf00      	nop
 80050ee:	e002      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
      return;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <HAL_UART_IRQHandler+0x642>
    return;
 80050f4:	bf00      	nop
  }
}
 80050f6:	37e8      	adds	r7, #232	; 0xe8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b08c      	sub	sp, #48	; 0x30
 8005142:	af00      	add	r7, sp, #0
 8005144:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4313      	orrs	r3, r2
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4bab      	ldr	r3, [pc, #684]	; (8005418 <UART_SetConfig+0x2dc>)
 800516c:	4013      	ands	r3, r2
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4aa0      	ldr	r2, [pc, #640]	; (800541c <UART_SetConfig+0x2e0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a4:	4313      	orrs	r3, r2
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051bc:	430b      	orrs	r3, r1
 80051be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	f023 010f 	bic.w	r1, r3, #15
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a91      	ldr	r2, [pc, #580]	; (8005420 <UART_SetConfig+0x2e4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d125      	bne.n	800522c <UART_SetConfig+0xf0>
 80051e0:	4b90      	ldr	r3, [pc, #576]	; (8005424 <UART_SetConfig+0x2e8>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d81a      	bhi.n	8005224 <UART_SetConfig+0xe8>
 80051ee:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0xb8>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005205 	.word	0x08005205
 80051f8:	08005215 	.word	0x08005215
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	0800521d 	.word	0x0800521d
 8005204:	2301      	movs	r3, #1
 8005206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520a:	e0d6      	b.n	80053ba <UART_SetConfig+0x27e>
 800520c:	2302      	movs	r3, #2
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005212:	e0d2      	b.n	80053ba <UART_SetConfig+0x27e>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e0ce      	b.n	80053ba <UART_SetConfig+0x27e>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e0ca      	b.n	80053ba <UART_SetConfig+0x27e>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e0c6      	b.n	80053ba <UART_SetConfig+0x27e>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a7d      	ldr	r2, [pc, #500]	; (8005428 <UART_SetConfig+0x2ec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d138      	bne.n	80052a8 <UART_SetConfig+0x16c>
 8005236:	4b7b      	ldr	r3, [pc, #492]	; (8005424 <UART_SetConfig+0x2e8>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b0c      	cmp	r3, #12
 8005242:	d82d      	bhi.n	80052a0 <UART_SetConfig+0x164>
 8005244:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x110>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005281 	.word	0x08005281
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080052a1 	.word	0x080052a1
 8005258:	080052a1 	.word	0x080052a1
 800525c:	08005291 	.word	0x08005291
 8005260:	080052a1 	.word	0x080052a1
 8005264:	080052a1 	.word	0x080052a1
 8005268:	080052a1 	.word	0x080052a1
 800526c:	08005289 	.word	0x08005289
 8005270:	080052a1 	.word	0x080052a1
 8005274:	080052a1 	.word	0x080052a1
 8005278:	080052a1 	.word	0x080052a1
 800527c:	08005299 	.word	0x08005299
 8005280:	2300      	movs	r3, #0
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005286:	e098      	b.n	80053ba <UART_SetConfig+0x27e>
 8005288:	2302      	movs	r3, #2
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528e:	e094      	b.n	80053ba <UART_SetConfig+0x27e>
 8005290:	2304      	movs	r3, #4
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005296:	e090      	b.n	80053ba <UART_SetConfig+0x27e>
 8005298:	2308      	movs	r3, #8
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529e:	e08c      	b.n	80053ba <UART_SetConfig+0x27e>
 80052a0:	2310      	movs	r3, #16
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a6:	e088      	b.n	80053ba <UART_SetConfig+0x27e>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a5f      	ldr	r2, [pc, #380]	; (800542c <UART_SetConfig+0x2f0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d125      	bne.n	80052fe <UART_SetConfig+0x1c2>
 80052b2:	4b5c      	ldr	r3, [pc, #368]	; (8005424 <UART_SetConfig+0x2e8>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d016      	beq.n	80052ee <UART_SetConfig+0x1b2>
 80052c0:	2b30      	cmp	r3, #48	; 0x30
 80052c2:	d818      	bhi.n	80052f6 <UART_SetConfig+0x1ba>
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d00a      	beq.n	80052de <UART_SetConfig+0x1a2>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d814      	bhi.n	80052f6 <UART_SetConfig+0x1ba>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <UART_SetConfig+0x19a>
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d008      	beq.n	80052e6 <UART_SetConfig+0x1aa>
 80052d4:	e00f      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052dc:	e06d      	b.n	80053ba <UART_SetConfig+0x27e>
 80052de:	2302      	movs	r3, #2
 80052e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e4:	e069      	b.n	80053ba <UART_SetConfig+0x27e>
 80052e6:	2304      	movs	r3, #4
 80052e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ec:	e065      	b.n	80053ba <UART_SetConfig+0x27e>
 80052ee:	2308      	movs	r3, #8
 80052f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f4:	e061      	b.n	80053ba <UART_SetConfig+0x27e>
 80052f6:	2310      	movs	r3, #16
 80052f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fc:	e05d      	b.n	80053ba <UART_SetConfig+0x27e>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a4b      	ldr	r2, [pc, #300]	; (8005430 <UART_SetConfig+0x2f4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d125      	bne.n	8005354 <UART_SetConfig+0x218>
 8005308:	4b46      	ldr	r3, [pc, #280]	; (8005424 <UART_SetConfig+0x2e8>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005312:	2bc0      	cmp	r3, #192	; 0xc0
 8005314:	d016      	beq.n	8005344 <UART_SetConfig+0x208>
 8005316:	2bc0      	cmp	r3, #192	; 0xc0
 8005318:	d818      	bhi.n	800534c <UART_SetConfig+0x210>
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d00a      	beq.n	8005334 <UART_SetConfig+0x1f8>
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d814      	bhi.n	800534c <UART_SetConfig+0x210>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <UART_SetConfig+0x1f0>
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d008      	beq.n	800533c <UART_SetConfig+0x200>
 800532a:	e00f      	b.n	800534c <UART_SetConfig+0x210>
 800532c:	2300      	movs	r3, #0
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005332:	e042      	b.n	80053ba <UART_SetConfig+0x27e>
 8005334:	2302      	movs	r3, #2
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533a:	e03e      	b.n	80053ba <UART_SetConfig+0x27e>
 800533c:	2304      	movs	r3, #4
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005342:	e03a      	b.n	80053ba <UART_SetConfig+0x27e>
 8005344:	2308      	movs	r3, #8
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534a:	e036      	b.n	80053ba <UART_SetConfig+0x27e>
 800534c:	2310      	movs	r3, #16
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005352:	e032      	b.n	80053ba <UART_SetConfig+0x27e>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a30      	ldr	r2, [pc, #192]	; (800541c <UART_SetConfig+0x2e0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d12a      	bne.n	80053b4 <UART_SetConfig+0x278>
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <UART_SetConfig+0x2e8>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800536c:	d01a      	beq.n	80053a4 <UART_SetConfig+0x268>
 800536e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005372:	d81b      	bhi.n	80053ac <UART_SetConfig+0x270>
 8005374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005378:	d00c      	beq.n	8005394 <UART_SetConfig+0x258>
 800537a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537e:	d815      	bhi.n	80053ac <UART_SetConfig+0x270>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <UART_SetConfig+0x250>
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d008      	beq.n	800539c <UART_SetConfig+0x260>
 800538a:	e00f      	b.n	80053ac <UART_SetConfig+0x270>
 800538c:	2300      	movs	r3, #0
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005392:	e012      	b.n	80053ba <UART_SetConfig+0x27e>
 8005394:	2302      	movs	r3, #2
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800539a:	e00e      	b.n	80053ba <UART_SetConfig+0x27e>
 800539c:	2304      	movs	r3, #4
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a2:	e00a      	b.n	80053ba <UART_SetConfig+0x27e>
 80053a4:	2308      	movs	r3, #8
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053aa:	e006      	b.n	80053ba <UART_SetConfig+0x27e>
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b2:	e002      	b.n	80053ba <UART_SetConfig+0x27e>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <UART_SetConfig+0x2e0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f040 80a8 	bne.w	8005516 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d834      	bhi.n	8005438 <UART_SetConfig+0x2fc>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x298>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005439 	.word	0x08005439
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005439 	.word	0x08005439
 80053e4:	08005407 	.word	0x08005407
 80053e8:	08005439 	.word	0x08005439
 80053ec:	08005439 	.word	0x08005439
 80053f0:	08005439 	.word	0x08005439
 80053f4:	0800540f 	.word	0x0800540f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7fd fec2 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053fe:	e021      	b.n	8005444 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <UART_SetConfig+0x2f8>)
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005404:	e01e      	b.n	8005444 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fd fe4d 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800540a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800540c:	e01a      	b.n	8005444 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005414:	e016      	b.n	8005444 <UART_SetConfig+0x308>
 8005416:	bf00      	nop
 8005418:	cfff69f3 	.word	0xcfff69f3
 800541c:	40008000 	.word	0x40008000
 8005420:	40013800 	.word	0x40013800
 8005424:	40021000 	.word	0x40021000
 8005428:	40004400 	.word	0x40004400
 800542c:	40004800 	.word	0x40004800
 8005430:	40004c00 	.word	0x40004c00
 8005434:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005442:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 812a 	beq.w	80056a0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	4a9e      	ldr	r2, [pc, #632]	; (80056cc <UART_SetConfig+0x590>)
 8005452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005456:	461a      	mov	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	fbb3 f3f2 	udiv	r3, r3, r2
 800545e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4413      	add	r3, r2
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	429a      	cmp	r2, r3
 800546e:	d305      	bcc.n	800547c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	429a      	cmp	r2, r3
 800547a:	d903      	bls.n	8005484 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005482:	e10d      	b.n	80056a0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2200      	movs	r2, #0
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	60fa      	str	r2, [r7, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	4a8e      	ldr	r2, [pc, #568]	; (80056cc <UART_SetConfig+0x590>)
 8005492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005496:	b29b      	uxth	r3, r3
 8005498:	2200      	movs	r2, #0
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054a6:	f7fb fc17 	bl	8000cd8 <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	020b      	lsls	r3, r1, #8
 80054bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054c0:	0202      	lsls	r2, r0, #8
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	6849      	ldr	r1, [r1, #4]
 80054c6:	0849      	lsrs	r1, r1, #1
 80054c8:	2000      	movs	r0, #0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4605      	mov	r5, r0
 80054ce:	eb12 0804 	adds.w	r8, r2, r4
 80054d2:	eb43 0905 	adc.w	r9, r3, r5
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	469a      	mov	sl, r3
 80054de:	4693      	mov	fp, r2
 80054e0:	4652      	mov	r2, sl
 80054e2:	465b      	mov	r3, fp
 80054e4:	4640      	mov	r0, r8
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fb fbf6 	bl	8000cd8 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fa:	d308      	bcc.n	800550e <UART_SetConfig+0x3d2>
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005502:	d204      	bcs.n	800550e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	60da      	str	r2, [r3, #12]
 800550c:	e0c8      	b.n	80056a0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005514:	e0c4      	b.n	80056a0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551e:	d167      	bne.n	80055f0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005524:	2b08      	cmp	r3, #8
 8005526:	d828      	bhi.n	800557a <UART_SetConfig+0x43e>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0x3f4>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005555 	.word	0x08005555
 8005534:	0800555d 	.word	0x0800555d
 8005538:	08005565 	.word	0x08005565
 800553c:	0800557b 	.word	0x0800557b
 8005540:	0800556b 	.word	0x0800556b
 8005544:	0800557b 	.word	0x0800557b
 8005548:	0800557b 	.word	0x0800557b
 800554c:	0800557b 	.word	0x0800557b
 8005550:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fd fe14 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8005558:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800555a:	e014      	b.n	8005586 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7fd fe26 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8005560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005562:	e010      	b.n	8005586 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b5a      	ldr	r3, [pc, #360]	; (80056d0 <UART_SetConfig+0x594>)
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005568:	e00d      	b.n	8005586 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fd fd9b 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800556e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005570:	e009      	b.n	8005586 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005578:	e005      	b.n	8005586 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8089 	beq.w	80056a0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	4a4e      	ldr	r2, [pc, #312]	; (80056cc <UART_SetConfig+0x590>)
 8005594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005598:	461a      	mov	r2, r3
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	fbb3 f3f2 	udiv	r3, r3, r2
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	441a      	add	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d916      	bls.n	80055e8 <UART_SetConfig+0x4ac>
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	d212      	bcs.n	80055e8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f023 030f 	bic.w	r3, r3, #15
 80055ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	8bfb      	ldrh	r3, [r7, #30]
 80055da:	4313      	orrs	r3, r2
 80055dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	8bfa      	ldrh	r2, [r7, #30]
 80055e4:	60da      	str	r2, [r3, #12]
 80055e6:	e05b      	b.n	80056a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055ee:	e057      	b.n	80056a0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d828      	bhi.n	800564a <UART_SetConfig+0x50e>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x4c4>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005635 	.word	0x08005635
 800560c:	0800564b 	.word	0x0800564b
 8005610:	0800563b 	.word	0x0800563b
 8005614:	0800564b 	.word	0x0800564b
 8005618:	0800564b 	.word	0x0800564b
 800561c:	0800564b 	.word	0x0800564b
 8005620:	08005643 	.word	0x08005643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fd fdac 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800562a:	e014      	b.n	8005656 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7fd fdbe 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8005630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005632:	e010      	b.n	8005656 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005634:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <UART_SetConfig+0x594>)
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005638:	e00d      	b.n	8005656 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563a:	f7fd fd33 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005640:	e009      	b.n	8005656 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005648:	e005      	b.n	8005656 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005654:	bf00      	nop
    }

    if (pclk != 0U)
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d021      	beq.n	80056a0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <UART_SetConfig+0x590>)
 8005662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005666:	461a      	mov	r2, r3
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	fbb3 f2f2 	udiv	r2, r3, r2
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	441a      	add	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	2b0f      	cmp	r3, #15
 8005684:	d909      	bls.n	800569a <UART_SetConfig+0x55e>
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568c:	d205      	bcs.n	800569a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	b29a      	uxth	r2, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60da      	str	r2, [r3, #12]
 8005698:	e002      	b.n	80056a0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80056bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3730      	adds	r7, #48	; 0x30
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ca:	bf00      	nop
 80056cc:	0800a920 	.word	0x0800a920
 80056d0:	00f42400 	.word	0x00f42400

080056d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01a      	beq.n	80057ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d2:	d10a      	bne.n	80057ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b098      	sub	sp, #96	; 0x60
 800581c:	af02      	add	r7, sp, #8
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005828:	f7fc fb8a 	bl	8001f40 <HAL_GetTick>
 800582c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b08      	cmp	r3, #8
 800583a:	d12f      	bne.n	800589c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005844:	2200      	movs	r2, #0
 8005846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f88e 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d022      	beq.n	800589c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586a:	653b      	str	r3, [r7, #80]	; 0x50
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005874:	647b      	str	r3, [r7, #68]	; 0x44
 8005876:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800587a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e063      	b.n	8005964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d149      	bne.n	800593e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b2:	2200      	movs	r2, #0
 80058b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f857 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03c      	beq.n	800593e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	623b      	str	r3, [r7, #32]
   return(result);
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	633b      	str	r3, [r7, #48]	; 0x30
 80058e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	60fb      	str	r3, [r7, #12]
   return(result);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005916:	61fa      	str	r2, [r7, #28]
 8005918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	69b9      	ldr	r1, [r7, #24]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	617b      	str	r3, [r7, #20]
   return(result);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e012      	b.n	8005964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3758      	adds	r7, #88	; 0x58
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	e04f      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d04b      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fc fadb 	bl	8001f40 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <UART_WaitOnFlagUntilTimeout+0x30>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e04e      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d037      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d034      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d031      	beq.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d110      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2208      	movs	r2, #8
 80059ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f838 	bl	8005a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2208      	movs	r2, #8
 80059da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e029      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f8:	d111      	bne.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f81e 	bl	8005a46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e00f      	b.n	8005a3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d0a0      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b095      	sub	sp, #84	; 0x54
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e6      	bne.n	8005a4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e3      	bne.n	8005a80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d118      	bne.n	8005af2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e6      	bne.n	8005ac0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b06:	bf00      	nop
 8005b08:	3754      	adds	r7, #84	; 0x54
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff faed 	bl	8005110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b088      	sub	sp, #32
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	613b      	str	r3, [r7, #16]
   return(result);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fab8 	bl	80050fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	bf00      	nop
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e027      	b.n	8005c36 <HAL_UARTEx_DisableFifoMode+0x66>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2224      	movs	r2, #36	; 0x24
 8005bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e02d      	b.n	8005cb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	; 0x24
 8005c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f850 	bl	8005d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e02d      	b.n	8005d32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2224      	movs	r2, #36	; 0x24
 8005ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f812 	bl	8005d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d108      	bne.n	8005d5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d5c:	e031      	b.n	8005dc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d5e:	2308      	movs	r3, #8
 8005d60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d62:	2308      	movs	r3, #8
 8005d64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	0e5b      	lsrs	r3, r3, #25
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	0f5b      	lsrs	r3, r3, #29
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	7b3a      	ldrb	r2, [r7, #12]
 8005d8a:	4911      	ldr	r1, [pc, #68]	; (8005dd0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d8c:	5c8a      	ldrb	r2, [r1, r2]
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d92:	7b3a      	ldrb	r2, [r7, #12]
 8005d94:	490f      	ldr	r1, [pc, #60]	; (8005dd4 <UARTEx_SetNbDataToProcess+0x98>)
 8005d96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d98:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	7b7a      	ldrb	r2, [r7, #13]
 8005da8:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <UARTEx_SetNbDataToProcess+0x94>)
 8005daa:	5c8a      	ldrb	r2, [r1, r2]
 8005dac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005db0:	7b7a      	ldrb	r2, [r7, #13]
 8005db2:	4908      	ldr	r1, [pc, #32]	; (8005dd4 <UARTEx_SetNbDataToProcess+0x98>)
 8005db4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005db6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	0800a938 	.word	0x0800a938
 8005dd4:	0800a940 	.word	0x0800a940

08005dd8 <__errno>:
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <__errno+0x8>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000010 	.word	0x20000010

08005de4 <__libc_init_array>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4d0d      	ldr	r5, [pc, #52]	; (8005e1c <__libc_init_array+0x38>)
 8005de8:	4c0d      	ldr	r4, [pc, #52]	; (8005e20 <__libc_init_array+0x3c>)
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	10a4      	asrs	r4, r4, #2
 8005dee:	2600      	movs	r6, #0
 8005df0:	42a6      	cmp	r6, r4
 8005df2:	d109      	bne.n	8005e08 <__libc_init_array+0x24>
 8005df4:	4d0b      	ldr	r5, [pc, #44]	; (8005e24 <__libc_init_array+0x40>)
 8005df6:	4c0c      	ldr	r4, [pc, #48]	; (8005e28 <__libc_init_array+0x44>)
 8005df8:	f004 fd76 	bl	800a8e8 <_init>
 8005dfc:	1b64      	subs	r4, r4, r5
 8005dfe:	10a4      	asrs	r4, r4, #2
 8005e00:	2600      	movs	r6, #0
 8005e02:	42a6      	cmp	r6, r4
 8005e04:	d105      	bne.n	8005e12 <__libc_init_array+0x2e>
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
 8005e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0c:	4798      	blx	r3
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7ee      	b.n	8005df0 <__libc_init_array+0xc>
 8005e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e16:	4798      	blx	r3
 8005e18:	3601      	adds	r6, #1
 8005e1a:	e7f2      	b.n	8005e02 <__libc_init_array+0x1e>
 8005e1c:	0800adfc 	.word	0x0800adfc
 8005e20:	0800adfc 	.word	0x0800adfc
 8005e24:	0800adfc 	.word	0x0800adfc
 8005e28:	0800ae00 	.word	0x0800ae00

08005e2c <memset>:
 8005e2c:	4402      	add	r2, r0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d100      	bne.n	8005e36 <memset+0xa>
 8005e34:	4770      	bx	lr
 8005e36:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3a:	e7f9      	b.n	8005e30 <memset+0x4>

08005e3c <__cvt>:
 8005e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	ec55 4b10 	vmov	r4, r5, d0
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	460e      	mov	r6, r1
 8005e48:	4619      	mov	r1, r3
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	bfbb      	ittet	lt
 8005e4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e52:	461d      	movlt	r5, r3
 8005e54:	2300      	movge	r3, #0
 8005e56:	232d      	movlt	r3, #45	; 0x2d
 8005e58:	700b      	strb	r3, [r1, #0]
 8005e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e60:	4691      	mov	r9, r2
 8005e62:	f023 0820 	bic.w	r8, r3, #32
 8005e66:	bfbc      	itt	lt
 8005e68:	4622      	movlt	r2, r4
 8005e6a:	4614      	movlt	r4, r2
 8005e6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e70:	d005      	beq.n	8005e7e <__cvt+0x42>
 8005e72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e76:	d100      	bne.n	8005e7a <__cvt+0x3e>
 8005e78:	3601      	adds	r6, #1
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	e000      	b.n	8005e80 <__cvt+0x44>
 8005e7e:	2103      	movs	r1, #3
 8005e80:	ab03      	add	r3, sp, #12
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	ab02      	add	r3, sp, #8
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	ec45 4b10 	vmov	d0, r4, r5
 8005e8c:	4653      	mov	r3, sl
 8005e8e:	4632      	mov	r2, r6
 8005e90:	f001 fe92 	bl	8007bb8 <_dtoa_r>
 8005e94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e98:	4607      	mov	r7, r0
 8005e9a:	d102      	bne.n	8005ea2 <__cvt+0x66>
 8005e9c:	f019 0f01 	tst.w	r9, #1
 8005ea0:	d022      	beq.n	8005ee8 <__cvt+0xac>
 8005ea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ea6:	eb07 0906 	add.w	r9, r7, r6
 8005eaa:	d110      	bne.n	8005ece <__cvt+0x92>
 8005eac:	783b      	ldrb	r3, [r7, #0]
 8005eae:	2b30      	cmp	r3, #48	; 0x30
 8005eb0:	d10a      	bne.n	8005ec8 <__cvt+0x8c>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa fe2d 	bl	8000b18 <__aeabi_dcmpeq>
 8005ebe:	b918      	cbnz	r0, 8005ec8 <__cvt+0x8c>
 8005ec0:	f1c6 0601 	rsb	r6, r6, #1
 8005ec4:	f8ca 6000 	str.w	r6, [sl]
 8005ec8:	f8da 3000 	ldr.w	r3, [sl]
 8005ecc:	4499      	add	r9, r3
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f7fa fe1f 	bl	8000b18 <__aeabi_dcmpeq>
 8005eda:	b108      	cbz	r0, 8005ee0 <__cvt+0xa4>
 8005edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ee0:	2230      	movs	r2, #48	; 0x30
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	454b      	cmp	r3, r9
 8005ee6:	d307      	bcc.n	8005ef8 <__cvt+0xbc>
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eec:	1bdb      	subs	r3, r3, r7
 8005eee:	4638      	mov	r0, r7
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	b004      	add	sp, #16
 8005ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	9103      	str	r1, [sp, #12]
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e7f0      	b.n	8005ee2 <__cvt+0xa6>

08005f00 <__exponent>:
 8005f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f02:	4603      	mov	r3, r0
 8005f04:	2900      	cmp	r1, #0
 8005f06:	bfb8      	it	lt
 8005f08:	4249      	neglt	r1, r1
 8005f0a:	f803 2b02 	strb.w	r2, [r3], #2
 8005f0e:	bfb4      	ite	lt
 8005f10:	222d      	movlt	r2, #45	; 0x2d
 8005f12:	222b      	movge	r2, #43	; 0x2b
 8005f14:	2909      	cmp	r1, #9
 8005f16:	7042      	strb	r2, [r0, #1]
 8005f18:	dd2a      	ble.n	8005f70 <__exponent+0x70>
 8005f1a:	f10d 0407 	add.w	r4, sp, #7
 8005f1e:	46a4      	mov	ip, r4
 8005f20:	270a      	movs	r7, #10
 8005f22:	46a6      	mov	lr, r4
 8005f24:	460a      	mov	r2, r1
 8005f26:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005f2e:	3530      	adds	r5, #48	; 0x30
 8005f30:	2a63      	cmp	r2, #99	; 0x63
 8005f32:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	dcf1      	bgt.n	8005f22 <__exponent+0x22>
 8005f3e:	3130      	adds	r1, #48	; 0x30
 8005f40:	f1ae 0502 	sub.w	r5, lr, #2
 8005f44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f48:	1c44      	adds	r4, r0, #1
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4561      	cmp	r1, ip
 8005f4e:	d30a      	bcc.n	8005f66 <__exponent+0x66>
 8005f50:	f10d 0209 	add.w	r2, sp, #9
 8005f54:	eba2 020e 	sub.w	r2, r2, lr
 8005f58:	4565      	cmp	r5, ip
 8005f5a:	bf88      	it	hi
 8005f5c:	2200      	movhi	r2, #0
 8005f5e:	4413      	add	r3, r2
 8005f60:	1a18      	subs	r0, r3, r0
 8005f62:	b003      	add	sp, #12
 8005f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f6e:	e7ed      	b.n	8005f4c <__exponent+0x4c>
 8005f70:	2330      	movs	r3, #48	; 0x30
 8005f72:	3130      	adds	r1, #48	; 0x30
 8005f74:	7083      	strb	r3, [r0, #2]
 8005f76:	70c1      	strb	r1, [r0, #3]
 8005f78:	1d03      	adds	r3, r0, #4
 8005f7a:	e7f1      	b.n	8005f60 <__exponent+0x60>

08005f7c <_printf_float>:
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	ed2d 8b02 	vpush	{d8}
 8005f84:	b08d      	sub	sp, #52	; 0x34
 8005f86:	460c      	mov	r4, r1
 8005f88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	461f      	mov	r7, r3
 8005f90:	4605      	mov	r5, r0
 8005f92:	f003 f925 	bl	80091e0 <_localeconv_r>
 8005f96:	f8d0 a000 	ldr.w	sl, [r0]
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	f7fa f940 	bl	8000220 <strlen>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	f8c8 2000 	str.w	r2, [r8]
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fd4:	ee08 0a10 	vmov	s16, r0
 8005fd8:	4b9f      	ldr	r3, [pc, #636]	; (8006258 <_printf_float+0x2dc>)
 8005fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fde:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe2:	f7fa fdcb 	bl	8000b7c <__aeabi_dcmpun>
 8005fe6:	bb88      	cbnz	r0, 800604c <_printf_float+0xd0>
 8005fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fec:	4b9a      	ldr	r3, [pc, #616]	; (8006258 <_printf_float+0x2dc>)
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff2:	f7fa fda5 	bl	8000b40 <__aeabi_dcmple>
 8005ff6:	bb48      	cbnz	r0, 800604c <_printf_float+0xd0>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fd94 	bl	8000b2c <__aeabi_dcmplt>
 8006004:	b110      	cbz	r0, 800600c <_printf_float+0x90>
 8006006:	232d      	movs	r3, #45	; 0x2d
 8006008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600c:	4b93      	ldr	r3, [pc, #588]	; (800625c <_printf_float+0x2e0>)
 800600e:	4894      	ldr	r0, [pc, #592]	; (8006260 <_printf_float+0x2e4>)
 8006010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006014:	bf94      	ite	ls
 8006016:	4698      	movls	r8, r3
 8006018:	4680      	movhi	r8, r0
 800601a:	2303      	movs	r3, #3
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	9b05      	ldr	r3, [sp, #20]
 8006020:	f023 0204 	bic.w	r2, r3, #4
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	f04f 0900 	mov.w	r9, #0
 800602a:	9700      	str	r7, [sp, #0]
 800602c:	4633      	mov	r3, r6
 800602e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006030:	4621      	mov	r1, r4
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f9d8 	bl	80063e8 <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	f040 8090 	bne.w	800615e <_printf_float+0x1e2>
 800603e:	f04f 30ff 	mov.w	r0, #4294967295
 8006042:	b00d      	add	sp, #52	; 0x34
 8006044:	ecbd 8b02 	vpop	{d8}
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa fd92 	bl	8000b7c <__aeabi_dcmpun>
 8006058:	b140      	cbz	r0, 800606c <_printf_float+0xf0>
 800605a:	464b      	mov	r3, r9
 800605c:	2b00      	cmp	r3, #0
 800605e:	bfbc      	itt	lt
 8006060:	232d      	movlt	r3, #45	; 0x2d
 8006062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006066:	487f      	ldr	r0, [pc, #508]	; (8006264 <_printf_float+0x2e8>)
 8006068:	4b7f      	ldr	r3, [pc, #508]	; (8006268 <_printf_float+0x2ec>)
 800606a:	e7d1      	b.n	8006010 <_printf_float+0x94>
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006072:	9206      	str	r2, [sp, #24]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	d13f      	bne.n	80060f8 <_printf_float+0x17c>
 8006078:	2306      	movs	r3, #6
 800607a:	6063      	str	r3, [r4, #4]
 800607c:	9b05      	ldr	r3, [sp, #20]
 800607e:	6861      	ldr	r1, [r4, #4]
 8006080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006084:	2300      	movs	r3, #0
 8006086:	9303      	str	r3, [sp, #12]
 8006088:	ab0a      	add	r3, sp, #40	; 0x28
 800608a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800608e:	ab09      	add	r3, sp, #36	; 0x24
 8006090:	ec49 8b10 	vmov	d0, r8, r9
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6022      	str	r2, [r4, #0]
 8006098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff fecd 	bl	8005e3c <__cvt>
 80060a2:	9b06      	ldr	r3, [sp, #24]
 80060a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060a6:	2b47      	cmp	r3, #71	; 0x47
 80060a8:	4680      	mov	r8, r0
 80060aa:	d108      	bne.n	80060be <_printf_float+0x142>
 80060ac:	1cc8      	adds	r0, r1, #3
 80060ae:	db02      	blt.n	80060b6 <_printf_float+0x13a>
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	4299      	cmp	r1, r3
 80060b4:	dd41      	ble.n	800613a <_printf_float+0x1be>
 80060b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80060ba:	fa5f fb8b 	uxtb.w	fp, fp
 80060be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060c2:	d820      	bhi.n	8006106 <_printf_float+0x18a>
 80060c4:	3901      	subs	r1, #1
 80060c6:	465a      	mov	r2, fp
 80060c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060cc:	9109      	str	r1, [sp, #36]	; 0x24
 80060ce:	f7ff ff17 	bl	8005f00 <__exponent>
 80060d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060d4:	1813      	adds	r3, r2, r0
 80060d6:	2a01      	cmp	r2, #1
 80060d8:	4681      	mov	r9, r0
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	dc02      	bgt.n	80060e4 <_printf_float+0x168>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	07d2      	lsls	r2, r2, #31
 80060e2:	d501      	bpl.n	80060e8 <_printf_float+0x16c>
 80060e4:	3301      	adds	r3, #1
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d09c      	beq.n	800602a <_printf_float+0xae>
 80060f0:	232d      	movs	r3, #45	; 0x2d
 80060f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f6:	e798      	b.n	800602a <_printf_float+0xae>
 80060f8:	9a06      	ldr	r2, [sp, #24]
 80060fa:	2a47      	cmp	r2, #71	; 0x47
 80060fc:	d1be      	bne.n	800607c <_printf_float+0x100>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1bc      	bne.n	800607c <_printf_float+0x100>
 8006102:	2301      	movs	r3, #1
 8006104:	e7b9      	b.n	800607a <_printf_float+0xfe>
 8006106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800610a:	d118      	bne.n	800613e <_printf_float+0x1c2>
 800610c:	2900      	cmp	r1, #0
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	dd0b      	ble.n	800612a <_printf_float+0x1ae>
 8006112:	6121      	str	r1, [r4, #16]
 8006114:	b913      	cbnz	r3, 800611c <_printf_float+0x1a0>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	07d0      	lsls	r0, r2, #31
 800611a:	d502      	bpl.n	8006122 <_printf_float+0x1a6>
 800611c:	3301      	adds	r3, #1
 800611e:	440b      	add	r3, r1
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	65a1      	str	r1, [r4, #88]	; 0x58
 8006124:	f04f 0900 	mov.w	r9, #0
 8006128:	e7de      	b.n	80060e8 <_printf_float+0x16c>
 800612a:	b913      	cbnz	r3, 8006132 <_printf_float+0x1b6>
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	07d2      	lsls	r2, r2, #31
 8006130:	d501      	bpl.n	8006136 <_printf_float+0x1ba>
 8006132:	3302      	adds	r3, #2
 8006134:	e7f4      	b.n	8006120 <_printf_float+0x1a4>
 8006136:	2301      	movs	r3, #1
 8006138:	e7f2      	b.n	8006120 <_printf_float+0x1a4>
 800613a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800613e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006140:	4299      	cmp	r1, r3
 8006142:	db05      	blt.n	8006150 <_printf_float+0x1d4>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	6121      	str	r1, [r4, #16]
 8006148:	07d8      	lsls	r0, r3, #31
 800614a:	d5ea      	bpl.n	8006122 <_printf_float+0x1a6>
 800614c:	1c4b      	adds	r3, r1, #1
 800614e:	e7e7      	b.n	8006120 <_printf_float+0x1a4>
 8006150:	2900      	cmp	r1, #0
 8006152:	bfd4      	ite	le
 8006154:	f1c1 0202 	rsble	r2, r1, #2
 8006158:	2201      	movgt	r2, #1
 800615a:	4413      	add	r3, r2
 800615c:	e7e0      	b.n	8006120 <_printf_float+0x1a4>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	055a      	lsls	r2, r3, #21
 8006162:	d407      	bmi.n	8006174 <_printf_float+0x1f8>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	4642      	mov	r2, r8
 8006168:	4631      	mov	r1, r6
 800616a:	4628      	mov	r0, r5
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	d12c      	bne.n	80061cc <_printf_float+0x250>
 8006172:	e764      	b.n	800603e <_printf_float+0xc2>
 8006174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006178:	f240 80e0 	bls.w	800633c <_printf_float+0x3c0>
 800617c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006180:	2200      	movs	r2, #0
 8006182:	2300      	movs	r3, #0
 8006184:	f7fa fcc8 	bl	8000b18 <__aeabi_dcmpeq>
 8006188:	2800      	cmp	r0, #0
 800618a:	d034      	beq.n	80061f6 <_printf_float+0x27a>
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <_printf_float+0x2f0>)
 800618e:	2301      	movs	r3, #1
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af51 	beq.w	800603e <_printf_float+0xc2>
 800619c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a0:	429a      	cmp	r2, r3
 80061a2:	db02      	blt.n	80061aa <_printf_float+0x22e>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07d8      	lsls	r0, r3, #31
 80061a8:	d510      	bpl.n	80061cc <_printf_float+0x250>
 80061aa:	ee18 3a10 	vmov	r3, s16
 80061ae:	4652      	mov	r2, sl
 80061b0:	4631      	mov	r1, r6
 80061b2:	4628      	mov	r0, r5
 80061b4:	47b8      	blx	r7
 80061b6:	3001      	adds	r0, #1
 80061b8:	f43f af41 	beq.w	800603e <_printf_float+0xc2>
 80061bc:	f04f 0800 	mov.w	r8, #0
 80061c0:	f104 091a 	add.w	r9, r4, #26
 80061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	4543      	cmp	r3, r8
 80061ca:	dc09      	bgt.n	80061e0 <_printf_float+0x264>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	f100 8105 	bmi.w	80063de <_printf_float+0x462>
 80061d4:	68e0      	ldr	r0, [r4, #12]
 80061d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d8:	4298      	cmp	r0, r3
 80061da:	bfb8      	it	lt
 80061dc:	4618      	movlt	r0, r3
 80061de:	e730      	b.n	8006042 <_printf_float+0xc6>
 80061e0:	2301      	movs	r3, #1
 80061e2:	464a      	mov	r2, r9
 80061e4:	4631      	mov	r1, r6
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	f43f af27 	beq.w	800603e <_printf_float+0xc2>
 80061f0:	f108 0801 	add.w	r8, r8, #1
 80061f4:	e7e6      	b.n	80061c4 <_printf_float+0x248>
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	dc39      	bgt.n	8006270 <_printf_float+0x2f4>
 80061fc:	4a1b      	ldr	r2, [pc, #108]	; (800626c <_printf_float+0x2f0>)
 80061fe:	2301      	movs	r3, #1
 8006200:	4631      	mov	r1, r6
 8006202:	4628      	mov	r0, r5
 8006204:	47b8      	blx	r7
 8006206:	3001      	adds	r0, #1
 8006208:	f43f af19 	beq.w	800603e <_printf_float+0xc2>
 800620c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006210:	4313      	orrs	r3, r2
 8006212:	d102      	bne.n	800621a <_printf_float+0x29e>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	07d9      	lsls	r1, r3, #31
 8006218:	d5d8      	bpl.n	80061cc <_printf_float+0x250>
 800621a:	ee18 3a10 	vmov	r3, s16
 800621e:	4652      	mov	r2, sl
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f af09 	beq.w	800603e <_printf_float+0xc2>
 800622c:	f04f 0900 	mov.w	r9, #0
 8006230:	f104 0a1a 	add.w	sl, r4, #26
 8006234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006236:	425b      	negs	r3, r3
 8006238:	454b      	cmp	r3, r9
 800623a:	dc01      	bgt.n	8006240 <_printf_float+0x2c4>
 800623c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623e:	e792      	b.n	8006166 <_printf_float+0x1ea>
 8006240:	2301      	movs	r3, #1
 8006242:	4652      	mov	r2, sl
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f aef7 	beq.w	800603e <_printf_float+0xc2>
 8006250:	f109 0901 	add.w	r9, r9, #1
 8006254:	e7ee      	b.n	8006234 <_printf_float+0x2b8>
 8006256:	bf00      	nop
 8006258:	7fefffff 	.word	0x7fefffff
 800625c:	0800a94c 	.word	0x0800a94c
 8006260:	0800a950 	.word	0x0800a950
 8006264:	0800a958 	.word	0x0800a958
 8006268:	0800a954 	.word	0x0800a954
 800626c:	0800a95c 	.word	0x0800a95c
 8006270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006274:	429a      	cmp	r2, r3
 8006276:	bfa8      	it	ge
 8006278:	461a      	movge	r2, r3
 800627a:	2a00      	cmp	r2, #0
 800627c:	4691      	mov	r9, r2
 800627e:	dc37      	bgt.n	80062f0 <_printf_float+0x374>
 8006280:	f04f 0b00 	mov.w	fp, #0
 8006284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006288:	f104 021a 	add.w	r2, r4, #26
 800628c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	eba3 0309 	sub.w	r3, r3, r9
 8006294:	455b      	cmp	r3, fp
 8006296:	dc33      	bgt.n	8006300 <_printf_float+0x384>
 8006298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800629c:	429a      	cmp	r2, r3
 800629e:	db3b      	blt.n	8006318 <_printf_float+0x39c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07da      	lsls	r2, r3, #31
 80062a4:	d438      	bmi.n	8006318 <_printf_float+0x39c>
 80062a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a8:	9a05      	ldr	r2, [sp, #20]
 80062aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062ac:	1a9a      	subs	r2, r3, r2
 80062ae:	eba3 0901 	sub.w	r9, r3, r1
 80062b2:	4591      	cmp	r9, r2
 80062b4:	bfa8      	it	ge
 80062b6:	4691      	movge	r9, r2
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	dc35      	bgt.n	800632a <_printf_float+0x3ae>
 80062be:	f04f 0800 	mov.w	r8, #0
 80062c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062c6:	f104 0a1a 	add.w	sl, r4, #26
 80062ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	eba3 0309 	sub.w	r3, r3, r9
 80062d4:	4543      	cmp	r3, r8
 80062d6:	f77f af79 	ble.w	80061cc <_printf_float+0x250>
 80062da:	2301      	movs	r3, #1
 80062dc:	4652      	mov	r2, sl
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f aeaa 	beq.w	800603e <_printf_float+0xc2>
 80062ea:	f108 0801 	add.w	r8, r8, #1
 80062ee:	e7ec      	b.n	80062ca <_printf_float+0x34e>
 80062f0:	4613      	mov	r3, r2
 80062f2:	4631      	mov	r1, r6
 80062f4:	4642      	mov	r2, r8
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1c0      	bne.n	8006280 <_printf_float+0x304>
 80062fe:	e69e      	b.n	800603e <_printf_float+0xc2>
 8006300:	2301      	movs	r3, #1
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	9205      	str	r2, [sp, #20]
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	f43f ae97 	beq.w	800603e <_printf_float+0xc2>
 8006310:	9a05      	ldr	r2, [sp, #20]
 8006312:	f10b 0b01 	add.w	fp, fp, #1
 8006316:	e7b9      	b.n	800628c <_printf_float+0x310>
 8006318:	ee18 3a10 	vmov	r3, s16
 800631c:	4652      	mov	r2, sl
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d1be      	bne.n	80062a6 <_printf_float+0x32a>
 8006328:	e689      	b.n	800603e <_printf_float+0xc2>
 800632a:	9a05      	ldr	r2, [sp, #20]
 800632c:	464b      	mov	r3, r9
 800632e:	4442      	add	r2, r8
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	d1c1      	bne.n	80062be <_printf_float+0x342>
 800633a:	e680      	b.n	800603e <_printf_float+0xc2>
 800633c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800633e:	2a01      	cmp	r2, #1
 8006340:	dc01      	bgt.n	8006346 <_printf_float+0x3ca>
 8006342:	07db      	lsls	r3, r3, #31
 8006344:	d538      	bpl.n	80063b8 <_printf_float+0x43c>
 8006346:	2301      	movs	r3, #1
 8006348:	4642      	mov	r2, r8
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae74 	beq.w	800603e <_printf_float+0xc2>
 8006356:	ee18 3a10 	vmov	r3, s16
 800635a:	4652      	mov	r2, sl
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f ae6b 	beq.w	800603e <_printf_float+0xc2>
 8006368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	f7fa fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 8006374:	b9d8      	cbnz	r0, 80063ae <_printf_float+0x432>
 8006376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006378:	f108 0201 	add.w	r2, r8, #1
 800637c:	3b01      	subs	r3, #1
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	d10e      	bne.n	80063a6 <_printf_float+0x42a>
 8006388:	e659      	b.n	800603e <_printf_float+0xc2>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f ae52 	beq.w	800603e <_printf_float+0xc2>
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	4543      	cmp	r3, r8
 80063a4:	dcf1      	bgt.n	800638a <_printf_float+0x40e>
 80063a6:	464b      	mov	r3, r9
 80063a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063ac:	e6dc      	b.n	8006168 <_printf_float+0x1ec>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	f104 0a1a 	add.w	sl, r4, #26
 80063b6:	e7f2      	b.n	800639e <_printf_float+0x422>
 80063b8:	2301      	movs	r3, #1
 80063ba:	4642      	mov	r2, r8
 80063bc:	e7df      	b.n	800637e <_printf_float+0x402>
 80063be:	2301      	movs	r3, #1
 80063c0:	464a      	mov	r2, r9
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	f43f ae38 	beq.w	800603e <_printf_float+0xc2>
 80063ce:	f108 0801 	add.w	r8, r8, #1
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063d6:	1a5b      	subs	r3, r3, r1
 80063d8:	4543      	cmp	r3, r8
 80063da:	dcf0      	bgt.n	80063be <_printf_float+0x442>
 80063dc:	e6fa      	b.n	80061d4 <_printf_float+0x258>
 80063de:	f04f 0800 	mov.w	r8, #0
 80063e2:	f104 0919 	add.w	r9, r4, #25
 80063e6:	e7f4      	b.n	80063d2 <_printf_float+0x456>

080063e8 <_printf_common>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	4616      	mov	r6, r2
 80063ee:	4699      	mov	r9, r3
 80063f0:	688a      	ldr	r2, [r1, #8]
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bfb8      	it	lt
 80063fc:	4613      	movlt	r3, r2
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b10a      	cbz	r2, 800640e <_printf_common+0x26>
 800640a:	3301      	adds	r3, #1
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	0699      	lsls	r1, r3, #26
 8006412:	bf42      	ittt	mi
 8006414:	6833      	ldrmi	r3, [r6, #0]
 8006416:	3302      	addmi	r3, #2
 8006418:	6033      	strmi	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d106      	bne.n	8006430 <_printf_common+0x48>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	6832      	ldr	r2, [r6, #0]
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc26      	bgt.n	800647e <_printf_common+0x96>
 8006430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006434:	1e13      	subs	r3, r2, #0
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	bf18      	it	ne
 800643a:	2301      	movne	r3, #1
 800643c:	0692      	lsls	r2, r2, #26
 800643e:	d42b      	bmi.n	8006498 <_printf_common+0xb0>
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d01e      	beq.n	800648c <_printf_common+0xa4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	68e5      	ldr	r5, [r4, #12]
 8006452:	6832      	ldr	r2, [r6, #0]
 8006454:	f003 0306 	and.w	r3, r3, #6
 8006458:	2b04      	cmp	r3, #4
 800645a:	bf08      	it	eq
 800645c:	1aad      	subeq	r5, r5, r2
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	bf0c      	ite	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	2500      	movne	r5, #0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfc4      	itt	gt
 800646e:	1a9b      	subgt	r3, r3, r2
 8006470:	18ed      	addgt	r5, r5, r3
 8006472:	2600      	movs	r6, #0
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xc8>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xa8>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4649      	mov	r1, r9
 8006484:	4638      	mov	r0, r7
 8006486:	47c0      	blx	r8
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xac>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c6      	b.n	8006426 <_printf_common+0x3e>
 8006498:	18e1      	adds	r1, r4, r3
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	2030      	movs	r0, #48	; 0x30
 800649e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a2:	4422      	add	r2, r4
 80064a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7c7      	b.n	8006440 <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa4>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x8e>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	7e0f      	ldrb	r7, [r1, #24]
 80064ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064cc:	2f78      	cmp	r7, #120	; 0x78
 80064ce:	4691      	mov	r9, r2
 80064d0:	4680      	mov	r8, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	469a      	mov	sl, r3
 80064d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	; 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d8 	beq.w	8006696 <_printf_i+0x1d2>
 80064e6:	2f58      	cmp	r7, #88	; 0x58
 80064e8:	f000 80a3 	beq.w	8006632 <_printf_i+0x16e>
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a101      	add	r1, pc, #4	; (adr r1, 8006504 <_printf_i+0x40>)
 8006500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	0800667d 	.word	0x0800667d
 8006534:	080065a1 	.word	0x080065a1
 8006538:	0800665f 	.word	0x0800665f
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	0800669f 	.word	0x0800669f
 8006548:	080064ed 	.word	0x080064ed
 800654c:	080065a1 	.word	0x080065a1
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006667 	.word	0x08006667
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e0a3      	b.n	80066b8 <_printf_i+0x1f4>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	6829      	ldr	r1, [r5, #0]
 8006574:	0606      	lsls	r6, r0, #24
 8006576:	f101 0304 	add.w	r3, r1, #4
 800657a:	d50a      	bpl.n	8006592 <_printf_i+0xce>
 800657c:	680e      	ldr	r6, [r1, #0]
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	2e00      	cmp	r6, #0
 8006582:	da03      	bge.n	800658c <_printf_i+0xc8>
 8006584:	232d      	movs	r3, #45	; 0x2d
 8006586:	4276      	negs	r6, r6
 8006588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658c:	485e      	ldr	r0, [pc, #376]	; (8006708 <_printf_i+0x244>)
 800658e:	230a      	movs	r3, #10
 8006590:	e019      	b.n	80065c6 <_printf_i+0x102>
 8006592:	680e      	ldr	r6, [r1, #0]
 8006594:	602b      	str	r3, [r5, #0]
 8006596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800659a:	bf18      	it	ne
 800659c:	b236      	sxthne	r6, r6
 800659e:	e7ef      	b.n	8006580 <_printf_i+0xbc>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	1d19      	adds	r1, r3, #4
 80065a6:	6029      	str	r1, [r5, #0]
 80065a8:	0601      	lsls	r1, r0, #24
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0xec>
 80065ac:	681e      	ldr	r6, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0xf2>
 80065b0:	0646      	lsls	r6, r0, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0xe8>
 80065b4:	881e      	ldrh	r6, [r3, #0]
 80065b6:	4854      	ldr	r0, [pc, #336]	; (8006708 <_printf_i+0x244>)
 80065b8:	2f6f      	cmp	r7, #111	; 0x6f
 80065ba:	bf0c      	ite	eq
 80065bc:	2308      	moveq	r3, #8
 80065be:	230a      	movne	r3, #10
 80065c0:	2100      	movs	r1, #0
 80065c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c6:	6865      	ldr	r5, [r4, #4]
 80065c8:	60a5      	str	r5, [r4, #8]
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	bfa2      	ittt	ge
 80065ce:	6821      	ldrge	r1, [r4, #0]
 80065d0:	f021 0104 	bicge.w	r1, r1, #4
 80065d4:	6021      	strge	r1, [r4, #0]
 80065d6:	b90e      	cbnz	r6, 80065dc <_printf_i+0x118>
 80065d8:	2d00      	cmp	r5, #0
 80065da:	d04d      	beq.n	8006678 <_printf_i+0x1b4>
 80065dc:	4615      	mov	r5, r2
 80065de:	fbb6 f1f3 	udiv	r1, r6, r3
 80065e2:	fb03 6711 	mls	r7, r3, r1, r6
 80065e6:	5dc7      	ldrb	r7, [r0, r7]
 80065e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065ec:	4637      	mov	r7, r6
 80065ee:	42bb      	cmp	r3, r7
 80065f0:	460e      	mov	r6, r1
 80065f2:	d9f4      	bls.n	80065de <_printf_i+0x11a>
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d10b      	bne.n	8006610 <_printf_i+0x14c>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	07de      	lsls	r6, r3, #31
 80065fc:	d508      	bpl.n	8006610 <_printf_i+0x14c>
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	6861      	ldr	r1, [r4, #4]
 8006602:	4299      	cmp	r1, r3
 8006604:	bfde      	ittt	le
 8006606:	2330      	movle	r3, #48	; 0x30
 8006608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800660c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006610:	1b52      	subs	r2, r2, r5
 8006612:	6122      	str	r2, [r4, #16]
 8006614:	f8cd a000 	str.w	sl, [sp]
 8006618:	464b      	mov	r3, r9
 800661a:	aa03      	add	r2, sp, #12
 800661c:	4621      	mov	r1, r4
 800661e:	4640      	mov	r0, r8
 8006620:	f7ff fee2 	bl	80063e8 <_printf_common>
 8006624:	3001      	adds	r0, #1
 8006626:	d14c      	bne.n	80066c2 <_printf_i+0x1fe>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	b004      	add	sp, #16
 800662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006632:	4835      	ldr	r0, [pc, #212]	; (8006708 <_printf_i+0x244>)
 8006634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006638:	6829      	ldr	r1, [r5, #0]
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006640:	6029      	str	r1, [r5, #0]
 8006642:	061d      	lsls	r5, r3, #24
 8006644:	d514      	bpl.n	8006670 <_printf_i+0x1ac>
 8006646:	07df      	lsls	r7, r3, #31
 8006648:	bf44      	itt	mi
 800664a:	f043 0320 	orrmi.w	r3, r3, #32
 800664e:	6023      	strmi	r3, [r4, #0]
 8006650:	b91e      	cbnz	r6, 800665a <_printf_i+0x196>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f023 0320 	bic.w	r3, r3, #32
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	2310      	movs	r3, #16
 800665c:	e7b0      	b.n	80065c0 <_printf_i+0xfc>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	f043 0320 	orr.w	r3, r3, #32
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	2378      	movs	r3, #120	; 0x78
 8006668:	4828      	ldr	r0, [pc, #160]	; (800670c <_printf_i+0x248>)
 800666a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800666e:	e7e3      	b.n	8006638 <_printf_i+0x174>
 8006670:	0659      	lsls	r1, r3, #25
 8006672:	bf48      	it	mi
 8006674:	b2b6      	uxthmi	r6, r6
 8006676:	e7e6      	b.n	8006646 <_printf_i+0x182>
 8006678:	4615      	mov	r5, r2
 800667a:	e7bb      	b.n	80065f4 <_printf_i+0x130>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	6826      	ldr	r6, [r4, #0]
 8006680:	6961      	ldr	r1, [r4, #20]
 8006682:	1d18      	adds	r0, r3, #4
 8006684:	6028      	str	r0, [r5, #0]
 8006686:	0635      	lsls	r5, r6, #24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	d501      	bpl.n	8006690 <_printf_i+0x1cc>
 800668c:	6019      	str	r1, [r3, #0]
 800668e:	e002      	b.n	8006696 <_printf_i+0x1d2>
 8006690:	0670      	lsls	r0, r6, #25
 8006692:	d5fb      	bpl.n	800668c <_printf_i+0x1c8>
 8006694:	8019      	strh	r1, [r3, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	4615      	mov	r5, r2
 800669c:	e7ba      	b.n	8006614 <_printf_i+0x150>
 800669e:	682b      	ldr	r3, [r5, #0]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	2100      	movs	r1, #0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7f9 fdc0 	bl	8000230 <memchr>
 80066b0:	b108      	cbz	r0, 80066b6 <_printf_i+0x1f2>
 80066b2:	1b40      	subs	r0, r0, r5
 80066b4:	6060      	str	r0, [r4, #4]
 80066b6:	6863      	ldr	r3, [r4, #4]
 80066b8:	6123      	str	r3, [r4, #16]
 80066ba:	2300      	movs	r3, #0
 80066bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c0:	e7a8      	b.n	8006614 <_printf_i+0x150>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	462a      	mov	r2, r5
 80066c6:	4649      	mov	r1, r9
 80066c8:	4640      	mov	r0, r8
 80066ca:	47d0      	blx	sl
 80066cc:	3001      	adds	r0, #1
 80066ce:	d0ab      	beq.n	8006628 <_printf_i+0x164>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	079b      	lsls	r3, r3, #30
 80066d4:	d413      	bmi.n	80066fe <_printf_i+0x23a>
 80066d6:	68e0      	ldr	r0, [r4, #12]
 80066d8:	9b03      	ldr	r3, [sp, #12]
 80066da:	4298      	cmp	r0, r3
 80066dc:	bfb8      	it	lt
 80066de:	4618      	movlt	r0, r3
 80066e0:	e7a4      	b.n	800662c <_printf_i+0x168>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4632      	mov	r2, r6
 80066e6:	4649      	mov	r1, r9
 80066e8:	4640      	mov	r0, r8
 80066ea:	47d0      	blx	sl
 80066ec:	3001      	adds	r0, #1
 80066ee:	d09b      	beq.n	8006628 <_printf_i+0x164>
 80066f0:	3501      	adds	r5, #1
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	9903      	ldr	r1, [sp, #12]
 80066f6:	1a5b      	subs	r3, r3, r1
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dcf2      	bgt.n	80066e2 <_printf_i+0x21e>
 80066fc:	e7eb      	b.n	80066d6 <_printf_i+0x212>
 80066fe:	2500      	movs	r5, #0
 8006700:	f104 0619 	add.w	r6, r4, #25
 8006704:	e7f5      	b.n	80066f2 <_printf_i+0x22e>
 8006706:	bf00      	nop
 8006708:	0800a95e 	.word	0x0800a95e
 800670c:	0800a96f 	.word	0x0800a96f

08006710 <_scanf_float>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	b087      	sub	sp, #28
 8006716:	4617      	mov	r7, r2
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	688b      	ldr	r3, [r1, #8]
 800671c:	1e5a      	subs	r2, r3, #1
 800671e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006722:	bf83      	ittte	hi
 8006724:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006728:	195b      	addhi	r3, r3, r5
 800672a:	9302      	strhi	r3, [sp, #8]
 800672c:	2300      	movls	r3, #0
 800672e:	bf86      	itte	hi
 8006730:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006734:	608b      	strhi	r3, [r1, #8]
 8006736:	9302      	strls	r3, [sp, #8]
 8006738:	680b      	ldr	r3, [r1, #0]
 800673a:	468b      	mov	fp, r1
 800673c:	2500      	movs	r5, #0
 800673e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006742:	f84b 3b1c 	str.w	r3, [fp], #28
 8006746:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800674a:	4680      	mov	r8, r0
 800674c:	460c      	mov	r4, r1
 800674e:	465e      	mov	r6, fp
 8006750:	46aa      	mov	sl, r5
 8006752:	46a9      	mov	r9, r5
 8006754:	9501      	str	r5, [sp, #4]
 8006756:	68a2      	ldr	r2, [r4, #8]
 8006758:	b152      	cbz	r2, 8006770 <_scanf_float+0x60>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b4e      	cmp	r3, #78	; 0x4e
 8006760:	d864      	bhi.n	800682c <_scanf_float+0x11c>
 8006762:	2b40      	cmp	r3, #64	; 0x40
 8006764:	d83c      	bhi.n	80067e0 <_scanf_float+0xd0>
 8006766:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800676a:	b2c8      	uxtb	r0, r1
 800676c:	280e      	cmp	r0, #14
 800676e:	d93a      	bls.n	80067e6 <_scanf_float+0xd6>
 8006770:	f1b9 0f00 	cmp.w	r9, #0
 8006774:	d003      	beq.n	800677e <_scanf_float+0x6e>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006782:	f1ba 0f01 	cmp.w	sl, #1
 8006786:	f200 8113 	bhi.w	80069b0 <_scanf_float+0x2a0>
 800678a:	455e      	cmp	r6, fp
 800678c:	f200 8105 	bhi.w	800699a <_scanf_float+0x28a>
 8006790:	2501      	movs	r5, #1
 8006792:	4628      	mov	r0, r5
 8006794:	b007      	add	sp, #28
 8006796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800679e:	2a0d      	cmp	r2, #13
 80067a0:	d8e6      	bhi.n	8006770 <_scanf_float+0x60>
 80067a2:	a101      	add	r1, pc, #4	; (adr r1, 80067a8 <_scanf_float+0x98>)
 80067a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067a8:	080068e7 	.word	0x080068e7
 80067ac:	08006771 	.word	0x08006771
 80067b0:	08006771 	.word	0x08006771
 80067b4:	08006771 	.word	0x08006771
 80067b8:	08006947 	.word	0x08006947
 80067bc:	0800691f 	.word	0x0800691f
 80067c0:	08006771 	.word	0x08006771
 80067c4:	08006771 	.word	0x08006771
 80067c8:	080068f5 	.word	0x080068f5
 80067cc:	08006771 	.word	0x08006771
 80067d0:	08006771 	.word	0x08006771
 80067d4:	08006771 	.word	0x08006771
 80067d8:	08006771 	.word	0x08006771
 80067dc:	080068ad 	.word	0x080068ad
 80067e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067e4:	e7db      	b.n	800679e <_scanf_float+0x8e>
 80067e6:	290e      	cmp	r1, #14
 80067e8:	d8c2      	bhi.n	8006770 <_scanf_float+0x60>
 80067ea:	a001      	add	r0, pc, #4	; (adr r0, 80067f0 <_scanf_float+0xe0>)
 80067ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067f0:	0800689f 	.word	0x0800689f
 80067f4:	08006771 	.word	0x08006771
 80067f8:	0800689f 	.word	0x0800689f
 80067fc:	08006933 	.word	0x08006933
 8006800:	08006771 	.word	0x08006771
 8006804:	0800684d 	.word	0x0800684d
 8006808:	08006889 	.word	0x08006889
 800680c:	08006889 	.word	0x08006889
 8006810:	08006889 	.word	0x08006889
 8006814:	08006889 	.word	0x08006889
 8006818:	08006889 	.word	0x08006889
 800681c:	08006889 	.word	0x08006889
 8006820:	08006889 	.word	0x08006889
 8006824:	08006889 	.word	0x08006889
 8006828:	08006889 	.word	0x08006889
 800682c:	2b6e      	cmp	r3, #110	; 0x6e
 800682e:	d809      	bhi.n	8006844 <_scanf_float+0x134>
 8006830:	2b60      	cmp	r3, #96	; 0x60
 8006832:	d8b2      	bhi.n	800679a <_scanf_float+0x8a>
 8006834:	2b54      	cmp	r3, #84	; 0x54
 8006836:	d077      	beq.n	8006928 <_scanf_float+0x218>
 8006838:	2b59      	cmp	r3, #89	; 0x59
 800683a:	d199      	bne.n	8006770 <_scanf_float+0x60>
 800683c:	2d07      	cmp	r5, #7
 800683e:	d197      	bne.n	8006770 <_scanf_float+0x60>
 8006840:	2508      	movs	r5, #8
 8006842:	e029      	b.n	8006898 <_scanf_float+0x188>
 8006844:	2b74      	cmp	r3, #116	; 0x74
 8006846:	d06f      	beq.n	8006928 <_scanf_float+0x218>
 8006848:	2b79      	cmp	r3, #121	; 0x79
 800684a:	e7f6      	b.n	800683a <_scanf_float+0x12a>
 800684c:	6821      	ldr	r1, [r4, #0]
 800684e:	05c8      	lsls	r0, r1, #23
 8006850:	d51a      	bpl.n	8006888 <_scanf_float+0x178>
 8006852:	9b02      	ldr	r3, [sp, #8]
 8006854:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006858:	6021      	str	r1, [r4, #0]
 800685a:	f109 0901 	add.w	r9, r9, #1
 800685e:	b11b      	cbz	r3, 8006868 <_scanf_float+0x158>
 8006860:	3b01      	subs	r3, #1
 8006862:	3201      	adds	r2, #1
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	60a2      	str	r2, [r4, #8]
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	3b01      	subs	r3, #1
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3b01      	subs	r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	f340 8084 	ble.w	8006988 <_scanf_float+0x278>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	e766      	b.n	8006756 <_scanf_float+0x46>
 8006888:	eb1a 0f05 	cmn.w	sl, r5
 800688c:	f47f af70 	bne.w	8006770 <_scanf_float+0x60>
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	f806 3b01 	strb.w	r3, [r6], #1
 800689c:	e7e4      	b.n	8006868 <_scanf_float+0x158>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	0610      	lsls	r0, r2, #24
 80068a2:	f57f af65 	bpl.w	8006770 <_scanf_float+0x60>
 80068a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068aa:	e7f4      	b.n	8006896 <_scanf_float+0x186>
 80068ac:	f1ba 0f00 	cmp.w	sl, #0
 80068b0:	d10e      	bne.n	80068d0 <_scanf_float+0x1c0>
 80068b2:	f1b9 0f00 	cmp.w	r9, #0
 80068b6:	d10e      	bne.n	80068d6 <_scanf_float+0x1c6>
 80068b8:	6822      	ldr	r2, [r4, #0]
 80068ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068c2:	d108      	bne.n	80068d6 <_scanf_float+0x1c6>
 80068c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068c8:	6022      	str	r2, [r4, #0]
 80068ca:	f04f 0a01 	mov.w	sl, #1
 80068ce:	e7e3      	b.n	8006898 <_scanf_float+0x188>
 80068d0:	f1ba 0f02 	cmp.w	sl, #2
 80068d4:	d055      	beq.n	8006982 <_scanf_float+0x272>
 80068d6:	2d01      	cmp	r5, #1
 80068d8:	d002      	beq.n	80068e0 <_scanf_float+0x1d0>
 80068da:	2d04      	cmp	r5, #4
 80068dc:	f47f af48 	bne.w	8006770 <_scanf_float+0x60>
 80068e0:	3501      	adds	r5, #1
 80068e2:	b2ed      	uxtb	r5, r5
 80068e4:	e7d8      	b.n	8006898 <_scanf_float+0x188>
 80068e6:	f1ba 0f01 	cmp.w	sl, #1
 80068ea:	f47f af41 	bne.w	8006770 <_scanf_float+0x60>
 80068ee:	f04f 0a02 	mov.w	sl, #2
 80068f2:	e7d1      	b.n	8006898 <_scanf_float+0x188>
 80068f4:	b97d      	cbnz	r5, 8006916 <_scanf_float+0x206>
 80068f6:	f1b9 0f00 	cmp.w	r9, #0
 80068fa:	f47f af3c 	bne.w	8006776 <_scanf_float+0x66>
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006904:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006908:	f47f af39 	bne.w	800677e <_scanf_float+0x6e>
 800690c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	2501      	movs	r5, #1
 8006914:	e7c0      	b.n	8006898 <_scanf_float+0x188>
 8006916:	2d03      	cmp	r5, #3
 8006918:	d0e2      	beq.n	80068e0 <_scanf_float+0x1d0>
 800691a:	2d05      	cmp	r5, #5
 800691c:	e7de      	b.n	80068dc <_scanf_float+0x1cc>
 800691e:	2d02      	cmp	r5, #2
 8006920:	f47f af26 	bne.w	8006770 <_scanf_float+0x60>
 8006924:	2503      	movs	r5, #3
 8006926:	e7b7      	b.n	8006898 <_scanf_float+0x188>
 8006928:	2d06      	cmp	r5, #6
 800692a:	f47f af21 	bne.w	8006770 <_scanf_float+0x60>
 800692e:	2507      	movs	r5, #7
 8006930:	e7b2      	b.n	8006898 <_scanf_float+0x188>
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	0591      	lsls	r1, r2, #22
 8006936:	f57f af1b 	bpl.w	8006770 <_scanf_float+0x60>
 800693a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800693e:	6022      	str	r2, [r4, #0]
 8006940:	f8cd 9004 	str.w	r9, [sp, #4]
 8006944:	e7a8      	b.n	8006898 <_scanf_float+0x188>
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800694c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006950:	d006      	beq.n	8006960 <_scanf_float+0x250>
 8006952:	0550      	lsls	r0, r2, #21
 8006954:	f57f af0c 	bpl.w	8006770 <_scanf_float+0x60>
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	f43f af0f 	beq.w	800677e <_scanf_float+0x6e>
 8006960:	0591      	lsls	r1, r2, #22
 8006962:	bf58      	it	pl
 8006964:	9901      	ldrpl	r1, [sp, #4]
 8006966:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800696a:	bf58      	it	pl
 800696c:	eba9 0101 	subpl.w	r1, r9, r1
 8006970:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006974:	bf58      	it	pl
 8006976:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800697a:	6022      	str	r2, [r4, #0]
 800697c:	f04f 0900 	mov.w	r9, #0
 8006980:	e78a      	b.n	8006898 <_scanf_float+0x188>
 8006982:	f04f 0a03 	mov.w	sl, #3
 8006986:	e787      	b.n	8006898 <_scanf_float+0x188>
 8006988:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800698c:	4639      	mov	r1, r7
 800698e:	4640      	mov	r0, r8
 8006990:	4798      	blx	r3
 8006992:	2800      	cmp	r0, #0
 8006994:	f43f aedf 	beq.w	8006756 <_scanf_float+0x46>
 8006998:	e6ea      	b.n	8006770 <_scanf_float+0x60>
 800699a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800699e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069a2:	463a      	mov	r2, r7
 80069a4:	4640      	mov	r0, r8
 80069a6:	4798      	blx	r3
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	e6ec      	b.n	800678a <_scanf_float+0x7a>
 80069b0:	1e6b      	subs	r3, r5, #1
 80069b2:	2b06      	cmp	r3, #6
 80069b4:	d825      	bhi.n	8006a02 <_scanf_float+0x2f2>
 80069b6:	2d02      	cmp	r5, #2
 80069b8:	d836      	bhi.n	8006a28 <_scanf_float+0x318>
 80069ba:	455e      	cmp	r6, fp
 80069bc:	f67f aee8 	bls.w	8006790 <_scanf_float+0x80>
 80069c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069c8:	463a      	mov	r2, r7
 80069ca:	4640      	mov	r0, r8
 80069cc:	4798      	blx	r3
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	e7f1      	b.n	80069ba <_scanf_float+0x2aa>
 80069d6:	9802      	ldr	r0, [sp, #8]
 80069d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069e0:	9002      	str	r0, [sp, #8]
 80069e2:	463a      	mov	r2, r7
 80069e4:	4640      	mov	r0, r8
 80069e6:	4798      	blx	r3
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6123      	str	r3, [r4, #16]
 80069ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069f2:	fa5f fa8a 	uxtb.w	sl, sl
 80069f6:	f1ba 0f02 	cmp.w	sl, #2
 80069fa:	d1ec      	bne.n	80069d6 <_scanf_float+0x2c6>
 80069fc:	3d03      	subs	r5, #3
 80069fe:	b2ed      	uxtb	r5, r5
 8006a00:	1b76      	subs	r6, r6, r5
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	05da      	lsls	r2, r3, #23
 8006a06:	d52f      	bpl.n	8006a68 <_scanf_float+0x358>
 8006a08:	055b      	lsls	r3, r3, #21
 8006a0a:	d510      	bpl.n	8006a2e <_scanf_float+0x31e>
 8006a0c:	455e      	cmp	r6, fp
 8006a0e:	f67f aebf 	bls.w	8006790 <_scanf_float+0x80>
 8006a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4798      	blx	r3
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	6123      	str	r3, [r4, #16]
 8006a26:	e7f1      	b.n	8006a0c <_scanf_float+0x2fc>
 8006a28:	46aa      	mov	sl, r5
 8006a2a:	9602      	str	r6, [sp, #8]
 8006a2c:	e7df      	b.n	80069ee <_scanf_float+0x2de>
 8006a2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	2965      	cmp	r1, #101	; 0x65
 8006a36:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a3e:	6123      	str	r3, [r4, #16]
 8006a40:	d00c      	beq.n	8006a5c <_scanf_float+0x34c>
 8006a42:	2945      	cmp	r1, #69	; 0x45
 8006a44:	d00a      	beq.n	8006a5c <_scanf_float+0x34c>
 8006a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	4798      	blx	r3
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	1eb5      	subs	r5, r6, #2
 8006a5a:	6123      	str	r3, [r4, #16]
 8006a5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a60:	463a      	mov	r2, r7
 8006a62:	4640      	mov	r0, r8
 8006a64:	4798      	blx	r3
 8006a66:	462e      	mov	r6, r5
 8006a68:	6825      	ldr	r5, [r4, #0]
 8006a6a:	f015 0510 	ands.w	r5, r5, #16
 8006a6e:	d159      	bne.n	8006b24 <_scanf_float+0x414>
 8006a70:	7035      	strb	r5, [r6, #0]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d11b      	bne.n	8006ab6 <_scanf_float+0x3a6>
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	454b      	cmp	r3, r9
 8006a82:	eba3 0209 	sub.w	r2, r3, r9
 8006a86:	d123      	bne.n	8006ad0 <_scanf_float+0x3c0>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4659      	mov	r1, fp
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	f000 ff7d 	bl	800798c <_strtod_r>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	f012 0f02 	tst.w	r2, #2
 8006a9a:	ec57 6b10 	vmov	r6, r7, d0
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	d021      	beq.n	8006ae6 <_scanf_float+0x3d6>
 8006aa2:	9903      	ldr	r1, [sp, #12]
 8006aa4:	1d1a      	adds	r2, r3, #4
 8006aa6:	600a      	str	r2, [r1, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	e9c3 6700 	strd	r6, r7, [r3]
 8006aae:	68e3      	ldr	r3, [r4, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60e3      	str	r3, [r4, #12]
 8006ab4:	e66d      	b.n	8006792 <_scanf_float+0x82>
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0e5      	beq.n	8006a88 <_scanf_float+0x378>
 8006abc:	9905      	ldr	r1, [sp, #20]
 8006abe:	230a      	movs	r3, #10
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	3101      	adds	r1, #1
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	f000 ffe9 	bl	8007a9c <_strtol_r>
 8006aca:	9b04      	ldr	r3, [sp, #16]
 8006acc:	9e05      	ldr	r6, [sp, #20]
 8006ace:	1ac2      	subs	r2, r0, r3
 8006ad0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ad4:	429e      	cmp	r6, r3
 8006ad6:	bf28      	it	cs
 8006ad8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006adc:	4912      	ldr	r1, [pc, #72]	; (8006b28 <_scanf_float+0x418>)
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 f912 	bl	8006d08 <siprintf>
 8006ae4:	e7d0      	b.n	8006a88 <_scanf_float+0x378>
 8006ae6:	9903      	ldr	r1, [sp, #12]
 8006ae8:	f012 0f04 	tst.w	r2, #4
 8006aec:	f103 0204 	add.w	r2, r3, #4
 8006af0:	600a      	str	r2, [r1, #0]
 8006af2:	d1d9      	bne.n	8006aa8 <_scanf_float+0x398>
 8006af4:	f8d3 8000 	ldr.w	r8, [r3]
 8006af8:	ee10 2a10 	vmov	r2, s0
 8006afc:	ee10 0a10 	vmov	r0, s0
 8006b00:	463b      	mov	r3, r7
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7fa f83a 	bl	8000b7c <__aeabi_dcmpun>
 8006b08:	b128      	cbz	r0, 8006b16 <_scanf_float+0x406>
 8006b0a:	4808      	ldr	r0, [pc, #32]	; (8006b2c <_scanf_float+0x41c>)
 8006b0c:	f000 f8f6 	bl	8006cfc <nanf>
 8006b10:	ed88 0a00 	vstr	s0, [r8]
 8006b14:	e7cb      	b.n	8006aae <_scanf_float+0x39e>
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7fa f88d 	bl	8000c38 <__aeabi_d2f>
 8006b1e:	f8c8 0000 	str.w	r0, [r8]
 8006b22:	e7c4      	b.n	8006aae <_scanf_float+0x39e>
 8006b24:	2500      	movs	r5, #0
 8006b26:	e634      	b.n	8006792 <_scanf_float+0x82>
 8006b28:	0800a980 	.word	0x0800a980
 8006b2c:	0800adf0 	.word	0x0800adf0

08006b30 <iprintf>:
 8006b30:	b40f      	push	{r0, r1, r2, r3}
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <iprintf+0x2c>)
 8006b34:	b513      	push	{r0, r1, r4, lr}
 8006b36:	681c      	ldr	r4, [r3, #0]
 8006b38:	b124      	cbz	r4, 8006b44 <iprintf+0x14>
 8006b3a:	69a3      	ldr	r3, [r4, #24]
 8006b3c:	b913      	cbnz	r3, 8006b44 <iprintf+0x14>
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f001 ff42 	bl	80089c8 <__sinit>
 8006b44:	ab05      	add	r3, sp, #20
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	68a1      	ldr	r1, [r4, #8]
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f003 fb19 	bl	800a184 <_vfiprintf_r>
 8006b52:	b002      	add	sp, #8
 8006b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b58:	b004      	add	sp, #16
 8006b5a:	4770      	bx	lr
 8006b5c:	20000010 	.word	0x20000010

08006b60 <setbuf>:
 8006b60:	2900      	cmp	r1, #0
 8006b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b66:	bf0c      	ite	eq
 8006b68:	2202      	moveq	r2, #2
 8006b6a:	2200      	movne	r2, #0
 8006b6c:	f000 b800 	b.w	8006b70 <setvbuf>

08006b70 <setvbuf>:
 8006b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b74:	461d      	mov	r5, r3
 8006b76:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <setvbuf+0x17c>)
 8006b78:	681f      	ldr	r7, [r3, #0]
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460e      	mov	r6, r1
 8006b7e:	4690      	mov	r8, r2
 8006b80:	b127      	cbz	r7, 8006b8c <setvbuf+0x1c>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	b913      	cbnz	r3, 8006b8c <setvbuf+0x1c>
 8006b86:	4638      	mov	r0, r7
 8006b88:	f001 ff1e 	bl	80089c8 <__sinit>
 8006b8c:	4b58      	ldr	r3, [pc, #352]	; (8006cf0 <setvbuf+0x180>)
 8006b8e:	429c      	cmp	r4, r3
 8006b90:	d167      	bne.n	8006c62 <setvbuf+0xf2>
 8006b92:	687c      	ldr	r4, [r7, #4]
 8006b94:	f1b8 0f02 	cmp.w	r8, #2
 8006b98:	d006      	beq.n	8006ba8 <setvbuf+0x38>
 8006b9a:	f1b8 0f01 	cmp.w	r8, #1
 8006b9e:	f200 809f 	bhi.w	8006ce0 <setvbuf+0x170>
 8006ba2:	2d00      	cmp	r5, #0
 8006ba4:	f2c0 809c 	blt.w	8006ce0 <setvbuf+0x170>
 8006ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006baa:	07db      	lsls	r3, r3, #31
 8006bac:	d405      	bmi.n	8006bba <setvbuf+0x4a>
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	0598      	lsls	r0, r3, #22
 8006bb2:	d402      	bmi.n	8006bba <setvbuf+0x4a>
 8006bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb6:	f002 fb18 	bl	80091ea <__retarget_lock_acquire_recursive>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	f001 fe6f 	bl	80088a0 <_fflush_r>
 8006bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bc4:	b141      	cbz	r1, 8006bd8 <setvbuf+0x68>
 8006bc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	d002      	beq.n	8006bd4 <setvbuf+0x64>
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f003 f872 	bl	8009cb8 <_free_r>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6363      	str	r3, [r4, #52]	; 0x34
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61a3      	str	r3, [r4, #24]
 8006bdc:	6063      	str	r3, [r4, #4]
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	0619      	lsls	r1, r3, #24
 8006be2:	d503      	bpl.n	8006bec <setvbuf+0x7c>
 8006be4:	6921      	ldr	r1, [r4, #16]
 8006be6:	4638      	mov	r0, r7
 8006be8:	f003 f866 	bl	8009cb8 <_free_r>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	f1b8 0f02 	cmp.w	r8, #2
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	d06c      	beq.n	8006cd8 <setvbuf+0x168>
 8006bfe:	ab01      	add	r3, sp, #4
 8006c00:	466a      	mov	r2, sp
 8006c02:	4621      	mov	r1, r4
 8006c04:	4638      	mov	r0, r7
 8006c06:	f002 faf2 	bl	80091ee <__swhatbuf_r>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	4318      	orrs	r0, r3
 8006c0e:	81a0      	strh	r0, [r4, #12]
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	d130      	bne.n	8006c76 <setvbuf+0x106>
 8006c14:	9d00      	ldr	r5, [sp, #0]
 8006c16:	4628      	mov	r0, r5
 8006c18:	f002 fb4e 	bl	80092b8 <malloc>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d155      	bne.n	8006cce <setvbuf+0x15e>
 8006c22:	f8dd 9000 	ldr.w	r9, [sp]
 8006c26:	45a9      	cmp	r9, r5
 8006c28:	d14a      	bne.n	8006cc0 <setvbuf+0x150>
 8006c2a:	f04f 35ff 	mov.w	r5, #4294967295
 8006c2e:	2200      	movs	r2, #0
 8006c30:	60a2      	str	r2, [r4, #8]
 8006c32:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006c36:	6022      	str	r2, [r4, #0]
 8006c38:	6122      	str	r2, [r4, #16]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c40:	6162      	str	r2, [r4, #20]
 8006c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	07d2      	lsls	r2, r2, #31
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	d405      	bmi.n	8006c5a <setvbuf+0xea>
 8006c4e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006c52:	d102      	bne.n	8006c5a <setvbuf+0xea>
 8006c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c56:	f002 fac9 	bl	80091ec <__retarget_lock_release_recursive>
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	b003      	add	sp, #12
 8006c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <setvbuf+0x184>)
 8006c64:	429c      	cmp	r4, r3
 8006c66:	d101      	bne.n	8006c6c <setvbuf+0xfc>
 8006c68:	68bc      	ldr	r4, [r7, #8]
 8006c6a:	e793      	b.n	8006b94 <setvbuf+0x24>
 8006c6c:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <setvbuf+0x188>)
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	bf08      	it	eq
 8006c72:	68fc      	ldreq	r4, [r7, #12]
 8006c74:	e78e      	b.n	8006b94 <setvbuf+0x24>
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	d0cd      	beq.n	8006c16 <setvbuf+0xa6>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	b913      	cbnz	r3, 8006c84 <setvbuf+0x114>
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f001 fea2 	bl	80089c8 <__sinit>
 8006c84:	f1b8 0f01 	cmp.w	r8, #1
 8006c88:	bf08      	it	eq
 8006c8a:	89a3      	ldrheq	r3, [r4, #12]
 8006c8c:	6026      	str	r6, [r4, #0]
 8006c8e:	bf04      	itt	eq
 8006c90:	f043 0301 	orreq.w	r3, r3, #1
 8006c94:	81a3      	strheq	r3, [r4, #12]
 8006c96:	89a2      	ldrh	r2, [r4, #12]
 8006c98:	f012 0308 	ands.w	r3, r2, #8
 8006c9c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006ca0:	d01c      	beq.n	8006cdc <setvbuf+0x16c>
 8006ca2:	07d3      	lsls	r3, r2, #31
 8006ca4:	bf41      	itttt	mi
 8006ca6:	2300      	movmi	r3, #0
 8006ca8:	426d      	negmi	r5, r5
 8006caa:	60a3      	strmi	r3, [r4, #8]
 8006cac:	61a5      	strmi	r5, [r4, #24]
 8006cae:	bf58      	it	pl
 8006cb0:	60a5      	strpl	r5, [r4, #8]
 8006cb2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006cb4:	f015 0501 	ands.w	r5, r5, #1
 8006cb8:	d115      	bne.n	8006ce6 <setvbuf+0x176>
 8006cba:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006cbe:	e7c8      	b.n	8006c52 <setvbuf+0xe2>
 8006cc0:	4648      	mov	r0, r9
 8006cc2:	f002 faf9 	bl	80092b8 <malloc>
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d0ae      	beq.n	8006c2a <setvbuf+0xba>
 8006ccc:	464d      	mov	r5, r9
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	e7d0      	b.n	8006c7a <setvbuf+0x10a>
 8006cd8:	2500      	movs	r5, #0
 8006cda:	e7a8      	b.n	8006c2e <setvbuf+0xbe>
 8006cdc:	60a3      	str	r3, [r4, #8]
 8006cde:	e7e8      	b.n	8006cb2 <setvbuf+0x142>
 8006ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8006ce4:	e7b9      	b.n	8006c5a <setvbuf+0xea>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	e7b7      	b.n	8006c5a <setvbuf+0xea>
 8006cea:	bf00      	nop
 8006cec:	20000010 	.word	0x20000010
 8006cf0:	0800ab8c 	.word	0x0800ab8c
 8006cf4:	0800abac 	.word	0x0800abac
 8006cf8:	0800ab6c 	.word	0x0800ab6c

08006cfc <nanf>:
 8006cfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d04 <nanf+0x8>
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	7fc00000 	.word	0x7fc00000

08006d08 <siprintf>:
 8006d08:	b40e      	push	{r1, r2, r3}
 8006d0a:	b500      	push	{lr}
 8006d0c:	b09c      	sub	sp, #112	; 0x70
 8006d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d10:	9002      	str	r0, [sp, #8]
 8006d12:	9006      	str	r0, [sp, #24]
 8006d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d18:	4809      	ldr	r0, [pc, #36]	; (8006d40 <siprintf+0x38>)
 8006d1a:	9107      	str	r1, [sp, #28]
 8006d1c:	9104      	str	r1, [sp, #16]
 8006d1e:	4909      	ldr	r1, [pc, #36]	; (8006d44 <siprintf+0x3c>)
 8006d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d24:	9105      	str	r1, [sp, #20]
 8006d26:	6800      	ldr	r0, [r0, #0]
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	a902      	add	r1, sp, #8
 8006d2c:	f003 f900 	bl	8009f30 <_svfiprintf_r>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	b01c      	add	sp, #112	; 0x70
 8006d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d3c:	b003      	add	sp, #12
 8006d3e:	4770      	bx	lr
 8006d40:	20000010 	.word	0x20000010
 8006d44:	ffff0208 	.word	0xffff0208

08006d48 <sulp>:
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	ec45 4b10 	vmov	d0, r4, r5
 8006d52:	4616      	mov	r6, r2
 8006d54:	f002 fe4a 	bl	80099ec <__ulp>
 8006d58:	ec51 0b10 	vmov	r0, r1, d0
 8006d5c:	b17e      	cbz	r6, 8006d7e <sulp+0x36>
 8006d5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	dd09      	ble.n	8006d7e <sulp+0x36>
 8006d6a:	051b      	lsls	r3, r3, #20
 8006d6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d70:	2400      	movs	r4, #0
 8006d72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d76:	4622      	mov	r2, r4
 8006d78:	462b      	mov	r3, r5
 8006d7a:	f7f9 fc65 	bl	8000648 <__aeabi_dmul>
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}

08006d80 <_strtod_l>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	ed2d 8b02 	vpush	{d8}
 8006d88:	b09d      	sub	sp, #116	; 0x74
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9318      	str	r3, [sp, #96]	; 0x60
 8006d90:	4ba2      	ldr	r3, [pc, #648]	; (800701c <_strtod_l+0x29c>)
 8006d92:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	9305      	str	r3, [sp, #20]
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	4688      	mov	r8, r1
 8006d9e:	f7f9 fa3f 	bl	8000220 <strlen>
 8006da2:	f04f 0a00 	mov.w	sl, #0
 8006da6:	4605      	mov	r5, r0
 8006da8:	f04f 0b00 	mov.w	fp, #0
 8006dac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	2a2b      	cmp	r2, #43	; 0x2b
 8006db6:	d04e      	beq.n	8006e56 <_strtod_l+0xd6>
 8006db8:	d83b      	bhi.n	8006e32 <_strtod_l+0xb2>
 8006dba:	2a0d      	cmp	r2, #13
 8006dbc:	d834      	bhi.n	8006e28 <_strtod_l+0xa8>
 8006dbe:	2a08      	cmp	r2, #8
 8006dc0:	d834      	bhi.n	8006e2c <_strtod_l+0xac>
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	d03e      	beq.n	8006e44 <_strtod_l+0xc4>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8006dca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006dcc:	7833      	ldrb	r3, [r6, #0]
 8006dce:	2b30      	cmp	r3, #48	; 0x30
 8006dd0:	f040 80b0 	bne.w	8006f34 <_strtod_l+0x1b4>
 8006dd4:	7873      	ldrb	r3, [r6, #1]
 8006dd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dda:	2b58      	cmp	r3, #88	; 0x58
 8006ddc:	d168      	bne.n	8006eb0 <_strtod_l+0x130>
 8006dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	ab18      	add	r3, sp, #96	; 0x60
 8006de4:	9702      	str	r7, [sp, #8]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4a8d      	ldr	r2, [pc, #564]	; (8007020 <_strtod_l+0x2a0>)
 8006dea:	ab19      	add	r3, sp, #100	; 0x64
 8006dec:	a917      	add	r1, sp, #92	; 0x5c
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 feee 	bl	8008bd0 <__gethex>
 8006df4:	f010 0707 	ands.w	r7, r0, #7
 8006df8:	4605      	mov	r5, r0
 8006dfa:	d005      	beq.n	8006e08 <_strtod_l+0x88>
 8006dfc:	2f06      	cmp	r7, #6
 8006dfe:	d12c      	bne.n	8006e5a <_strtod_l+0xda>
 8006e00:	3601      	adds	r6, #1
 8006e02:	2300      	movs	r3, #0
 8006e04:	9617      	str	r6, [sp, #92]	; 0x5c
 8006e06:	930a      	str	r3, [sp, #40]	; 0x28
 8006e08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 8590 	bne.w	8007930 <_strtod_l+0xbb0>
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	b1eb      	cbz	r3, 8006e50 <_strtod_l+0xd0>
 8006e14:	4652      	mov	r2, sl
 8006e16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e1a:	ec43 2b10 	vmov	d0, r2, r3
 8006e1e:	b01d      	add	sp, #116	; 0x74
 8006e20:	ecbd 8b02 	vpop	{d8}
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	2a20      	cmp	r2, #32
 8006e2a:	d1cc      	bne.n	8006dc6 <_strtod_l+0x46>
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e30:	e7be      	b.n	8006db0 <_strtod_l+0x30>
 8006e32:	2a2d      	cmp	r2, #45	; 0x2d
 8006e34:	d1c7      	bne.n	8006dc6 <_strtod_l+0x46>
 8006e36:	2201      	movs	r2, #1
 8006e38:	920a      	str	r2, [sp, #40]	; 0x28
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1c2      	bne.n	8006dca <_strtod_l+0x4a>
 8006e44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 856e 	bne.w	800792c <_strtod_l+0xbac>
 8006e50:	4652      	mov	r2, sl
 8006e52:	465b      	mov	r3, fp
 8006e54:	e7e1      	b.n	8006e1a <_strtod_l+0x9a>
 8006e56:	2200      	movs	r2, #0
 8006e58:	e7ee      	b.n	8006e38 <_strtod_l+0xb8>
 8006e5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e5c:	b13a      	cbz	r2, 8006e6e <_strtod_l+0xee>
 8006e5e:	2135      	movs	r1, #53	; 0x35
 8006e60:	a81a      	add	r0, sp, #104	; 0x68
 8006e62:	f002 fece 	bl	8009c02 <__copybits>
 8006e66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f002 fa8d 	bl	8009388 <_Bfree>
 8006e6e:	3f01      	subs	r7, #1
 8006e70:	2f04      	cmp	r7, #4
 8006e72:	d806      	bhi.n	8006e82 <_strtod_l+0x102>
 8006e74:	e8df f007 	tbb	[pc, r7]
 8006e78:	1714030a 	.word	0x1714030a
 8006e7c:	0a          	.byte	0x0a
 8006e7d:	00          	.byte	0x00
 8006e7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006e82:	0728      	lsls	r0, r5, #28
 8006e84:	d5c0      	bpl.n	8006e08 <_strtod_l+0x88>
 8006e86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006e8a:	e7bd      	b.n	8006e08 <_strtod_l+0x88>
 8006e8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e9e:	e7f0      	b.n	8006e82 <_strtod_l+0x102>
 8006ea0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007024 <_strtod_l+0x2a4>
 8006ea4:	e7ed      	b.n	8006e82 <_strtod_l+0x102>
 8006ea6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006eaa:	f04f 3aff 	mov.w	sl, #4294967295
 8006eae:	e7e8      	b.n	8006e82 <_strtod_l+0x102>
 8006eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b30      	cmp	r3, #48	; 0x30
 8006eba:	d0f9      	beq.n	8006eb0 <_strtod_l+0x130>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0a3      	beq.n	8006e08 <_strtod_l+0x88>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eca:	9308      	str	r3, [sp, #32]
 8006ecc:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ed0:	464f      	mov	r7, r9
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006ed6:	7806      	ldrb	r6, [r0, #0]
 8006ed8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006edc:	b2d9      	uxtb	r1, r3
 8006ede:	2909      	cmp	r1, #9
 8006ee0:	d92a      	bls.n	8006f38 <_strtod_l+0x1b8>
 8006ee2:	9905      	ldr	r1, [sp, #20]
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	f003 fada 	bl	800a49e <strncmp>
 8006eea:	b398      	cbz	r0, 8006f54 <_strtod_l+0x1d4>
 8006eec:	2000      	movs	r0, #0
 8006eee:	4632      	mov	r2, r6
 8006ef0:	463d      	mov	r5, r7
 8006ef2:	9005      	str	r0, [sp, #20]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2a65      	cmp	r2, #101	; 0x65
 8006ef8:	d001      	beq.n	8006efe <_strtod_l+0x17e>
 8006efa:	2a45      	cmp	r2, #69	; 0x45
 8006efc:	d118      	bne.n	8006f30 <_strtod_l+0x1b0>
 8006efe:	b91d      	cbnz	r5, 8006f08 <_strtod_l+0x188>
 8006f00:	9a04      	ldr	r2, [sp, #16]
 8006f02:	4302      	orrs	r2, r0
 8006f04:	d09e      	beq.n	8006e44 <_strtod_l+0xc4>
 8006f06:	2500      	movs	r5, #0
 8006f08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006f0c:	f108 0201 	add.w	r2, r8, #1
 8006f10:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f12:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006f16:	2a2b      	cmp	r2, #43	; 0x2b
 8006f18:	d075      	beq.n	8007006 <_strtod_l+0x286>
 8006f1a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f1c:	d07b      	beq.n	8007016 <_strtod_l+0x296>
 8006f1e:	f04f 0c00 	mov.w	ip, #0
 8006f22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f26:	2909      	cmp	r1, #9
 8006f28:	f240 8082 	bls.w	8007030 <_strtod_l+0x2b0>
 8006f2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f30:	2600      	movs	r6, #0
 8006f32:	e09d      	b.n	8007070 <_strtod_l+0x2f0>
 8006f34:	2300      	movs	r3, #0
 8006f36:	e7c4      	b.n	8006ec2 <_strtod_l+0x142>
 8006f38:	2f08      	cmp	r7, #8
 8006f3a:	bfd8      	it	le
 8006f3c:	9907      	ldrle	r1, [sp, #28]
 8006f3e:	f100 0001 	add.w	r0, r0, #1
 8006f42:	bfda      	itte	le
 8006f44:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f48:	9307      	strle	r3, [sp, #28]
 8006f4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006f4e:	3701      	adds	r7, #1
 8006f50:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f52:	e7bf      	b.n	8006ed4 <_strtod_l+0x154>
 8006f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f56:	195a      	adds	r2, r3, r5
 8006f58:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f5a:	5d5a      	ldrb	r2, [r3, r5]
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	d037      	beq.n	8006fd0 <_strtod_l+0x250>
 8006f60:	9005      	str	r0, [sp, #20]
 8006f62:	463d      	mov	r5, r7
 8006f64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f68:	2b09      	cmp	r3, #9
 8006f6a:	d912      	bls.n	8006f92 <_strtod_l+0x212>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e7c2      	b.n	8006ef6 <_strtod_l+0x176>
 8006f70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f76:	785a      	ldrb	r2, [r3, #1]
 8006f78:	3001      	adds	r0, #1
 8006f7a:	2a30      	cmp	r2, #48	; 0x30
 8006f7c:	d0f8      	beq.n	8006f70 <_strtod_l+0x1f0>
 8006f7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	f200 84d9 	bhi.w	800793a <_strtod_l+0xbba>
 8006f88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f8a:	9005      	str	r0, [sp, #20]
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	9308      	str	r3, [sp, #32]
 8006f90:	4605      	mov	r5, r0
 8006f92:	3a30      	subs	r2, #48	; 0x30
 8006f94:	f100 0301 	add.w	r3, r0, #1
 8006f98:	d014      	beq.n	8006fc4 <_strtod_l+0x244>
 8006f9a:	9905      	ldr	r1, [sp, #20]
 8006f9c:	4419      	add	r1, r3
 8006f9e:	9105      	str	r1, [sp, #20]
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	eb00 0e05 	add.w	lr, r0, r5
 8006fa6:	210a      	movs	r1, #10
 8006fa8:	4573      	cmp	r3, lr
 8006faa:	d113      	bne.n	8006fd4 <_strtod_l+0x254>
 8006fac:	182b      	adds	r3, r5, r0
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	f105 0501 	add.w	r5, r5, #1
 8006fb4:	4405      	add	r5, r0
 8006fb6:	dc1c      	bgt.n	8006ff2 <_strtod_l+0x272>
 8006fb8:	9907      	ldr	r1, [sp, #28]
 8006fba:	230a      	movs	r3, #10
 8006fbc:	fb03 2301 	mla	r3, r3, r1, r2
 8006fc0:	9307      	str	r3, [sp, #28]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc6:	1c51      	adds	r1, r2, #1
 8006fc8:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fca:	7852      	ldrb	r2, [r2, #1]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	e7c9      	b.n	8006f64 <_strtod_l+0x1e4>
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	e7d2      	b.n	8006f7a <_strtod_l+0x1fa>
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	dc04      	bgt.n	8006fe2 <_strtod_l+0x262>
 8006fd8:	9e07      	ldr	r6, [sp, #28]
 8006fda:	434e      	muls	r6, r1
 8006fdc:	9607      	str	r6, [sp, #28]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	e7e2      	b.n	8006fa8 <_strtod_l+0x228>
 8006fe2:	f103 0c01 	add.w	ip, r3, #1
 8006fe6:	f1bc 0f10 	cmp.w	ip, #16
 8006fea:	bfd8      	it	le
 8006fec:	fb01 f909 	mulle.w	r9, r1, r9
 8006ff0:	e7f5      	b.n	8006fde <_strtod_l+0x25e>
 8006ff2:	2d10      	cmp	r5, #16
 8006ff4:	bfdc      	itt	le
 8006ff6:	230a      	movle	r3, #10
 8006ff8:	fb03 2909 	mlale	r9, r3, r9, r2
 8006ffc:	e7e1      	b.n	8006fc2 <_strtod_l+0x242>
 8006ffe:	2300      	movs	r3, #0
 8007000:	9305      	str	r3, [sp, #20]
 8007002:	2301      	movs	r3, #1
 8007004:	e77c      	b.n	8006f00 <_strtod_l+0x180>
 8007006:	f04f 0c00 	mov.w	ip, #0
 800700a:	f108 0202 	add.w	r2, r8, #2
 800700e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007010:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007014:	e785      	b.n	8006f22 <_strtod_l+0x1a2>
 8007016:	f04f 0c01 	mov.w	ip, #1
 800701a:	e7f6      	b.n	800700a <_strtod_l+0x28a>
 800701c:	0800ac34 	.word	0x0800ac34
 8007020:	0800a988 	.word	0x0800a988
 8007024:	7ff00000 	.word	0x7ff00000
 8007028:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800702a:	1c51      	adds	r1, r2, #1
 800702c:	9117      	str	r1, [sp, #92]	; 0x5c
 800702e:	7852      	ldrb	r2, [r2, #1]
 8007030:	2a30      	cmp	r2, #48	; 0x30
 8007032:	d0f9      	beq.n	8007028 <_strtod_l+0x2a8>
 8007034:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007038:	2908      	cmp	r1, #8
 800703a:	f63f af79 	bhi.w	8006f30 <_strtod_l+0x1b0>
 800703e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007044:	9206      	str	r2, [sp, #24]
 8007046:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007048:	1c51      	adds	r1, r2, #1
 800704a:	9117      	str	r1, [sp, #92]	; 0x5c
 800704c:	7852      	ldrb	r2, [r2, #1]
 800704e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007052:	2e09      	cmp	r6, #9
 8007054:	d937      	bls.n	80070c6 <_strtod_l+0x346>
 8007056:	9e06      	ldr	r6, [sp, #24]
 8007058:	1b89      	subs	r1, r1, r6
 800705a:	2908      	cmp	r1, #8
 800705c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007060:	dc02      	bgt.n	8007068 <_strtod_l+0x2e8>
 8007062:	4576      	cmp	r6, lr
 8007064:	bfa8      	it	ge
 8007066:	4676      	movge	r6, lr
 8007068:	f1bc 0f00 	cmp.w	ip, #0
 800706c:	d000      	beq.n	8007070 <_strtod_l+0x2f0>
 800706e:	4276      	negs	r6, r6
 8007070:	2d00      	cmp	r5, #0
 8007072:	d14d      	bne.n	8007110 <_strtod_l+0x390>
 8007074:	9904      	ldr	r1, [sp, #16]
 8007076:	4301      	orrs	r1, r0
 8007078:	f47f aec6 	bne.w	8006e08 <_strtod_l+0x88>
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f aee1 	bne.w	8006e44 <_strtod_l+0xc4>
 8007082:	2a69      	cmp	r2, #105	; 0x69
 8007084:	d027      	beq.n	80070d6 <_strtod_l+0x356>
 8007086:	dc24      	bgt.n	80070d2 <_strtod_l+0x352>
 8007088:	2a49      	cmp	r2, #73	; 0x49
 800708a:	d024      	beq.n	80070d6 <_strtod_l+0x356>
 800708c:	2a4e      	cmp	r2, #78	; 0x4e
 800708e:	f47f aed9 	bne.w	8006e44 <_strtod_l+0xc4>
 8007092:	499f      	ldr	r1, [pc, #636]	; (8007310 <_strtod_l+0x590>)
 8007094:	a817      	add	r0, sp, #92	; 0x5c
 8007096:	f001 fff3 	bl	8009080 <__match>
 800709a:	2800      	cmp	r0, #0
 800709c:	f43f aed2 	beq.w	8006e44 <_strtod_l+0xc4>
 80070a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b28      	cmp	r3, #40	; 0x28
 80070a6:	d12d      	bne.n	8007104 <_strtod_l+0x384>
 80070a8:	499a      	ldr	r1, [pc, #616]	; (8007314 <_strtod_l+0x594>)
 80070aa:	aa1a      	add	r2, sp, #104	; 0x68
 80070ac:	a817      	add	r0, sp, #92	; 0x5c
 80070ae:	f001 fffb 	bl	80090a8 <__hexnan>
 80070b2:	2805      	cmp	r0, #5
 80070b4:	d126      	bne.n	8007104 <_strtod_l+0x384>
 80070b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80070bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80070c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80070c4:	e6a0      	b.n	8006e08 <_strtod_l+0x88>
 80070c6:	210a      	movs	r1, #10
 80070c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80070cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80070d0:	e7b9      	b.n	8007046 <_strtod_l+0x2c6>
 80070d2:	2a6e      	cmp	r2, #110	; 0x6e
 80070d4:	e7db      	b.n	800708e <_strtod_l+0x30e>
 80070d6:	4990      	ldr	r1, [pc, #576]	; (8007318 <_strtod_l+0x598>)
 80070d8:	a817      	add	r0, sp, #92	; 0x5c
 80070da:	f001 ffd1 	bl	8009080 <__match>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f43f aeb0 	beq.w	8006e44 <_strtod_l+0xc4>
 80070e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070e6:	498d      	ldr	r1, [pc, #564]	; (800731c <_strtod_l+0x59c>)
 80070e8:	3b01      	subs	r3, #1
 80070ea:	a817      	add	r0, sp, #92	; 0x5c
 80070ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80070ee:	f001 ffc7 	bl	8009080 <__match>
 80070f2:	b910      	cbnz	r0, 80070fa <_strtod_l+0x37a>
 80070f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070f6:	3301      	adds	r3, #1
 80070f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80070fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800732c <_strtod_l+0x5ac>
 80070fe:	f04f 0a00 	mov.w	sl, #0
 8007102:	e681      	b.n	8006e08 <_strtod_l+0x88>
 8007104:	4886      	ldr	r0, [pc, #536]	; (8007320 <_strtod_l+0x5a0>)
 8007106:	f003 f96f 	bl	800a3e8 <nan>
 800710a:	ec5b ab10 	vmov	sl, fp, d0
 800710e:	e67b      	b.n	8006e08 <_strtod_l+0x88>
 8007110:	9b05      	ldr	r3, [sp, #20]
 8007112:	9807      	ldr	r0, [sp, #28]
 8007114:	1af3      	subs	r3, r6, r3
 8007116:	2f00      	cmp	r7, #0
 8007118:	bf08      	it	eq
 800711a:	462f      	moveq	r7, r5
 800711c:	2d10      	cmp	r5, #16
 800711e:	9306      	str	r3, [sp, #24]
 8007120:	46a8      	mov	r8, r5
 8007122:	bfa8      	it	ge
 8007124:	f04f 0810 	movge.w	r8, #16
 8007128:	f7f9 fa14 	bl	8000554 <__aeabi_ui2d>
 800712c:	2d09      	cmp	r5, #9
 800712e:	4682      	mov	sl, r0
 8007130:	468b      	mov	fp, r1
 8007132:	dd13      	ble.n	800715c <_strtod_l+0x3dc>
 8007134:	4b7b      	ldr	r3, [pc, #492]	; (8007324 <_strtod_l+0x5a4>)
 8007136:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800713a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800713e:	f7f9 fa83 	bl	8000648 <__aeabi_dmul>
 8007142:	4682      	mov	sl, r0
 8007144:	4648      	mov	r0, r9
 8007146:	468b      	mov	fp, r1
 8007148:	f7f9 fa04 	bl	8000554 <__aeabi_ui2d>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4650      	mov	r0, sl
 8007152:	4659      	mov	r1, fp
 8007154:	f7f9 f8c2 	bl	80002dc <__adddf3>
 8007158:	4682      	mov	sl, r0
 800715a:	468b      	mov	fp, r1
 800715c:	2d0f      	cmp	r5, #15
 800715e:	dc38      	bgt.n	80071d2 <_strtod_l+0x452>
 8007160:	9b06      	ldr	r3, [sp, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f43f ae50 	beq.w	8006e08 <_strtod_l+0x88>
 8007168:	dd24      	ble.n	80071b4 <_strtod_l+0x434>
 800716a:	2b16      	cmp	r3, #22
 800716c:	dc0b      	bgt.n	8007186 <_strtod_l+0x406>
 800716e:	496d      	ldr	r1, [pc, #436]	; (8007324 <_strtod_l+0x5a4>)
 8007170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007178:	4652      	mov	r2, sl
 800717a:	465b      	mov	r3, fp
 800717c:	f7f9 fa64 	bl	8000648 <__aeabi_dmul>
 8007180:	4682      	mov	sl, r0
 8007182:	468b      	mov	fp, r1
 8007184:	e640      	b.n	8006e08 <_strtod_l+0x88>
 8007186:	9a06      	ldr	r2, [sp, #24]
 8007188:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800718c:	4293      	cmp	r3, r2
 800718e:	db20      	blt.n	80071d2 <_strtod_l+0x452>
 8007190:	4c64      	ldr	r4, [pc, #400]	; (8007324 <_strtod_l+0x5a4>)
 8007192:	f1c5 050f 	rsb	r5, r5, #15
 8007196:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800719a:	4652      	mov	r2, sl
 800719c:	465b      	mov	r3, fp
 800719e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a2:	f7f9 fa51 	bl	8000648 <__aeabi_dmul>
 80071a6:	9b06      	ldr	r3, [sp, #24]
 80071a8:	1b5d      	subs	r5, r3, r5
 80071aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071b2:	e7e3      	b.n	800717c <_strtod_l+0x3fc>
 80071b4:	9b06      	ldr	r3, [sp, #24]
 80071b6:	3316      	adds	r3, #22
 80071b8:	db0b      	blt.n	80071d2 <_strtod_l+0x452>
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	1b9e      	subs	r6, r3, r6
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <_strtod_l+0x5a4>)
 80071c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80071c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071c8:	4650      	mov	r0, sl
 80071ca:	4659      	mov	r1, fp
 80071cc:	f7f9 fb66 	bl	800089c <__aeabi_ddiv>
 80071d0:	e7d6      	b.n	8007180 <_strtod_l+0x400>
 80071d2:	9b06      	ldr	r3, [sp, #24]
 80071d4:	eba5 0808 	sub.w	r8, r5, r8
 80071d8:	4498      	add	r8, r3
 80071da:	f1b8 0f00 	cmp.w	r8, #0
 80071de:	dd74      	ble.n	80072ca <_strtod_l+0x54a>
 80071e0:	f018 030f 	ands.w	r3, r8, #15
 80071e4:	d00a      	beq.n	80071fc <_strtod_l+0x47c>
 80071e6:	494f      	ldr	r1, [pc, #316]	; (8007324 <_strtod_l+0x5a4>)
 80071e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071ec:	4652      	mov	r2, sl
 80071ee:	465b      	mov	r3, fp
 80071f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f4:	f7f9 fa28 	bl	8000648 <__aeabi_dmul>
 80071f8:	4682      	mov	sl, r0
 80071fa:	468b      	mov	fp, r1
 80071fc:	f038 080f 	bics.w	r8, r8, #15
 8007200:	d04f      	beq.n	80072a2 <_strtod_l+0x522>
 8007202:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007206:	dd22      	ble.n	800724e <_strtod_l+0x4ce>
 8007208:	2500      	movs	r5, #0
 800720a:	462e      	mov	r6, r5
 800720c:	9507      	str	r5, [sp, #28]
 800720e:	9505      	str	r5, [sp, #20]
 8007210:	2322      	movs	r3, #34	; 0x22
 8007212:	f8df b118 	ldr.w	fp, [pc, #280]	; 800732c <_strtod_l+0x5ac>
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	f04f 0a00 	mov.w	sl, #0
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f43f adf2 	beq.w	8006e08 <_strtod_l+0x88>
 8007224:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007226:	4620      	mov	r0, r4
 8007228:	f002 f8ae 	bl	8009388 <_Bfree>
 800722c:	9905      	ldr	r1, [sp, #20]
 800722e:	4620      	mov	r0, r4
 8007230:	f002 f8aa 	bl	8009388 <_Bfree>
 8007234:	4631      	mov	r1, r6
 8007236:	4620      	mov	r0, r4
 8007238:	f002 f8a6 	bl	8009388 <_Bfree>
 800723c:	9907      	ldr	r1, [sp, #28]
 800723e:	4620      	mov	r0, r4
 8007240:	f002 f8a2 	bl	8009388 <_Bfree>
 8007244:	4629      	mov	r1, r5
 8007246:	4620      	mov	r0, r4
 8007248:	f002 f89e 	bl	8009388 <_Bfree>
 800724c:	e5dc      	b.n	8006e08 <_strtod_l+0x88>
 800724e:	4b36      	ldr	r3, [pc, #216]	; (8007328 <_strtod_l+0x5a8>)
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	2300      	movs	r3, #0
 8007254:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007258:	4650      	mov	r0, sl
 800725a:	4659      	mov	r1, fp
 800725c:	4699      	mov	r9, r3
 800725e:	f1b8 0f01 	cmp.w	r8, #1
 8007262:	dc21      	bgt.n	80072a8 <_strtod_l+0x528>
 8007264:	b10b      	cbz	r3, 800726a <_strtod_l+0x4ea>
 8007266:	4682      	mov	sl, r0
 8007268:	468b      	mov	fp, r1
 800726a:	4b2f      	ldr	r3, [pc, #188]	; (8007328 <_strtod_l+0x5a8>)
 800726c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007270:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007274:	4652      	mov	r2, sl
 8007276:	465b      	mov	r3, fp
 8007278:	e9d9 0100 	ldrd	r0, r1, [r9]
 800727c:	f7f9 f9e4 	bl	8000648 <__aeabi_dmul>
 8007280:	4b2a      	ldr	r3, [pc, #168]	; (800732c <_strtod_l+0x5ac>)
 8007282:	460a      	mov	r2, r1
 8007284:	400b      	ands	r3, r1
 8007286:	492a      	ldr	r1, [pc, #168]	; (8007330 <_strtod_l+0x5b0>)
 8007288:	428b      	cmp	r3, r1
 800728a:	4682      	mov	sl, r0
 800728c:	d8bc      	bhi.n	8007208 <_strtod_l+0x488>
 800728e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007292:	428b      	cmp	r3, r1
 8007294:	bf86      	itte	hi
 8007296:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007334 <_strtod_l+0x5b4>
 800729a:	f04f 3aff 	movhi.w	sl, #4294967295
 800729e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80072a2:	2300      	movs	r3, #0
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	e084      	b.n	80073b2 <_strtod_l+0x632>
 80072a8:	f018 0f01 	tst.w	r8, #1
 80072ac:	d005      	beq.n	80072ba <_strtod_l+0x53a>
 80072ae:	9b04      	ldr	r3, [sp, #16]
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f7f9 f9c8 	bl	8000648 <__aeabi_dmul>
 80072b8:	2301      	movs	r3, #1
 80072ba:	9a04      	ldr	r2, [sp, #16]
 80072bc:	3208      	adds	r2, #8
 80072be:	f109 0901 	add.w	r9, r9, #1
 80072c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80072c6:	9204      	str	r2, [sp, #16]
 80072c8:	e7c9      	b.n	800725e <_strtod_l+0x4de>
 80072ca:	d0ea      	beq.n	80072a2 <_strtod_l+0x522>
 80072cc:	f1c8 0800 	rsb	r8, r8, #0
 80072d0:	f018 020f 	ands.w	r2, r8, #15
 80072d4:	d00a      	beq.n	80072ec <_strtod_l+0x56c>
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <_strtod_l+0x5a4>)
 80072d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f9 fada 	bl	800089c <__aeabi_ddiv>
 80072e8:	4682      	mov	sl, r0
 80072ea:	468b      	mov	fp, r1
 80072ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80072f0:	d0d7      	beq.n	80072a2 <_strtod_l+0x522>
 80072f2:	f1b8 0f1f 	cmp.w	r8, #31
 80072f6:	dd1f      	ble.n	8007338 <_strtod_l+0x5b8>
 80072f8:	2500      	movs	r5, #0
 80072fa:	462e      	mov	r6, r5
 80072fc:	9507      	str	r5, [sp, #28]
 80072fe:	9505      	str	r5, [sp, #20]
 8007300:	2322      	movs	r3, #34	; 0x22
 8007302:	f04f 0a00 	mov.w	sl, #0
 8007306:	f04f 0b00 	mov.w	fp, #0
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	e786      	b.n	800721c <_strtod_l+0x49c>
 800730e:	bf00      	nop
 8007310:	0800a959 	.word	0x0800a959
 8007314:	0800a99c 	.word	0x0800a99c
 8007318:	0800a951 	.word	0x0800a951
 800731c:	0800aadc 	.word	0x0800aadc
 8007320:	0800adf0 	.word	0x0800adf0
 8007324:	0800acd0 	.word	0x0800acd0
 8007328:	0800aca8 	.word	0x0800aca8
 800732c:	7ff00000 	.word	0x7ff00000
 8007330:	7ca00000 	.word	0x7ca00000
 8007334:	7fefffff 	.word	0x7fefffff
 8007338:	f018 0310 	ands.w	r3, r8, #16
 800733c:	bf18      	it	ne
 800733e:	236a      	movne	r3, #106	; 0x6a
 8007340:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80076f0 <_strtod_l+0x970>
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	4650      	mov	r0, sl
 8007348:	4659      	mov	r1, fp
 800734a:	2300      	movs	r3, #0
 800734c:	f018 0f01 	tst.w	r8, #1
 8007350:	d004      	beq.n	800735c <_strtod_l+0x5dc>
 8007352:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007356:	f7f9 f977 	bl	8000648 <__aeabi_dmul>
 800735a:	2301      	movs	r3, #1
 800735c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007360:	f109 0908 	add.w	r9, r9, #8
 8007364:	d1f2      	bne.n	800734c <_strtod_l+0x5cc>
 8007366:	b10b      	cbz	r3, 800736c <_strtod_l+0x5ec>
 8007368:	4682      	mov	sl, r0
 800736a:	468b      	mov	fp, r1
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	b1c3      	cbz	r3, 80073a2 <_strtod_l+0x622>
 8007370:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007374:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007378:	2b00      	cmp	r3, #0
 800737a:	4659      	mov	r1, fp
 800737c:	dd11      	ble.n	80073a2 <_strtod_l+0x622>
 800737e:	2b1f      	cmp	r3, #31
 8007380:	f340 8124 	ble.w	80075cc <_strtod_l+0x84c>
 8007384:	2b34      	cmp	r3, #52	; 0x34
 8007386:	bfde      	ittt	le
 8007388:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800738c:	f04f 33ff 	movle.w	r3, #4294967295
 8007390:	fa03 f202 	lslle.w	r2, r3, r2
 8007394:	f04f 0a00 	mov.w	sl, #0
 8007398:	bfcc      	ite	gt
 800739a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800739e:	ea02 0b01 	andle.w	fp, r2, r1
 80073a2:	2200      	movs	r2, #0
 80073a4:	2300      	movs	r3, #0
 80073a6:	4650      	mov	r0, sl
 80073a8:	4659      	mov	r1, fp
 80073aa:	f7f9 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1a2      	bne.n	80072f8 <_strtod_l+0x578>
 80073b2:	9b07      	ldr	r3, [sp, #28]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	9908      	ldr	r1, [sp, #32]
 80073b8:	462b      	mov	r3, r5
 80073ba:	463a      	mov	r2, r7
 80073bc:	4620      	mov	r0, r4
 80073be:	f002 f84b 	bl	8009458 <__s2b>
 80073c2:	9007      	str	r0, [sp, #28]
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f43f af1f 	beq.w	8007208 <_strtod_l+0x488>
 80073ca:	9b05      	ldr	r3, [sp, #20]
 80073cc:	1b9e      	subs	r6, r3, r6
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfb4      	ite	lt
 80073d4:	4633      	movlt	r3, r6
 80073d6:	2300      	movge	r3, #0
 80073d8:	930c      	str	r3, [sp, #48]	; 0x30
 80073da:	9b06      	ldr	r3, [sp, #24]
 80073dc:	2500      	movs	r5, #0
 80073de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073e2:	9312      	str	r3, [sp, #72]	; 0x48
 80073e4:	462e      	mov	r6, r5
 80073e6:	9b07      	ldr	r3, [sp, #28]
 80073e8:	4620      	mov	r0, r4
 80073ea:	6859      	ldr	r1, [r3, #4]
 80073ec:	f001 ff8c 	bl	8009308 <_Balloc>
 80073f0:	9005      	str	r0, [sp, #20]
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f43f af0c 	beq.w	8007210 <_strtod_l+0x490>
 80073f8:	9b07      	ldr	r3, [sp, #28]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	3202      	adds	r2, #2
 80073fe:	f103 010c 	add.w	r1, r3, #12
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	300c      	adds	r0, #12
 8007406:	f001 ff71 	bl	80092ec <memcpy>
 800740a:	ec4b ab10 	vmov	d0, sl, fp
 800740e:	aa1a      	add	r2, sp, #104	; 0x68
 8007410:	a919      	add	r1, sp, #100	; 0x64
 8007412:	4620      	mov	r0, r4
 8007414:	f002 fb66 	bl	8009ae4 <__d2b>
 8007418:	ec4b ab18 	vmov	d8, sl, fp
 800741c:	9018      	str	r0, [sp, #96]	; 0x60
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f aef6 	beq.w	8007210 <_strtod_l+0x490>
 8007424:	2101      	movs	r1, #1
 8007426:	4620      	mov	r0, r4
 8007428:	f002 f8b0 	bl	800958c <__i2b>
 800742c:	4606      	mov	r6, r0
 800742e:	2800      	cmp	r0, #0
 8007430:	f43f aeee 	beq.w	8007210 <_strtod_l+0x490>
 8007434:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007436:	9904      	ldr	r1, [sp, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfab      	itete	ge
 800743c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800743e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007440:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007442:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007446:	bfac      	ite	ge
 8007448:	eb03 0902 	addge.w	r9, r3, r2
 800744c:	1ad7      	sublt	r7, r2, r3
 800744e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007450:	eba3 0801 	sub.w	r8, r3, r1
 8007454:	4490      	add	r8, r2
 8007456:	4ba1      	ldr	r3, [pc, #644]	; (80076dc <_strtod_l+0x95c>)
 8007458:	f108 38ff 	add.w	r8, r8, #4294967295
 800745c:	4598      	cmp	r8, r3
 800745e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007462:	f280 80c7 	bge.w	80075f4 <_strtod_l+0x874>
 8007466:	eba3 0308 	sub.w	r3, r3, r8
 800746a:	2b1f      	cmp	r3, #31
 800746c:	eba2 0203 	sub.w	r2, r2, r3
 8007470:	f04f 0101 	mov.w	r1, #1
 8007474:	f300 80b1 	bgt.w	80075da <_strtod_l+0x85a>
 8007478:	fa01 f303 	lsl.w	r3, r1, r3
 800747c:	930d      	str	r3, [sp, #52]	; 0x34
 800747e:	2300      	movs	r3, #0
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	eb09 0802 	add.w	r8, r9, r2
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	45c1      	cmp	r9, r8
 800748a:	4417      	add	r7, r2
 800748c:	441f      	add	r7, r3
 800748e:	464b      	mov	r3, r9
 8007490:	bfa8      	it	ge
 8007492:	4643      	movge	r3, r8
 8007494:	42bb      	cmp	r3, r7
 8007496:	bfa8      	it	ge
 8007498:	463b      	movge	r3, r7
 800749a:	2b00      	cmp	r3, #0
 800749c:	bfc2      	ittt	gt
 800749e:	eba8 0803 	subgt.w	r8, r8, r3
 80074a2:	1aff      	subgt	r7, r7, r3
 80074a4:	eba9 0903 	subgt.w	r9, r9, r3
 80074a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd17      	ble.n	80074de <_strtod_l+0x75e>
 80074ae:	4631      	mov	r1, r6
 80074b0:	461a      	mov	r2, r3
 80074b2:	4620      	mov	r0, r4
 80074b4:	f002 f92a 	bl	800970c <__pow5mult>
 80074b8:	4606      	mov	r6, r0
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aea8 	beq.w	8007210 <_strtod_l+0x490>
 80074c0:	4601      	mov	r1, r0
 80074c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80074c4:	4620      	mov	r0, r4
 80074c6:	f002 f877 	bl	80095b8 <__multiply>
 80074ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f43f ae9f 	beq.w	8007210 <_strtod_l+0x490>
 80074d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074d4:	4620      	mov	r0, r4
 80074d6:	f001 ff57 	bl	8009388 <_Bfree>
 80074da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074dc:	9318      	str	r3, [sp, #96]	; 0x60
 80074de:	f1b8 0f00 	cmp.w	r8, #0
 80074e2:	f300 808c 	bgt.w	80075fe <_strtod_l+0x87e>
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dd08      	ble.n	80074fe <_strtod_l+0x77e>
 80074ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074ee:	9905      	ldr	r1, [sp, #20]
 80074f0:	4620      	mov	r0, r4
 80074f2:	f002 f90b 	bl	800970c <__pow5mult>
 80074f6:	9005      	str	r0, [sp, #20]
 80074f8:	2800      	cmp	r0, #0
 80074fa:	f43f ae89 	beq.w	8007210 <_strtod_l+0x490>
 80074fe:	2f00      	cmp	r7, #0
 8007500:	dd08      	ble.n	8007514 <_strtod_l+0x794>
 8007502:	9905      	ldr	r1, [sp, #20]
 8007504:	463a      	mov	r2, r7
 8007506:	4620      	mov	r0, r4
 8007508:	f002 f95a 	bl	80097c0 <__lshift>
 800750c:	9005      	str	r0, [sp, #20]
 800750e:	2800      	cmp	r0, #0
 8007510:	f43f ae7e 	beq.w	8007210 <_strtod_l+0x490>
 8007514:	f1b9 0f00 	cmp.w	r9, #0
 8007518:	dd08      	ble.n	800752c <_strtod_l+0x7ac>
 800751a:	4631      	mov	r1, r6
 800751c:	464a      	mov	r2, r9
 800751e:	4620      	mov	r0, r4
 8007520:	f002 f94e 	bl	80097c0 <__lshift>
 8007524:	4606      	mov	r6, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f ae72 	beq.w	8007210 <_strtod_l+0x490>
 800752c:	9a05      	ldr	r2, [sp, #20]
 800752e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007530:	4620      	mov	r0, r4
 8007532:	f002 f9d1 	bl	80098d8 <__mdiff>
 8007536:	4605      	mov	r5, r0
 8007538:	2800      	cmp	r0, #0
 800753a:	f43f ae69 	beq.w	8007210 <_strtod_l+0x490>
 800753e:	68c3      	ldr	r3, [r0, #12]
 8007540:	930b      	str	r3, [sp, #44]	; 0x2c
 8007542:	2300      	movs	r3, #0
 8007544:	60c3      	str	r3, [r0, #12]
 8007546:	4631      	mov	r1, r6
 8007548:	f002 f9aa 	bl	80098a0 <__mcmp>
 800754c:	2800      	cmp	r0, #0
 800754e:	da60      	bge.n	8007612 <_strtod_l+0x892>
 8007550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007552:	ea53 030a 	orrs.w	r3, r3, sl
 8007556:	f040 8082 	bne.w	800765e <_strtod_l+0x8de>
 800755a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800755e:	2b00      	cmp	r3, #0
 8007560:	d17d      	bne.n	800765e <_strtod_l+0x8de>
 8007562:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007566:	0d1b      	lsrs	r3, r3, #20
 8007568:	051b      	lsls	r3, r3, #20
 800756a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800756e:	d976      	bls.n	800765e <_strtod_l+0x8de>
 8007570:	696b      	ldr	r3, [r5, #20]
 8007572:	b913      	cbnz	r3, 800757a <_strtod_l+0x7fa>
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	2b01      	cmp	r3, #1
 8007578:	dd71      	ble.n	800765e <_strtod_l+0x8de>
 800757a:	4629      	mov	r1, r5
 800757c:	2201      	movs	r2, #1
 800757e:	4620      	mov	r0, r4
 8007580:	f002 f91e 	bl	80097c0 <__lshift>
 8007584:	4631      	mov	r1, r6
 8007586:	4605      	mov	r5, r0
 8007588:	f002 f98a 	bl	80098a0 <__mcmp>
 800758c:	2800      	cmp	r0, #0
 800758e:	dd66      	ble.n	800765e <_strtod_l+0x8de>
 8007590:	9904      	ldr	r1, [sp, #16]
 8007592:	4a53      	ldr	r2, [pc, #332]	; (80076e0 <_strtod_l+0x960>)
 8007594:	465b      	mov	r3, fp
 8007596:	2900      	cmp	r1, #0
 8007598:	f000 8081 	beq.w	800769e <_strtod_l+0x91e>
 800759c:	ea02 010b 	and.w	r1, r2, fp
 80075a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075a4:	dc7b      	bgt.n	800769e <_strtod_l+0x91e>
 80075a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075aa:	f77f aea9 	ble.w	8007300 <_strtod_l+0x580>
 80075ae:	4b4d      	ldr	r3, [pc, #308]	; (80076e4 <_strtod_l+0x964>)
 80075b0:	4650      	mov	r0, sl
 80075b2:	4659      	mov	r1, fp
 80075b4:	2200      	movs	r2, #0
 80075b6:	f7f9 f847 	bl	8000648 <__aeabi_dmul>
 80075ba:	460b      	mov	r3, r1
 80075bc:	4303      	orrs	r3, r0
 80075be:	bf08      	it	eq
 80075c0:	2322      	moveq	r3, #34	; 0x22
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	bf08      	it	eq
 80075c8:	6023      	streq	r3, [r4, #0]
 80075ca:	e62b      	b.n	8007224 <_strtod_l+0x4a4>
 80075cc:	f04f 32ff 	mov.w	r2, #4294967295
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	ea03 0a0a 	and.w	sl, r3, sl
 80075d8:	e6e3      	b.n	80073a2 <_strtod_l+0x622>
 80075da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80075de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80075e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80075e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80075ea:	fa01 f308 	lsl.w	r3, r1, r8
 80075ee:	9308      	str	r3, [sp, #32]
 80075f0:	910d      	str	r1, [sp, #52]	; 0x34
 80075f2:	e746      	b.n	8007482 <_strtod_l+0x702>
 80075f4:	2300      	movs	r3, #0
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	2301      	movs	r3, #1
 80075fa:	930d      	str	r3, [sp, #52]	; 0x34
 80075fc:	e741      	b.n	8007482 <_strtod_l+0x702>
 80075fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007600:	4642      	mov	r2, r8
 8007602:	4620      	mov	r0, r4
 8007604:	f002 f8dc 	bl	80097c0 <__lshift>
 8007608:	9018      	str	r0, [sp, #96]	; 0x60
 800760a:	2800      	cmp	r0, #0
 800760c:	f47f af6b 	bne.w	80074e6 <_strtod_l+0x766>
 8007610:	e5fe      	b.n	8007210 <_strtod_l+0x490>
 8007612:	465f      	mov	r7, fp
 8007614:	d16e      	bne.n	80076f4 <_strtod_l+0x974>
 8007616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007618:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800761c:	b342      	cbz	r2, 8007670 <_strtod_l+0x8f0>
 800761e:	4a32      	ldr	r2, [pc, #200]	; (80076e8 <_strtod_l+0x968>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d128      	bne.n	8007676 <_strtod_l+0x8f6>
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	4651      	mov	r1, sl
 8007628:	b1eb      	cbz	r3, 8007666 <_strtod_l+0x8e6>
 800762a:	4b2d      	ldr	r3, [pc, #180]	; (80076e0 <_strtod_l+0x960>)
 800762c:	403b      	ands	r3, r7
 800762e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	d819      	bhi.n	800766c <_strtod_l+0x8ec>
 8007638:	0d1b      	lsrs	r3, r3, #20
 800763a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800763e:	fa02 f303 	lsl.w	r3, r2, r3
 8007642:	4299      	cmp	r1, r3
 8007644:	d117      	bne.n	8007676 <_strtod_l+0x8f6>
 8007646:	4b29      	ldr	r3, [pc, #164]	; (80076ec <_strtod_l+0x96c>)
 8007648:	429f      	cmp	r7, r3
 800764a:	d102      	bne.n	8007652 <_strtod_l+0x8d2>
 800764c:	3101      	adds	r1, #1
 800764e:	f43f addf 	beq.w	8007210 <_strtod_l+0x490>
 8007652:	4b23      	ldr	r3, [pc, #140]	; (80076e0 <_strtod_l+0x960>)
 8007654:	403b      	ands	r3, r7
 8007656:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800765a:	f04f 0a00 	mov.w	sl, #0
 800765e:	9b04      	ldr	r3, [sp, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1a4      	bne.n	80075ae <_strtod_l+0x82e>
 8007664:	e5de      	b.n	8007224 <_strtod_l+0x4a4>
 8007666:	f04f 33ff 	mov.w	r3, #4294967295
 800766a:	e7ea      	b.n	8007642 <_strtod_l+0x8c2>
 800766c:	4613      	mov	r3, r2
 800766e:	e7e8      	b.n	8007642 <_strtod_l+0x8c2>
 8007670:	ea53 030a 	orrs.w	r3, r3, sl
 8007674:	d08c      	beq.n	8007590 <_strtod_l+0x810>
 8007676:	9b08      	ldr	r3, [sp, #32]
 8007678:	b1db      	cbz	r3, 80076b2 <_strtod_l+0x932>
 800767a:	423b      	tst	r3, r7
 800767c:	d0ef      	beq.n	800765e <_strtod_l+0x8de>
 800767e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007680:	9a04      	ldr	r2, [sp, #16]
 8007682:	4650      	mov	r0, sl
 8007684:	4659      	mov	r1, fp
 8007686:	b1c3      	cbz	r3, 80076ba <_strtod_l+0x93a>
 8007688:	f7ff fb5e 	bl	8006d48 <sulp>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	ec51 0b18 	vmov	r0, r1, d8
 8007694:	f7f8 fe22 	bl	80002dc <__adddf3>
 8007698:	4682      	mov	sl, r0
 800769a:	468b      	mov	fp, r1
 800769c:	e7df      	b.n	800765e <_strtod_l+0x8de>
 800769e:	4013      	ands	r3, r2
 80076a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80076a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80076ac:	f04f 3aff 	mov.w	sl, #4294967295
 80076b0:	e7d5      	b.n	800765e <_strtod_l+0x8de>
 80076b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b4:	ea13 0f0a 	tst.w	r3, sl
 80076b8:	e7e0      	b.n	800767c <_strtod_l+0x8fc>
 80076ba:	f7ff fb45 	bl	8006d48 <sulp>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	ec51 0b18 	vmov	r0, r1, d8
 80076c6:	f7f8 fe07 	bl	80002d8 <__aeabi_dsub>
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	4682      	mov	sl, r0
 80076d0:	468b      	mov	fp, r1
 80076d2:	f7f9 fa21 	bl	8000b18 <__aeabi_dcmpeq>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d0c1      	beq.n	800765e <_strtod_l+0x8de>
 80076da:	e611      	b.n	8007300 <_strtod_l+0x580>
 80076dc:	fffffc02 	.word	0xfffffc02
 80076e0:	7ff00000 	.word	0x7ff00000
 80076e4:	39500000 	.word	0x39500000
 80076e8:	000fffff 	.word	0x000fffff
 80076ec:	7fefffff 	.word	0x7fefffff
 80076f0:	0800a9b0 	.word	0x0800a9b0
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	f002 fa50 	bl	8009b9c <__ratio>
 80076fc:	ec59 8b10 	vmov	r8, r9, d0
 8007700:	ee10 0a10 	vmov	r0, s0
 8007704:	2200      	movs	r2, #0
 8007706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800770a:	4649      	mov	r1, r9
 800770c:	f7f9 fa18 	bl	8000b40 <__aeabi_dcmple>
 8007710:	2800      	cmp	r0, #0
 8007712:	d07a      	beq.n	800780a <_strtod_l+0xa8a>
 8007714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d04a      	beq.n	80077b0 <_strtod_l+0xa30>
 800771a:	4b95      	ldr	r3, [pc, #596]	; (8007970 <_strtod_l+0xbf0>)
 800771c:	2200      	movs	r2, #0
 800771e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007722:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007970 <_strtod_l+0xbf0>
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	4b92      	ldr	r3, [pc, #584]	; (8007974 <_strtod_l+0xbf4>)
 800772c:	403b      	ands	r3, r7
 800772e:	930d      	str	r3, [sp, #52]	; 0x34
 8007730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007732:	4b91      	ldr	r3, [pc, #580]	; (8007978 <_strtod_l+0xbf8>)
 8007734:	429a      	cmp	r2, r3
 8007736:	f040 80b0 	bne.w	800789a <_strtod_l+0xb1a>
 800773a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800773e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007742:	ec4b ab10 	vmov	d0, sl, fp
 8007746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800774a:	f002 f94f 	bl	80099ec <__ulp>
 800774e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007752:	ec53 2b10 	vmov	r2, r3, d0
 8007756:	f7f8 ff77 	bl	8000648 <__aeabi_dmul>
 800775a:	4652      	mov	r2, sl
 800775c:	465b      	mov	r3, fp
 800775e:	f7f8 fdbd 	bl	80002dc <__adddf3>
 8007762:	460b      	mov	r3, r1
 8007764:	4983      	ldr	r1, [pc, #524]	; (8007974 <_strtod_l+0xbf4>)
 8007766:	4a85      	ldr	r2, [pc, #532]	; (800797c <_strtod_l+0xbfc>)
 8007768:	4019      	ands	r1, r3
 800776a:	4291      	cmp	r1, r2
 800776c:	4682      	mov	sl, r0
 800776e:	d960      	bls.n	8007832 <_strtod_l+0xab2>
 8007770:	ee18 3a90 	vmov	r3, s17
 8007774:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007778:	4293      	cmp	r3, r2
 800777a:	d104      	bne.n	8007786 <_strtod_l+0xa06>
 800777c:	ee18 3a10 	vmov	r3, s16
 8007780:	3301      	adds	r3, #1
 8007782:	f43f ad45 	beq.w	8007210 <_strtod_l+0x490>
 8007786:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007988 <_strtod_l+0xc08>
 800778a:	f04f 3aff 	mov.w	sl, #4294967295
 800778e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007790:	4620      	mov	r0, r4
 8007792:	f001 fdf9 	bl	8009388 <_Bfree>
 8007796:	9905      	ldr	r1, [sp, #20]
 8007798:	4620      	mov	r0, r4
 800779a:	f001 fdf5 	bl	8009388 <_Bfree>
 800779e:	4631      	mov	r1, r6
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 fdf1 	bl	8009388 <_Bfree>
 80077a6:	4629      	mov	r1, r5
 80077a8:	4620      	mov	r0, r4
 80077aa:	f001 fded 	bl	8009388 <_Bfree>
 80077ae:	e61a      	b.n	80073e6 <_strtod_l+0x666>
 80077b0:	f1ba 0f00 	cmp.w	sl, #0
 80077b4:	d11b      	bne.n	80077ee <_strtod_l+0xa6e>
 80077b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077ba:	b9f3      	cbnz	r3, 80077fa <_strtod_l+0xa7a>
 80077bc:	4b6c      	ldr	r3, [pc, #432]	; (8007970 <_strtod_l+0xbf0>)
 80077be:	2200      	movs	r2, #0
 80077c0:	4640      	mov	r0, r8
 80077c2:	4649      	mov	r1, r9
 80077c4:	f7f9 f9b2 	bl	8000b2c <__aeabi_dcmplt>
 80077c8:	b9d0      	cbnz	r0, 8007800 <_strtod_l+0xa80>
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	4b6c      	ldr	r3, [pc, #432]	; (8007980 <_strtod_l+0xc00>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	f7f8 ff39 	bl	8000648 <__aeabi_dmul>
 80077d6:	4680      	mov	r8, r0
 80077d8:	4689      	mov	r9, r1
 80077da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80077e2:	9315      	str	r3, [sp, #84]	; 0x54
 80077e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077ec:	e79d      	b.n	800772a <_strtod_l+0x9aa>
 80077ee:	f1ba 0f01 	cmp.w	sl, #1
 80077f2:	d102      	bne.n	80077fa <_strtod_l+0xa7a>
 80077f4:	2f00      	cmp	r7, #0
 80077f6:	f43f ad83 	beq.w	8007300 <_strtod_l+0x580>
 80077fa:	4b62      	ldr	r3, [pc, #392]	; (8007984 <_strtod_l+0xc04>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	e78e      	b.n	800771e <_strtod_l+0x99e>
 8007800:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007980 <_strtod_l+0xc00>
 8007804:	f04f 0800 	mov.w	r8, #0
 8007808:	e7e7      	b.n	80077da <_strtod_l+0xa5a>
 800780a:	4b5d      	ldr	r3, [pc, #372]	; (8007980 <_strtod_l+0xc00>)
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	2200      	movs	r2, #0
 8007812:	f7f8 ff19 	bl	8000648 <__aeabi_dmul>
 8007816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007818:	4680      	mov	r8, r0
 800781a:	4689      	mov	r9, r1
 800781c:	b933      	cbnz	r3, 800782c <_strtod_l+0xaac>
 800781e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007822:	900e      	str	r0, [sp, #56]	; 0x38
 8007824:	930f      	str	r3, [sp, #60]	; 0x3c
 8007826:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800782a:	e7dd      	b.n	80077e8 <_strtod_l+0xa68>
 800782c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007830:	e7f9      	b.n	8007826 <_strtod_l+0xaa6>
 8007832:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007836:	9b04      	ldr	r3, [sp, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1a8      	bne.n	800778e <_strtod_l+0xa0e>
 800783c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007842:	0d1b      	lsrs	r3, r3, #20
 8007844:	051b      	lsls	r3, r3, #20
 8007846:	429a      	cmp	r2, r3
 8007848:	d1a1      	bne.n	800778e <_strtod_l+0xa0e>
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f9 fa5b 	bl	8000d08 <__aeabi_d2lz>
 8007852:	f7f8 fecb 	bl	80005ec <__aeabi_l2d>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 fd3b 	bl	80002d8 <__aeabi_dsub>
 8007862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007868:	ea43 030a 	orr.w	r3, r3, sl
 800786c:	4313      	orrs	r3, r2
 800786e:	4680      	mov	r8, r0
 8007870:	4689      	mov	r9, r1
 8007872:	d055      	beq.n	8007920 <_strtod_l+0xba0>
 8007874:	a336      	add	r3, pc, #216	; (adr r3, 8007950 <_strtod_l+0xbd0>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f9 f957 	bl	8000b2c <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f47f acd0 	bne.w	8007224 <_strtod_l+0x4a4>
 8007884:	a334      	add	r3, pc, #208	; (adr r3, 8007958 <_strtod_l+0xbd8>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	4640      	mov	r0, r8
 800788c:	4649      	mov	r1, r9
 800788e:	f7f9 f96b 	bl	8000b68 <__aeabi_dcmpgt>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f af7b 	beq.w	800778e <_strtod_l+0xa0e>
 8007898:	e4c4      	b.n	8007224 <_strtod_l+0x4a4>
 800789a:	9b04      	ldr	r3, [sp, #16]
 800789c:	b333      	cbz	r3, 80078ec <_strtod_l+0xb6c>
 800789e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078a4:	d822      	bhi.n	80078ec <_strtod_l+0xb6c>
 80078a6:	a32e      	add	r3, pc, #184	; (adr r3, 8007960 <_strtod_l+0xbe0>)
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f9 f946 	bl	8000b40 <__aeabi_dcmple>
 80078b4:	b1a0      	cbz	r0, 80078e0 <_strtod_l+0xb60>
 80078b6:	4649      	mov	r1, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	f7f9 f99d 	bl	8000bf8 <__aeabi_d2uiz>
 80078be:	2801      	cmp	r0, #1
 80078c0:	bf38      	it	cc
 80078c2:	2001      	movcc	r0, #1
 80078c4:	f7f8 fe46 	bl	8000554 <__aeabi_ui2d>
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	4680      	mov	r8, r0
 80078cc:	4689      	mov	r9, r1
 80078ce:	bb23      	cbnz	r3, 800791a <_strtod_l+0xb9a>
 80078d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078d4:	9010      	str	r0, [sp, #64]	; 0x40
 80078d6:	9311      	str	r3, [sp, #68]	; 0x44
 80078d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80078e8:	1a9b      	subs	r3, r3, r2
 80078ea:	9309      	str	r3, [sp, #36]	; 0x24
 80078ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078f0:	eeb0 0a48 	vmov.f32	s0, s16
 80078f4:	eef0 0a68 	vmov.f32	s1, s17
 80078f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078fc:	f002 f876 	bl	80099ec <__ulp>
 8007900:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007904:	ec53 2b10 	vmov	r2, r3, d0
 8007908:	f7f8 fe9e 	bl	8000648 <__aeabi_dmul>
 800790c:	ec53 2b18 	vmov	r2, r3, d8
 8007910:	f7f8 fce4 	bl	80002dc <__adddf3>
 8007914:	4682      	mov	sl, r0
 8007916:	468b      	mov	fp, r1
 8007918:	e78d      	b.n	8007836 <_strtod_l+0xab6>
 800791a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800791e:	e7db      	b.n	80078d8 <_strtod_l+0xb58>
 8007920:	a311      	add	r3, pc, #68	; (adr r3, 8007968 <_strtod_l+0xbe8>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f9 f901 	bl	8000b2c <__aeabi_dcmplt>
 800792a:	e7b2      	b.n	8007892 <_strtod_l+0xb12>
 800792c:	2300      	movs	r3, #0
 800792e:	930a      	str	r3, [sp, #40]	; 0x28
 8007930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	f7ff ba6b 	b.w	8006e10 <_strtod_l+0x90>
 800793a:	2a65      	cmp	r2, #101	; 0x65
 800793c:	f43f ab5f 	beq.w	8006ffe <_strtod_l+0x27e>
 8007940:	2a45      	cmp	r2, #69	; 0x45
 8007942:	f43f ab5c 	beq.w	8006ffe <_strtod_l+0x27e>
 8007946:	2301      	movs	r3, #1
 8007948:	f7ff bb94 	b.w	8007074 <_strtod_l+0x2f4>
 800794c:	f3af 8000 	nop.w
 8007950:	94a03595 	.word	0x94a03595
 8007954:	3fdfffff 	.word	0x3fdfffff
 8007958:	35afe535 	.word	0x35afe535
 800795c:	3fe00000 	.word	0x3fe00000
 8007960:	ffc00000 	.word	0xffc00000
 8007964:	41dfffff 	.word	0x41dfffff
 8007968:	94a03595 	.word	0x94a03595
 800796c:	3fcfffff 	.word	0x3fcfffff
 8007970:	3ff00000 	.word	0x3ff00000
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	7fe00000 	.word	0x7fe00000
 800797c:	7c9fffff 	.word	0x7c9fffff
 8007980:	3fe00000 	.word	0x3fe00000
 8007984:	bff00000 	.word	0xbff00000
 8007988:	7fefffff 	.word	0x7fefffff

0800798c <_strtod_r>:
 800798c:	4b01      	ldr	r3, [pc, #4]	; (8007994 <_strtod_r+0x8>)
 800798e:	f7ff b9f7 	b.w	8006d80 <_strtod_l>
 8007992:	bf00      	nop
 8007994:	20000078 	.word	0x20000078

08007998 <_strtol_l.constprop.0>:
 8007998:	2b01      	cmp	r3, #1
 800799a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799e:	d001      	beq.n	80079a4 <_strtol_l.constprop.0+0xc>
 80079a0:	2b24      	cmp	r3, #36	; 0x24
 80079a2:	d906      	bls.n	80079b2 <_strtol_l.constprop.0+0x1a>
 80079a4:	f7fe fa18 	bl	8005dd8 <__errno>
 80079a8:	2316      	movs	r3, #22
 80079aa:	6003      	str	r3, [r0, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a98 <_strtol_l.constprop.0+0x100>
 80079b6:	460d      	mov	r5, r1
 80079b8:	462e      	mov	r6, r5
 80079ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80079c2:	f017 0708 	ands.w	r7, r7, #8
 80079c6:	d1f7      	bne.n	80079b8 <_strtol_l.constprop.0+0x20>
 80079c8:	2c2d      	cmp	r4, #45	; 0x2d
 80079ca:	d132      	bne.n	8007a32 <_strtol_l.constprop.0+0x9a>
 80079cc:	782c      	ldrb	r4, [r5, #0]
 80079ce:	2701      	movs	r7, #1
 80079d0:	1cb5      	adds	r5, r6, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d05b      	beq.n	8007a8e <_strtol_l.constprop.0+0xf6>
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d109      	bne.n	80079ee <_strtol_l.constprop.0+0x56>
 80079da:	2c30      	cmp	r4, #48	; 0x30
 80079dc:	d107      	bne.n	80079ee <_strtol_l.constprop.0+0x56>
 80079de:	782c      	ldrb	r4, [r5, #0]
 80079e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80079e4:	2c58      	cmp	r4, #88	; 0x58
 80079e6:	d14d      	bne.n	8007a84 <_strtol_l.constprop.0+0xec>
 80079e8:	786c      	ldrb	r4, [r5, #1]
 80079ea:	2310      	movs	r3, #16
 80079ec:	3502      	adds	r5, #2
 80079ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80079f6:	f04f 0c00 	mov.w	ip, #0
 80079fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80079fe:	4666      	mov	r6, ip
 8007a00:	fb03 8a19 	mls	sl, r3, r9, r8
 8007a04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007a08:	f1be 0f09 	cmp.w	lr, #9
 8007a0c:	d816      	bhi.n	8007a3c <_strtol_l.constprop.0+0xa4>
 8007a0e:	4674      	mov	r4, lr
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	dd24      	ble.n	8007a5e <_strtol_l.constprop.0+0xc6>
 8007a14:	f1bc 0f00 	cmp.w	ip, #0
 8007a18:	db1e      	blt.n	8007a58 <_strtol_l.constprop.0+0xc0>
 8007a1a:	45b1      	cmp	r9, r6
 8007a1c:	d31c      	bcc.n	8007a58 <_strtol_l.constprop.0+0xc0>
 8007a1e:	d101      	bne.n	8007a24 <_strtol_l.constprop.0+0x8c>
 8007a20:	45a2      	cmp	sl, r4
 8007a22:	db19      	blt.n	8007a58 <_strtol_l.constprop.0+0xc0>
 8007a24:	fb06 4603 	mla	r6, r6, r3, r4
 8007a28:	f04f 0c01 	mov.w	ip, #1
 8007a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a30:	e7e8      	b.n	8007a04 <_strtol_l.constprop.0+0x6c>
 8007a32:	2c2b      	cmp	r4, #43	; 0x2b
 8007a34:	bf04      	itt	eq
 8007a36:	782c      	ldrbeq	r4, [r5, #0]
 8007a38:	1cb5      	addeq	r5, r6, #2
 8007a3a:	e7ca      	b.n	80079d2 <_strtol_l.constprop.0+0x3a>
 8007a3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007a40:	f1be 0f19 	cmp.w	lr, #25
 8007a44:	d801      	bhi.n	8007a4a <_strtol_l.constprop.0+0xb2>
 8007a46:	3c37      	subs	r4, #55	; 0x37
 8007a48:	e7e2      	b.n	8007a10 <_strtol_l.constprop.0+0x78>
 8007a4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007a4e:	f1be 0f19 	cmp.w	lr, #25
 8007a52:	d804      	bhi.n	8007a5e <_strtol_l.constprop.0+0xc6>
 8007a54:	3c57      	subs	r4, #87	; 0x57
 8007a56:	e7db      	b.n	8007a10 <_strtol_l.constprop.0+0x78>
 8007a58:	f04f 3cff 	mov.w	ip, #4294967295
 8007a5c:	e7e6      	b.n	8007a2c <_strtol_l.constprop.0+0x94>
 8007a5e:	f1bc 0f00 	cmp.w	ip, #0
 8007a62:	da05      	bge.n	8007a70 <_strtol_l.constprop.0+0xd8>
 8007a64:	2322      	movs	r3, #34	; 0x22
 8007a66:	6003      	str	r3, [r0, #0]
 8007a68:	4646      	mov	r6, r8
 8007a6a:	b942      	cbnz	r2, 8007a7e <_strtol_l.constprop.0+0xe6>
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	e79e      	b.n	80079ae <_strtol_l.constprop.0+0x16>
 8007a70:	b107      	cbz	r7, 8007a74 <_strtol_l.constprop.0+0xdc>
 8007a72:	4276      	negs	r6, r6
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	d0f9      	beq.n	8007a6c <_strtol_l.constprop.0+0xd4>
 8007a78:	f1bc 0f00 	cmp.w	ip, #0
 8007a7c:	d000      	beq.n	8007a80 <_strtol_l.constprop.0+0xe8>
 8007a7e:	1e69      	subs	r1, r5, #1
 8007a80:	6011      	str	r1, [r2, #0]
 8007a82:	e7f3      	b.n	8007a6c <_strtol_l.constprop.0+0xd4>
 8007a84:	2430      	movs	r4, #48	; 0x30
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1b1      	bne.n	80079ee <_strtol_l.constprop.0+0x56>
 8007a8a:	2308      	movs	r3, #8
 8007a8c:	e7af      	b.n	80079ee <_strtol_l.constprop.0+0x56>
 8007a8e:	2c30      	cmp	r4, #48	; 0x30
 8007a90:	d0a5      	beq.n	80079de <_strtol_l.constprop.0+0x46>
 8007a92:	230a      	movs	r3, #10
 8007a94:	e7ab      	b.n	80079ee <_strtol_l.constprop.0+0x56>
 8007a96:	bf00      	nop
 8007a98:	0800a9d9 	.word	0x0800a9d9

08007a9c <_strtol_r>:
 8007a9c:	f7ff bf7c 	b.w	8007998 <_strtol_l.constprop.0>

08007aa0 <quorem>:
 8007aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	6903      	ldr	r3, [r0, #16]
 8007aa6:	690c      	ldr	r4, [r1, #16]
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	4607      	mov	r7, r0
 8007aac:	f2c0 8081 	blt.w	8007bb2 <quorem+0x112>
 8007ab0:	3c01      	subs	r4, #1
 8007ab2:	f101 0814 	add.w	r8, r1, #20
 8007ab6:	f100 0514 	add.w	r5, r0, #20
 8007aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	429a      	cmp	r2, r3
 8007acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ad8:	d331      	bcc.n	8007b3e <quorem+0x9e>
 8007ada:	f04f 0e00 	mov.w	lr, #0
 8007ade:	4640      	mov	r0, r8
 8007ae0:	46ac      	mov	ip, r5
 8007ae2:	46f2      	mov	sl, lr
 8007ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ae8:	b293      	uxth	r3, r2
 8007aea:	fb06 e303 	mla	r3, r6, r3, lr
 8007aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	ebaa 0303 	sub.w	r3, sl, r3
 8007af8:	f8dc a000 	ldr.w	sl, [ip]
 8007afc:	0c12      	lsrs	r2, r2, #16
 8007afe:	fa13 f38a 	uxtah	r3, r3, sl
 8007b02:	fb06 e202 	mla	r2, r6, r2, lr
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	9b00      	ldr	r3, [sp, #0]
 8007b0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b0e:	b292      	uxth	r2, r2
 8007b10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b18:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b1c:	4581      	cmp	r9, r0
 8007b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b22:	f84c 3b04 	str.w	r3, [ip], #4
 8007b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b2a:	d2db      	bcs.n	8007ae4 <quorem+0x44>
 8007b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b30:	b92b      	cbnz	r3, 8007b3e <quorem+0x9e>
 8007b32:	9b01      	ldr	r3, [sp, #4]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	429d      	cmp	r5, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	d32e      	bcc.n	8007b9a <quorem+0xfa>
 8007b3c:	613c      	str	r4, [r7, #16]
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f001 feae 	bl	80098a0 <__mcmp>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	db24      	blt.n	8007b92 <quorem+0xf2>
 8007b48:	3601      	adds	r6, #1
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f04f 0c00 	mov.w	ip, #0
 8007b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b54:	f8d0 e000 	ldr.w	lr, [r0]
 8007b58:	b293      	uxth	r3, r2
 8007b5a:	ebac 0303 	sub.w	r3, ip, r3
 8007b5e:	0c12      	lsrs	r2, r2, #16
 8007b60:	fa13 f38e 	uxtah	r3, r3, lr
 8007b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b72:	45c1      	cmp	r9, r8
 8007b74:	f840 3b04 	str.w	r3, [r0], #4
 8007b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b7c:	d2e8      	bcs.n	8007b50 <quorem+0xb0>
 8007b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b86:	b922      	cbnz	r2, 8007b92 <quorem+0xf2>
 8007b88:	3b04      	subs	r3, #4
 8007b8a:	429d      	cmp	r5, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	d30a      	bcc.n	8007ba6 <quorem+0x106>
 8007b90:	613c      	str	r4, [r7, #16]
 8007b92:	4630      	mov	r0, r6
 8007b94:	b003      	add	sp, #12
 8007b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d1cc      	bne.n	8007b3c <quorem+0x9c>
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	e7c7      	b.n	8007b36 <quorem+0x96>
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	3b04      	subs	r3, #4
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d1f0      	bne.n	8007b90 <quorem+0xf0>
 8007bae:	3c01      	subs	r4, #1
 8007bb0:	e7eb      	b.n	8007b8a <quorem+0xea>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e7ee      	b.n	8007b94 <quorem+0xf4>
	...

08007bb8 <_dtoa_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	ed2d 8b04 	vpush	{d8-d9}
 8007bc0:	ec57 6b10 	vmov	r6, r7, d0
 8007bc4:	b093      	sub	sp, #76	; 0x4c
 8007bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bcc:	9106      	str	r1, [sp, #24]
 8007bce:	ee10 aa10 	vmov	sl, s0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd8:	46bb      	mov	fp, r7
 8007bda:	b975      	cbnz	r5, 8007bfa <_dtoa_r+0x42>
 8007bdc:	2010      	movs	r0, #16
 8007bde:	f001 fb6b 	bl	80092b8 <malloc>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6260      	str	r0, [r4, #36]	; 0x24
 8007be6:	b920      	cbnz	r0, 8007bf2 <_dtoa_r+0x3a>
 8007be8:	4ba7      	ldr	r3, [pc, #668]	; (8007e88 <_dtoa_r+0x2d0>)
 8007bea:	21ea      	movs	r1, #234	; 0xea
 8007bec:	48a7      	ldr	r0, [pc, #668]	; (8007e8c <_dtoa_r+0x2d4>)
 8007bee:	f002 fd4b 	bl	800a688 <__assert_func>
 8007bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bf6:	6005      	str	r5, [r0, #0]
 8007bf8:	60c5      	str	r5, [r0, #12]
 8007bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bfc:	6819      	ldr	r1, [r3, #0]
 8007bfe:	b151      	cbz	r1, 8007c16 <_dtoa_r+0x5e>
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	604a      	str	r2, [r1, #4]
 8007c04:	2301      	movs	r3, #1
 8007c06:	4093      	lsls	r3, r2
 8007c08:	608b      	str	r3, [r1, #8]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 fbbc 	bl	8009388 <_Bfree>
 8007c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	1e3b      	subs	r3, r7, #0
 8007c18:	bfaa      	itet	ge
 8007c1a:	2300      	movge	r3, #0
 8007c1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c20:	f8c8 3000 	strge.w	r3, [r8]
 8007c24:	4b9a      	ldr	r3, [pc, #616]	; (8007e90 <_dtoa_r+0x2d8>)
 8007c26:	bfbc      	itt	lt
 8007c28:	2201      	movlt	r2, #1
 8007c2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c2e:	ea33 030b 	bics.w	r3, r3, fp
 8007c32:	d11b      	bne.n	8007c6c <_dtoa_r+0xb4>
 8007c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c40:	4333      	orrs	r3, r6
 8007c42:	f000 8592 	beq.w	800876a <_dtoa_r+0xbb2>
 8007c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c48:	b963      	cbnz	r3, 8007c64 <_dtoa_r+0xac>
 8007c4a:	4b92      	ldr	r3, [pc, #584]	; (8007e94 <_dtoa_r+0x2dc>)
 8007c4c:	e022      	b.n	8007c94 <_dtoa_r+0xdc>
 8007c4e:	4b92      	ldr	r3, [pc, #584]	; (8007e98 <_dtoa_r+0x2e0>)
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	3308      	adds	r3, #8
 8007c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	9801      	ldr	r0, [sp, #4]
 8007c5a:	b013      	add	sp, #76	; 0x4c
 8007c5c:	ecbd 8b04 	vpop	{d8-d9}
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <_dtoa_r+0x2dc>)
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	3303      	adds	r3, #3
 8007c6a:	e7f3      	b.n	8007c54 <_dtoa_r+0x9c>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	f7f8 ff50 	bl	8000b18 <__aeabi_dcmpeq>
 8007c78:	ec4b ab19 	vmov	d9, sl, fp
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	b158      	cbz	r0, 8007c98 <_dtoa_r+0xe0>
 8007c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c82:	2301      	movs	r3, #1
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 856b 	beq.w	8008764 <_dtoa_r+0xbac>
 8007c8e:	4883      	ldr	r0, [pc, #524]	; (8007e9c <_dtoa_r+0x2e4>)
 8007c90:	6018      	str	r0, [r3, #0]
 8007c92:	1e43      	subs	r3, r0, #1
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	e7df      	b.n	8007c58 <_dtoa_r+0xa0>
 8007c98:	ec4b ab10 	vmov	d0, sl, fp
 8007c9c:	aa10      	add	r2, sp, #64	; 0x40
 8007c9e:	a911      	add	r1, sp, #68	; 0x44
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f001 ff1f 	bl	8009ae4 <__d2b>
 8007ca6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007caa:	ee08 0a10 	vmov	s16, r0
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	f000 8084 	beq.w	8007dbc <_dtoa_r+0x204>
 8007cb4:	ee19 3a90 	vmov	r3, s19
 8007cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cc0:	4656      	mov	r6, sl
 8007cc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cce:	4b74      	ldr	r3, [pc, #464]	; (8007ea0 <_dtoa_r+0x2e8>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 faff 	bl	80002d8 <__aeabi_dsub>
 8007cda:	a365      	add	r3, pc, #404	; (adr r3, 8007e70 <_dtoa_r+0x2b8>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fcb2 	bl	8000648 <__aeabi_dmul>
 8007ce4:	a364      	add	r3, pc, #400	; (adr r3, 8007e78 <_dtoa_r+0x2c0>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 faf7 	bl	80002dc <__adddf3>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	f7f8 fc3e 	bl	8000574 <__aeabi_i2d>
 8007cf8:	a361      	add	r3, pc, #388	; (adr r3, 8007e80 <_dtoa_r+0x2c8>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fca3 	bl	8000648 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fae7 	bl	80002dc <__adddf3>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	f7f8 ff49 	bl	8000ba8 <__aeabi_d2iz>
 8007d16:	2200      	movs	r2, #0
 8007d18:	9000      	str	r0, [sp, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 ff04 	bl	8000b2c <__aeabi_dcmplt>
 8007d24:	b150      	cbz	r0, 8007d3c <_dtoa_r+0x184>
 8007d26:	9800      	ldr	r0, [sp, #0]
 8007d28:	f7f8 fc24 	bl	8000574 <__aeabi_i2d>
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	f7f8 fef2 	bl	8000b18 <__aeabi_dcmpeq>
 8007d34:	b910      	cbnz	r0, 8007d3c <_dtoa_r+0x184>
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	9b00      	ldr	r3, [sp, #0]
 8007d3e:	2b16      	cmp	r3, #22
 8007d40:	d85a      	bhi.n	8007df8 <_dtoa_r+0x240>
 8007d42:	9a00      	ldr	r2, [sp, #0]
 8007d44:	4b57      	ldr	r3, [pc, #348]	; (8007ea4 <_dtoa_r+0x2ec>)
 8007d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	ec51 0b19 	vmov	r0, r1, d9
 8007d52:	f7f8 feeb 	bl	8000b2c <__aeabi_dcmplt>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d050      	beq.n	8007dfc <_dtoa_r+0x244>
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	2300      	movs	r3, #0
 8007d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d66:	1b5d      	subs	r5, r3, r5
 8007d68:	1e6b      	subs	r3, r5, #1
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	bf45      	ittet	mi
 8007d6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d72:	9304      	strmi	r3, [sp, #16]
 8007d74:	2300      	movpl	r3, #0
 8007d76:	2300      	movmi	r3, #0
 8007d78:	bf4c      	ite	mi
 8007d7a:	9305      	strmi	r3, [sp, #20]
 8007d7c:	9304      	strpl	r3, [sp, #16]
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db3d      	blt.n	8007e00 <_dtoa_r+0x248>
 8007d84:	9b05      	ldr	r3, [sp, #20]
 8007d86:	9a00      	ldr	r2, [sp, #0]
 8007d88:	920a      	str	r2, [sp, #40]	; 0x28
 8007d8a:	4413      	add	r3, r2
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	f200 8089 	bhi.w	8007eac <_dtoa_r+0x2f4>
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	bfc4      	itt	gt
 8007d9e:	3b04      	subgt	r3, #4
 8007da0:	9306      	strgt	r3, [sp, #24]
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	f1a3 0302 	sub.w	r3, r3, #2
 8007da8:	bfcc      	ite	gt
 8007daa:	2500      	movgt	r5, #0
 8007dac:	2501      	movle	r5, #1
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	f200 8087 	bhi.w	8007ec2 <_dtoa_r+0x30a>
 8007db4:	e8df f003 	tbb	[pc, r3]
 8007db8:	59383a2d 	.word	0x59383a2d
 8007dbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007dc0:	441d      	add	r5, r3
 8007dc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	bfc1      	itttt	gt
 8007dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dda:	bfda      	itte	le
 8007ddc:	f1c3 0320 	rsble	r3, r3, #32
 8007de0:	fa06 f003 	lslle.w	r0, r6, r3
 8007de4:	4318      	orrgt	r0, r3
 8007de6:	f7f8 fbb5 	bl	8000554 <__aeabi_ui2d>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4606      	mov	r6, r0
 8007dee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007df2:	3d01      	subs	r5, #1
 8007df4:	930e      	str	r3, [sp, #56]	; 0x38
 8007df6:	e76a      	b.n	8007cce <_dtoa_r+0x116>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e7b2      	b.n	8007d62 <_dtoa_r+0x1aa>
 8007dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dfe:	e7b1      	b.n	8007d64 <_dtoa_r+0x1ac>
 8007e00:	9b04      	ldr	r3, [sp, #16]
 8007e02:	9a00      	ldr	r2, [sp, #0]
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	4253      	negs	r3, r2
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e10:	e7bf      	b.n	8007d92 <_dtoa_r+0x1da>
 8007e12:	2300      	movs	r3, #0
 8007e14:	9308      	str	r3, [sp, #32]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dc55      	bgt.n	8007ec8 <_dtoa_r+0x310>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e22:	461a      	mov	r2, r3
 8007e24:	9209      	str	r2, [sp, #36]	; 0x24
 8007e26:	e00c      	b.n	8007e42 <_dtoa_r+0x28a>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e7f3      	b.n	8007e14 <_dtoa_r+0x25c>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e30:	9308      	str	r3, [sp, #32]
 8007e32:	9b00      	ldr	r3, [sp, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	bfb8      	it	lt
 8007e40:	2301      	movlt	r3, #1
 8007e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e44:	2200      	movs	r2, #0
 8007e46:	6042      	str	r2, [r0, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	f102 0614 	add.w	r6, r2, #20
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	6841      	ldr	r1, [r0, #4]
 8007e52:	d93d      	bls.n	8007ed0 <_dtoa_r+0x318>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 fa57 	bl	8009308 <_Balloc>
 8007e5a:	9001      	str	r0, [sp, #4]
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d13b      	bne.n	8007ed8 <_dtoa_r+0x320>
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <_dtoa_r+0x2f0>)
 8007e62:	4602      	mov	r2, r0
 8007e64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e68:	e6c0      	b.n	8007bec <_dtoa_r+0x34>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e7df      	b.n	8007e2e <_dtoa_r+0x276>
 8007e6e:	bf00      	nop
 8007e70:	636f4361 	.word	0x636f4361
 8007e74:	3fd287a7 	.word	0x3fd287a7
 8007e78:	8b60c8b3 	.word	0x8b60c8b3
 8007e7c:	3fc68a28 	.word	0x3fc68a28
 8007e80:	509f79fb 	.word	0x509f79fb
 8007e84:	3fd34413 	.word	0x3fd34413
 8007e88:	0800aae6 	.word	0x0800aae6
 8007e8c:	0800aafd 	.word	0x0800aafd
 8007e90:	7ff00000 	.word	0x7ff00000
 8007e94:	0800aae2 	.word	0x0800aae2
 8007e98:	0800aad9 	.word	0x0800aad9
 8007e9c:	0800a95d 	.word	0x0800a95d
 8007ea0:	3ff80000 	.word	0x3ff80000
 8007ea4:	0800acd0 	.word	0x0800acd0
 8007ea8:	0800ab58 	.word	0x0800ab58
 8007eac:	2501      	movs	r5, #1
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9306      	str	r3, [sp, #24]
 8007eb2:	9508      	str	r5, [sp, #32]
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2312      	movs	r3, #18
 8007ec0:	e7b0      	b.n	8007e24 <_dtoa_r+0x26c>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	9308      	str	r3, [sp, #32]
 8007ec6:	e7f5      	b.n	8007eb4 <_dtoa_r+0x2fc>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ece:	e7b8      	b.n	8007e42 <_dtoa_r+0x28a>
 8007ed0:	3101      	adds	r1, #1
 8007ed2:	6041      	str	r1, [r0, #4]
 8007ed4:	0052      	lsls	r2, r2, #1
 8007ed6:	e7b8      	b.n	8007e4a <_dtoa_r+0x292>
 8007ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eda:	9a01      	ldr	r2, [sp, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	2b0e      	cmp	r3, #14
 8007ee2:	f200 809d 	bhi.w	8008020 <_dtoa_r+0x468>
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	f000 809a 	beq.w	8008020 <_dtoa_r+0x468>
 8007eec:	9b00      	ldr	r3, [sp, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd32      	ble.n	8007f58 <_dtoa_r+0x3a0>
 8007ef2:	4ab7      	ldr	r2, [pc, #732]	; (80081d0 <_dtoa_r+0x618>)
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f00:	9b00      	ldr	r3, [sp, #0]
 8007f02:	05d8      	lsls	r0, r3, #23
 8007f04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f08:	d516      	bpl.n	8007f38 <_dtoa_r+0x380>
 8007f0a:	4bb2      	ldr	r3, [pc, #712]	; (80081d4 <_dtoa_r+0x61c>)
 8007f0c:	ec51 0b19 	vmov	r0, r1, d9
 8007f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f14:	f7f8 fcc2 	bl	800089c <__aeabi_ddiv>
 8007f18:	f007 070f 	and.w	r7, r7, #15
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	468b      	mov	fp, r1
 8007f20:	2503      	movs	r5, #3
 8007f22:	4eac      	ldr	r6, [pc, #688]	; (80081d4 <_dtoa_r+0x61c>)
 8007f24:	b957      	cbnz	r7, 8007f3c <_dtoa_r+0x384>
 8007f26:	4642      	mov	r2, r8
 8007f28:	464b      	mov	r3, r9
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	f7f8 fcb5 	bl	800089c <__aeabi_ddiv>
 8007f32:	4682      	mov	sl, r0
 8007f34:	468b      	mov	fp, r1
 8007f36:	e028      	b.n	8007f8a <_dtoa_r+0x3d2>
 8007f38:	2502      	movs	r5, #2
 8007f3a:	e7f2      	b.n	8007f22 <_dtoa_r+0x36a>
 8007f3c:	07f9      	lsls	r1, r7, #31
 8007f3e:	d508      	bpl.n	8007f52 <_dtoa_r+0x39a>
 8007f40:	4640      	mov	r0, r8
 8007f42:	4649      	mov	r1, r9
 8007f44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f48:	f7f8 fb7e 	bl	8000648 <__aeabi_dmul>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4689      	mov	r9, r1
 8007f52:	107f      	asrs	r7, r7, #1
 8007f54:	3608      	adds	r6, #8
 8007f56:	e7e5      	b.n	8007f24 <_dtoa_r+0x36c>
 8007f58:	f000 809b 	beq.w	8008092 <_dtoa_r+0x4da>
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	4f9d      	ldr	r7, [pc, #628]	; (80081d4 <_dtoa_r+0x61c>)
 8007f60:	425e      	negs	r6, r3
 8007f62:	4b9b      	ldr	r3, [pc, #620]	; (80081d0 <_dtoa_r+0x618>)
 8007f64:	f006 020f 	and.w	r2, r6, #15
 8007f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	ec51 0b19 	vmov	r0, r1, d9
 8007f74:	f7f8 fb68 	bl	8000648 <__aeabi_dmul>
 8007f78:	1136      	asrs	r6, r6, #4
 8007f7a:	4682      	mov	sl, r0
 8007f7c:	468b      	mov	fp, r1
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2502      	movs	r5, #2
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	d17a      	bne.n	800807c <_dtoa_r+0x4c4>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1d3      	bne.n	8007f32 <_dtoa_r+0x37a>
 8007f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 8082 	beq.w	8008096 <_dtoa_r+0x4de>
 8007f92:	4b91      	ldr	r3, [pc, #580]	; (80081d8 <_dtoa_r+0x620>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	4650      	mov	r0, sl
 8007f98:	4659      	mov	r1, fp
 8007f9a:	f7f8 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d079      	beq.n	8008096 <_dtoa_r+0x4de>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d076      	beq.n	8008096 <_dtoa_r+0x4de>
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dd36      	ble.n	800801c <_dtoa_r+0x464>
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	4659      	mov	r1, fp
 8007fb4:	1e5f      	subs	r7, r3, #1
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4b88      	ldr	r3, [pc, #544]	; (80081dc <_dtoa_r+0x624>)
 8007fba:	f7f8 fb45 	bl	8000648 <__aeabi_dmul>
 8007fbe:	9e02      	ldr	r6, [sp, #8]
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	468b      	mov	fp, r1
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f7f8 fad4 	bl	8000574 <__aeabi_i2d>
 8007fcc:	4652      	mov	r2, sl
 8007fce:	465b      	mov	r3, fp
 8007fd0:	f7f8 fb3a 	bl	8000648 <__aeabi_dmul>
 8007fd4:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <_dtoa_r+0x628>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f7f8 f980 	bl	80002dc <__adddf3>
 8007fdc:	46d0      	mov	r8, sl
 8007fde:	46d9      	mov	r9, fp
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	d158      	bne.n	800809c <_dtoa_r+0x4e4>
 8007fea:	4b7e      	ldr	r3, [pc, #504]	; (80081e4 <_dtoa_r+0x62c>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 f971 	bl	80002d8 <__aeabi_dsub>
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	4680      	mov	r8, r0
 8007ffc:	4689      	mov	r9, r1
 8007ffe:	f7f8 fdb3 	bl	8000b68 <__aeabi_dcmpgt>
 8008002:	2800      	cmp	r0, #0
 8008004:	f040 8295 	bne.w	8008532 <_dtoa_r+0x97a>
 8008008:	4652      	mov	r2, sl
 800800a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fd8b 	bl	8000b2c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	f040 8289 	bne.w	800852e <_dtoa_r+0x976>
 800801c:	ec5b ab19 	vmov	sl, fp, d9
 8008020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008022:	2b00      	cmp	r3, #0
 8008024:	f2c0 8148 	blt.w	80082b8 <_dtoa_r+0x700>
 8008028:	9a00      	ldr	r2, [sp, #0]
 800802a:	2a0e      	cmp	r2, #14
 800802c:	f300 8144 	bgt.w	80082b8 <_dtoa_r+0x700>
 8008030:	4b67      	ldr	r3, [pc, #412]	; (80081d0 <_dtoa_r+0x618>)
 8008032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	f280 80d5 	bge.w	80081ec <_dtoa_r+0x634>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f300 80d1 	bgt.w	80081ec <_dtoa_r+0x634>
 800804a:	f040 826f 	bne.w	800852c <_dtoa_r+0x974>
 800804e:	4b65      	ldr	r3, [pc, #404]	; (80081e4 <_dtoa_r+0x62c>)
 8008050:	2200      	movs	r2, #0
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 faf7 	bl	8000648 <__aeabi_dmul>
 800805a:	4652      	mov	r2, sl
 800805c:	465b      	mov	r3, fp
 800805e:	f7f8 fd79 	bl	8000b54 <__aeabi_dcmpge>
 8008062:	9e03      	ldr	r6, [sp, #12]
 8008064:	4637      	mov	r7, r6
 8008066:	2800      	cmp	r0, #0
 8008068:	f040 8245 	bne.w	80084f6 <_dtoa_r+0x93e>
 800806c:	9d01      	ldr	r5, [sp, #4]
 800806e:	2331      	movs	r3, #49	; 0x31
 8008070:	f805 3b01 	strb.w	r3, [r5], #1
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	e240      	b.n	80084fe <_dtoa_r+0x946>
 800807c:	07f2      	lsls	r2, r6, #31
 800807e:	d505      	bpl.n	800808c <_dtoa_r+0x4d4>
 8008080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008084:	f7f8 fae0 	bl	8000648 <__aeabi_dmul>
 8008088:	3501      	adds	r5, #1
 800808a:	2301      	movs	r3, #1
 800808c:	1076      	asrs	r6, r6, #1
 800808e:	3708      	adds	r7, #8
 8008090:	e777      	b.n	8007f82 <_dtoa_r+0x3ca>
 8008092:	2502      	movs	r5, #2
 8008094:	e779      	b.n	8007f8a <_dtoa_r+0x3d2>
 8008096:	9f00      	ldr	r7, [sp, #0]
 8008098:	9e03      	ldr	r6, [sp, #12]
 800809a:	e794      	b.n	8007fc6 <_dtoa_r+0x40e>
 800809c:	9901      	ldr	r1, [sp, #4]
 800809e:	4b4c      	ldr	r3, [pc, #304]	; (80081d0 <_dtoa_r+0x618>)
 80080a0:	4431      	add	r1, r6
 80080a2:	910d      	str	r1, [sp, #52]	; 0x34
 80080a4:	9908      	ldr	r1, [sp, #32]
 80080a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d043      	beq.n	800813a <_dtoa_r+0x582>
 80080b2:	494d      	ldr	r1, [pc, #308]	; (80081e8 <_dtoa_r+0x630>)
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7f8 fbf1 	bl	800089c <__aeabi_ddiv>
 80080ba:	4652      	mov	r2, sl
 80080bc:	465b      	mov	r3, fp
 80080be:	f7f8 f90b 	bl	80002d8 <__aeabi_dsub>
 80080c2:	9d01      	ldr	r5, [sp, #4]
 80080c4:	4682      	mov	sl, r0
 80080c6:	468b      	mov	fp, r1
 80080c8:	4649      	mov	r1, r9
 80080ca:	4640      	mov	r0, r8
 80080cc:	f7f8 fd6c 	bl	8000ba8 <__aeabi_d2iz>
 80080d0:	4606      	mov	r6, r0
 80080d2:	f7f8 fa4f 	bl	8000574 <__aeabi_i2d>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f8fb 	bl	80002d8 <__aeabi_dsub>
 80080e2:	3630      	adds	r6, #48	; 0x30
 80080e4:	f805 6b01 	strb.w	r6, [r5], #1
 80080e8:	4652      	mov	r2, sl
 80080ea:	465b      	mov	r3, fp
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	f7f8 fd1c 	bl	8000b2c <__aeabi_dcmplt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d163      	bne.n	80081c0 <_dtoa_r+0x608>
 80080f8:	4642      	mov	r2, r8
 80080fa:	464b      	mov	r3, r9
 80080fc:	4936      	ldr	r1, [pc, #216]	; (80081d8 <_dtoa_r+0x620>)
 80080fe:	2000      	movs	r0, #0
 8008100:	f7f8 f8ea 	bl	80002d8 <__aeabi_dsub>
 8008104:	4652      	mov	r2, sl
 8008106:	465b      	mov	r3, fp
 8008108:	f7f8 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 80b5 	bne.w	800827c <_dtoa_r+0x6c4>
 8008112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008114:	429d      	cmp	r5, r3
 8008116:	d081      	beq.n	800801c <_dtoa_r+0x464>
 8008118:	4b30      	ldr	r3, [pc, #192]	; (80081dc <_dtoa_r+0x624>)
 800811a:	2200      	movs	r2, #0
 800811c:	4650      	mov	r0, sl
 800811e:	4659      	mov	r1, fp
 8008120:	f7f8 fa92 	bl	8000648 <__aeabi_dmul>
 8008124:	4b2d      	ldr	r3, [pc, #180]	; (80081dc <_dtoa_r+0x624>)
 8008126:	4682      	mov	sl, r0
 8008128:	468b      	mov	fp, r1
 800812a:	4640      	mov	r0, r8
 800812c:	4649      	mov	r1, r9
 800812e:	2200      	movs	r2, #0
 8008130:	f7f8 fa8a 	bl	8000648 <__aeabi_dmul>
 8008134:	4680      	mov	r8, r0
 8008136:	4689      	mov	r9, r1
 8008138:	e7c6      	b.n	80080c8 <_dtoa_r+0x510>
 800813a:	4650      	mov	r0, sl
 800813c:	4659      	mov	r1, fp
 800813e:	f7f8 fa83 	bl	8000648 <__aeabi_dmul>
 8008142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008144:	9d01      	ldr	r5, [sp, #4]
 8008146:	930f      	str	r3, [sp, #60]	; 0x3c
 8008148:	4682      	mov	sl, r0
 800814a:	468b      	mov	fp, r1
 800814c:	4649      	mov	r1, r9
 800814e:	4640      	mov	r0, r8
 8008150:	f7f8 fd2a 	bl	8000ba8 <__aeabi_d2iz>
 8008154:	4606      	mov	r6, r0
 8008156:	f7f8 fa0d 	bl	8000574 <__aeabi_i2d>
 800815a:	3630      	adds	r6, #48	; 0x30
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	f7f8 f8b8 	bl	80002d8 <__aeabi_dsub>
 8008168:	f805 6b01 	strb.w	r6, [r5], #1
 800816c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816e:	429d      	cmp	r5, r3
 8008170:	4680      	mov	r8, r0
 8008172:	4689      	mov	r9, r1
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	d124      	bne.n	80081c4 <_dtoa_r+0x60c>
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <_dtoa_r+0x630>)
 800817c:	4650      	mov	r0, sl
 800817e:	4659      	mov	r1, fp
 8008180:	f7f8 f8ac 	bl	80002dc <__adddf3>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4640      	mov	r0, r8
 800818a:	4649      	mov	r1, r9
 800818c:	f7f8 fcec 	bl	8000b68 <__aeabi_dcmpgt>
 8008190:	2800      	cmp	r0, #0
 8008192:	d173      	bne.n	800827c <_dtoa_r+0x6c4>
 8008194:	4652      	mov	r2, sl
 8008196:	465b      	mov	r3, fp
 8008198:	4913      	ldr	r1, [pc, #76]	; (80081e8 <_dtoa_r+0x630>)
 800819a:	2000      	movs	r0, #0
 800819c:	f7f8 f89c 	bl	80002d8 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4640      	mov	r0, r8
 80081a6:	4649      	mov	r1, r9
 80081a8:	f7f8 fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f43f af35 	beq.w	800801c <_dtoa_r+0x464>
 80081b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081b4:	1e6b      	subs	r3, r5, #1
 80081b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081bc:	2b30      	cmp	r3, #48	; 0x30
 80081be:	d0f8      	beq.n	80081b2 <_dtoa_r+0x5fa>
 80081c0:	9700      	str	r7, [sp, #0]
 80081c2:	e049      	b.n	8008258 <_dtoa_r+0x6a0>
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <_dtoa_r+0x624>)
 80081c6:	f7f8 fa3f 	bl	8000648 <__aeabi_dmul>
 80081ca:	4680      	mov	r8, r0
 80081cc:	4689      	mov	r9, r1
 80081ce:	e7bd      	b.n	800814c <_dtoa_r+0x594>
 80081d0:	0800acd0 	.word	0x0800acd0
 80081d4:	0800aca8 	.word	0x0800aca8
 80081d8:	3ff00000 	.word	0x3ff00000
 80081dc:	40240000 	.word	0x40240000
 80081e0:	401c0000 	.word	0x401c0000
 80081e4:	40140000 	.word	0x40140000
 80081e8:	3fe00000 	.word	0x3fe00000
 80081ec:	9d01      	ldr	r5, [sp, #4]
 80081ee:	4656      	mov	r6, sl
 80081f0:	465f      	mov	r7, fp
 80081f2:	4642      	mov	r2, r8
 80081f4:	464b      	mov	r3, r9
 80081f6:	4630      	mov	r0, r6
 80081f8:	4639      	mov	r1, r7
 80081fa:	f7f8 fb4f 	bl	800089c <__aeabi_ddiv>
 80081fe:	f7f8 fcd3 	bl	8000ba8 <__aeabi_d2iz>
 8008202:	4682      	mov	sl, r0
 8008204:	f7f8 f9b6 	bl	8000574 <__aeabi_i2d>
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	f7f8 fa1c 	bl	8000648 <__aeabi_dmul>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800821c:	f7f8 f85c 	bl	80002d8 <__aeabi_dsub>
 8008220:	f805 6b01 	strb.w	r6, [r5], #1
 8008224:	9e01      	ldr	r6, [sp, #4]
 8008226:	9f03      	ldr	r7, [sp, #12]
 8008228:	1bae      	subs	r6, r5, r6
 800822a:	42b7      	cmp	r7, r6
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	d135      	bne.n	800829e <_dtoa_r+0x6e6>
 8008232:	f7f8 f853 	bl	80002dc <__adddf3>
 8008236:	4642      	mov	r2, r8
 8008238:	464b      	mov	r3, r9
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	f7f8 fc93 	bl	8000b68 <__aeabi_dcmpgt>
 8008242:	b9d0      	cbnz	r0, 800827a <_dtoa_r+0x6c2>
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	f7f8 fc64 	bl	8000b18 <__aeabi_dcmpeq>
 8008250:	b110      	cbz	r0, 8008258 <_dtoa_r+0x6a0>
 8008252:	f01a 0f01 	tst.w	sl, #1
 8008256:	d110      	bne.n	800827a <_dtoa_r+0x6c2>
 8008258:	4620      	mov	r0, r4
 800825a:	ee18 1a10 	vmov	r1, s16
 800825e:	f001 f893 	bl	8009388 <_Bfree>
 8008262:	2300      	movs	r3, #0
 8008264:	9800      	ldr	r0, [sp, #0]
 8008266:	702b      	strb	r3, [r5, #0]
 8008268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800826a:	3001      	adds	r0, #1
 800826c:	6018      	str	r0, [r3, #0]
 800826e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008270:	2b00      	cmp	r3, #0
 8008272:	f43f acf1 	beq.w	8007c58 <_dtoa_r+0xa0>
 8008276:	601d      	str	r5, [r3, #0]
 8008278:	e4ee      	b.n	8007c58 <_dtoa_r+0xa0>
 800827a:	9f00      	ldr	r7, [sp, #0]
 800827c:	462b      	mov	r3, r5
 800827e:	461d      	mov	r5, r3
 8008280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008284:	2a39      	cmp	r2, #57	; 0x39
 8008286:	d106      	bne.n	8008296 <_dtoa_r+0x6de>
 8008288:	9a01      	ldr	r2, [sp, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d1f7      	bne.n	800827e <_dtoa_r+0x6c6>
 800828e:	9901      	ldr	r1, [sp, #4]
 8008290:	2230      	movs	r2, #48	; 0x30
 8008292:	3701      	adds	r7, #1
 8008294:	700a      	strb	r2, [r1, #0]
 8008296:	781a      	ldrb	r2, [r3, #0]
 8008298:	3201      	adds	r2, #1
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e790      	b.n	80081c0 <_dtoa_r+0x608>
 800829e:	4ba6      	ldr	r3, [pc, #664]	; (8008538 <_dtoa_r+0x980>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	f7f8 f9d1 	bl	8000648 <__aeabi_dmul>
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	f7f8 fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d09d      	beq.n	80081f2 <_dtoa_r+0x63a>
 80082b6:	e7cf      	b.n	8008258 <_dtoa_r+0x6a0>
 80082b8:	9a08      	ldr	r2, [sp, #32]
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	f000 80d7 	beq.w	800846e <_dtoa_r+0x8b6>
 80082c0:	9a06      	ldr	r2, [sp, #24]
 80082c2:	2a01      	cmp	r2, #1
 80082c4:	f300 80ba 	bgt.w	800843c <_dtoa_r+0x884>
 80082c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	f000 80b2 	beq.w	8008434 <_dtoa_r+0x87c>
 80082d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082d4:	9e07      	ldr	r6, [sp, #28]
 80082d6:	9d04      	ldr	r5, [sp, #16]
 80082d8:	9a04      	ldr	r2, [sp, #16]
 80082da:	441a      	add	r2, r3
 80082dc:	9204      	str	r2, [sp, #16]
 80082de:	9a05      	ldr	r2, [sp, #20]
 80082e0:	2101      	movs	r1, #1
 80082e2:	441a      	add	r2, r3
 80082e4:	4620      	mov	r0, r4
 80082e6:	9205      	str	r2, [sp, #20]
 80082e8:	f001 f950 	bl	800958c <__i2b>
 80082ec:	4607      	mov	r7, r0
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	dd0c      	ble.n	800830c <_dtoa_r+0x754>
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dd09      	ble.n	800830c <_dtoa_r+0x754>
 80082f8:	42ab      	cmp	r3, r5
 80082fa:	9a04      	ldr	r2, [sp, #16]
 80082fc:	bfa8      	it	ge
 80082fe:	462b      	movge	r3, r5
 8008300:	1ad2      	subs	r2, r2, r3
 8008302:	9204      	str	r2, [sp, #16]
 8008304:	9a05      	ldr	r2, [sp, #20]
 8008306:	1aed      	subs	r5, r5, r3
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	b31b      	cbz	r3, 8008358 <_dtoa_r+0x7a0>
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 80af 	beq.w	8008476 <_dtoa_r+0x8be>
 8008318:	2e00      	cmp	r6, #0
 800831a:	dd13      	ble.n	8008344 <_dtoa_r+0x78c>
 800831c:	4639      	mov	r1, r7
 800831e:	4632      	mov	r2, r6
 8008320:	4620      	mov	r0, r4
 8008322:	f001 f9f3 	bl	800970c <__pow5mult>
 8008326:	ee18 2a10 	vmov	r2, s16
 800832a:	4601      	mov	r1, r0
 800832c:	4607      	mov	r7, r0
 800832e:	4620      	mov	r0, r4
 8008330:	f001 f942 	bl	80095b8 <__multiply>
 8008334:	ee18 1a10 	vmov	r1, s16
 8008338:	4680      	mov	r8, r0
 800833a:	4620      	mov	r0, r4
 800833c:	f001 f824 	bl	8009388 <_Bfree>
 8008340:	ee08 8a10 	vmov	s16, r8
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	1b9a      	subs	r2, r3, r6
 8008348:	d006      	beq.n	8008358 <_dtoa_r+0x7a0>
 800834a:	ee18 1a10 	vmov	r1, s16
 800834e:	4620      	mov	r0, r4
 8008350:	f001 f9dc 	bl	800970c <__pow5mult>
 8008354:	ee08 0a10 	vmov	s16, r0
 8008358:	2101      	movs	r1, #1
 800835a:	4620      	mov	r0, r4
 800835c:	f001 f916 	bl	800958c <__i2b>
 8008360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008362:	2b00      	cmp	r3, #0
 8008364:	4606      	mov	r6, r0
 8008366:	f340 8088 	ble.w	800847a <_dtoa_r+0x8c2>
 800836a:	461a      	mov	r2, r3
 800836c:	4601      	mov	r1, r0
 800836e:	4620      	mov	r0, r4
 8008370:	f001 f9cc 	bl	800970c <__pow5mult>
 8008374:	9b06      	ldr	r3, [sp, #24]
 8008376:	2b01      	cmp	r3, #1
 8008378:	4606      	mov	r6, r0
 800837a:	f340 8081 	ble.w	8008480 <_dtoa_r+0x8c8>
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	6933      	ldr	r3, [r6, #16]
 8008384:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008388:	6918      	ldr	r0, [r3, #16]
 800838a:	f001 f8af 	bl	80094ec <__hi0bits>
 800838e:	f1c0 0020 	rsb	r0, r0, #32
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	4418      	add	r0, r3
 8008396:	f010 001f 	ands.w	r0, r0, #31
 800839a:	f000 8092 	beq.w	80084c2 <_dtoa_r+0x90a>
 800839e:	f1c0 0320 	rsb	r3, r0, #32
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	f340 808a 	ble.w	80084bc <_dtoa_r+0x904>
 80083a8:	f1c0 001c 	rsb	r0, r0, #28
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	4403      	add	r3, r0
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	9b05      	ldr	r3, [sp, #20]
 80083b4:	4403      	add	r3, r0
 80083b6:	4405      	add	r5, r0
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dd07      	ble.n	80083d0 <_dtoa_r+0x818>
 80083c0:	ee18 1a10 	vmov	r1, s16
 80083c4:	461a      	mov	r2, r3
 80083c6:	4620      	mov	r0, r4
 80083c8:	f001 f9fa 	bl	80097c0 <__lshift>
 80083cc:	ee08 0a10 	vmov	s16, r0
 80083d0:	9b05      	ldr	r3, [sp, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dd05      	ble.n	80083e2 <_dtoa_r+0x82a>
 80083d6:	4631      	mov	r1, r6
 80083d8:	461a      	mov	r2, r3
 80083da:	4620      	mov	r0, r4
 80083dc:	f001 f9f0 	bl	80097c0 <__lshift>
 80083e0:	4606      	mov	r6, r0
 80083e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d06e      	beq.n	80084c6 <_dtoa_r+0x90e>
 80083e8:	ee18 0a10 	vmov	r0, s16
 80083ec:	4631      	mov	r1, r6
 80083ee:	f001 fa57 	bl	80098a0 <__mcmp>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	da67      	bge.n	80084c6 <_dtoa_r+0x90e>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	ee18 1a10 	vmov	r1, s16
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	220a      	movs	r2, #10
 8008402:	2300      	movs	r3, #0
 8008404:	4620      	mov	r0, r4
 8008406:	f000 ffe1 	bl	80093cc <__multadd>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	ee08 0a10 	vmov	s16, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 81b1 	beq.w	8008778 <_dtoa_r+0xbc0>
 8008416:	2300      	movs	r3, #0
 8008418:	4639      	mov	r1, r7
 800841a:	220a      	movs	r2, #10
 800841c:	4620      	mov	r0, r4
 800841e:	f000 ffd5 	bl	80093cc <__multadd>
 8008422:	9b02      	ldr	r3, [sp, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	4607      	mov	r7, r0
 8008428:	f300 808e 	bgt.w	8008548 <_dtoa_r+0x990>
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	2b02      	cmp	r3, #2
 8008430:	dc51      	bgt.n	80084d6 <_dtoa_r+0x91e>
 8008432:	e089      	b.n	8008548 <_dtoa_r+0x990>
 8008434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800843a:	e74b      	b.n	80082d4 <_dtoa_r+0x71c>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1e5e      	subs	r6, r3, #1
 8008440:	9b07      	ldr	r3, [sp, #28]
 8008442:	42b3      	cmp	r3, r6
 8008444:	bfbf      	itttt	lt
 8008446:	9b07      	ldrlt	r3, [sp, #28]
 8008448:	9607      	strlt	r6, [sp, #28]
 800844a:	1af2      	sublt	r2, r6, r3
 800844c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800844e:	bfb6      	itet	lt
 8008450:	189b      	addlt	r3, r3, r2
 8008452:	1b9e      	subge	r6, r3, r6
 8008454:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	bfb8      	it	lt
 800845a:	2600      	movlt	r6, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfb7      	itett	lt
 8008460:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008464:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008468:	1a9d      	sublt	r5, r3, r2
 800846a:	2300      	movlt	r3, #0
 800846c:	e734      	b.n	80082d8 <_dtoa_r+0x720>
 800846e:	9e07      	ldr	r6, [sp, #28]
 8008470:	9d04      	ldr	r5, [sp, #16]
 8008472:	9f08      	ldr	r7, [sp, #32]
 8008474:	e73b      	b.n	80082ee <_dtoa_r+0x736>
 8008476:	9a07      	ldr	r2, [sp, #28]
 8008478:	e767      	b.n	800834a <_dtoa_r+0x792>
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	2b01      	cmp	r3, #1
 800847e:	dc18      	bgt.n	80084b2 <_dtoa_r+0x8fa>
 8008480:	f1ba 0f00 	cmp.w	sl, #0
 8008484:	d115      	bne.n	80084b2 <_dtoa_r+0x8fa>
 8008486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800848a:	b993      	cbnz	r3, 80084b2 <_dtoa_r+0x8fa>
 800848c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008490:	0d1b      	lsrs	r3, r3, #20
 8008492:	051b      	lsls	r3, r3, #20
 8008494:	b183      	cbz	r3, 80084b8 <_dtoa_r+0x900>
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	3301      	adds	r3, #1
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	3301      	adds	r3, #1
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	f04f 0801 	mov.w	r8, #1
 80084a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f47f af6a 	bne.w	8008382 <_dtoa_r+0x7ca>
 80084ae:	2001      	movs	r0, #1
 80084b0:	e76f      	b.n	8008392 <_dtoa_r+0x7da>
 80084b2:	f04f 0800 	mov.w	r8, #0
 80084b6:	e7f6      	b.n	80084a6 <_dtoa_r+0x8ee>
 80084b8:	4698      	mov	r8, r3
 80084ba:	e7f4      	b.n	80084a6 <_dtoa_r+0x8ee>
 80084bc:	f43f af7d 	beq.w	80083ba <_dtoa_r+0x802>
 80084c0:	4618      	mov	r0, r3
 80084c2:	301c      	adds	r0, #28
 80084c4:	e772      	b.n	80083ac <_dtoa_r+0x7f4>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc37      	bgt.n	800853c <_dtoa_r+0x984>
 80084cc:	9b06      	ldr	r3, [sp, #24]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	dd34      	ble.n	800853c <_dtoa_r+0x984>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	9b02      	ldr	r3, [sp, #8]
 80084d8:	b96b      	cbnz	r3, 80084f6 <_dtoa_r+0x93e>
 80084da:	4631      	mov	r1, r6
 80084dc:	2205      	movs	r2, #5
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 ff74 	bl	80093cc <__multadd>
 80084e4:	4601      	mov	r1, r0
 80084e6:	4606      	mov	r6, r0
 80084e8:	ee18 0a10 	vmov	r0, s16
 80084ec:	f001 f9d8 	bl	80098a0 <__mcmp>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	f73f adbb 	bgt.w	800806c <_dtoa_r+0x4b4>
 80084f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f8:	9d01      	ldr	r5, [sp, #4]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	f04f 0800 	mov.w	r8, #0
 8008502:	4631      	mov	r1, r6
 8008504:	4620      	mov	r0, r4
 8008506:	f000 ff3f 	bl	8009388 <_Bfree>
 800850a:	2f00      	cmp	r7, #0
 800850c:	f43f aea4 	beq.w	8008258 <_dtoa_r+0x6a0>
 8008510:	f1b8 0f00 	cmp.w	r8, #0
 8008514:	d005      	beq.n	8008522 <_dtoa_r+0x96a>
 8008516:	45b8      	cmp	r8, r7
 8008518:	d003      	beq.n	8008522 <_dtoa_r+0x96a>
 800851a:	4641      	mov	r1, r8
 800851c:	4620      	mov	r0, r4
 800851e:	f000 ff33 	bl	8009388 <_Bfree>
 8008522:	4639      	mov	r1, r7
 8008524:	4620      	mov	r0, r4
 8008526:	f000 ff2f 	bl	8009388 <_Bfree>
 800852a:	e695      	b.n	8008258 <_dtoa_r+0x6a0>
 800852c:	2600      	movs	r6, #0
 800852e:	4637      	mov	r7, r6
 8008530:	e7e1      	b.n	80084f6 <_dtoa_r+0x93e>
 8008532:	9700      	str	r7, [sp, #0]
 8008534:	4637      	mov	r7, r6
 8008536:	e599      	b.n	800806c <_dtoa_r+0x4b4>
 8008538:	40240000 	.word	0x40240000
 800853c:	9b08      	ldr	r3, [sp, #32]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80ca 	beq.w	80086d8 <_dtoa_r+0xb20>
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	2d00      	cmp	r5, #0
 800854a:	dd05      	ble.n	8008558 <_dtoa_r+0x9a0>
 800854c:	4639      	mov	r1, r7
 800854e:	462a      	mov	r2, r5
 8008550:	4620      	mov	r0, r4
 8008552:	f001 f935 	bl	80097c0 <__lshift>
 8008556:	4607      	mov	r7, r0
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d05b      	beq.n	8008616 <_dtoa_r+0xa5e>
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fed1 	bl	8009308 <_Balloc>
 8008566:	4605      	mov	r5, r0
 8008568:	b928      	cbnz	r0, 8008576 <_dtoa_r+0x9be>
 800856a:	4b87      	ldr	r3, [pc, #540]	; (8008788 <_dtoa_r+0xbd0>)
 800856c:	4602      	mov	r2, r0
 800856e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008572:	f7ff bb3b 	b.w	8007bec <_dtoa_r+0x34>
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	3202      	adds	r2, #2
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	f107 010c 	add.w	r1, r7, #12
 8008580:	300c      	adds	r0, #12
 8008582:	f000 feb3 	bl	80092ec <memcpy>
 8008586:	2201      	movs	r2, #1
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f001 f918 	bl	80097c0 <__lshift>
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	f103 0901 	add.w	r9, r3, #1
 8008596:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800859a:	4413      	add	r3, r2
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	f00a 0301 	and.w	r3, sl, #1
 80085a2:	46b8      	mov	r8, r7
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	4607      	mov	r7, r0
 80085a8:	4631      	mov	r1, r6
 80085aa:	ee18 0a10 	vmov	r0, s16
 80085ae:	f7ff fa77 	bl	8007aa0 <quorem>
 80085b2:	4641      	mov	r1, r8
 80085b4:	9002      	str	r0, [sp, #8]
 80085b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085ba:	ee18 0a10 	vmov	r0, s16
 80085be:	f001 f96f 	bl	80098a0 <__mcmp>
 80085c2:	463a      	mov	r2, r7
 80085c4:	9003      	str	r0, [sp, #12]
 80085c6:	4631      	mov	r1, r6
 80085c8:	4620      	mov	r0, r4
 80085ca:	f001 f985 	bl	80098d8 <__mdiff>
 80085ce:	68c2      	ldr	r2, [r0, #12]
 80085d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80085d4:	4605      	mov	r5, r0
 80085d6:	bb02      	cbnz	r2, 800861a <_dtoa_r+0xa62>
 80085d8:	4601      	mov	r1, r0
 80085da:	ee18 0a10 	vmov	r0, s16
 80085de:	f001 f95f 	bl	80098a0 <__mcmp>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4629      	mov	r1, r5
 80085e6:	4620      	mov	r0, r4
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	f000 fecd 	bl	8009388 <_Bfree>
 80085ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085f2:	ea43 0102 	orr.w	r1, r3, r2
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	430b      	orrs	r3, r1
 80085fa:	464d      	mov	r5, r9
 80085fc:	d10f      	bne.n	800861e <_dtoa_r+0xa66>
 80085fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008602:	d02a      	beq.n	800865a <_dtoa_r+0xaa2>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd02      	ble.n	8008610 <_dtoa_r+0xa58>
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008610:	f88b a000 	strb.w	sl, [fp]
 8008614:	e775      	b.n	8008502 <_dtoa_r+0x94a>
 8008616:	4638      	mov	r0, r7
 8008618:	e7ba      	b.n	8008590 <_dtoa_r+0x9d8>
 800861a:	2201      	movs	r2, #1
 800861c:	e7e2      	b.n	80085e4 <_dtoa_r+0xa2c>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	db04      	blt.n	800862e <_dtoa_r+0xa76>
 8008624:	9906      	ldr	r1, [sp, #24]
 8008626:	430b      	orrs	r3, r1
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	430b      	orrs	r3, r1
 800862c:	d122      	bne.n	8008674 <_dtoa_r+0xabc>
 800862e:	2a00      	cmp	r2, #0
 8008630:	ddee      	ble.n	8008610 <_dtoa_r+0xa58>
 8008632:	ee18 1a10 	vmov	r1, s16
 8008636:	2201      	movs	r2, #1
 8008638:	4620      	mov	r0, r4
 800863a:	f001 f8c1 	bl	80097c0 <__lshift>
 800863e:	4631      	mov	r1, r6
 8008640:	ee08 0a10 	vmov	s16, r0
 8008644:	f001 f92c 	bl	80098a0 <__mcmp>
 8008648:	2800      	cmp	r0, #0
 800864a:	dc03      	bgt.n	8008654 <_dtoa_r+0xa9c>
 800864c:	d1e0      	bne.n	8008610 <_dtoa_r+0xa58>
 800864e:	f01a 0f01 	tst.w	sl, #1
 8008652:	d0dd      	beq.n	8008610 <_dtoa_r+0xa58>
 8008654:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008658:	d1d7      	bne.n	800860a <_dtoa_r+0xa52>
 800865a:	2339      	movs	r3, #57	; 0x39
 800865c:	f88b 3000 	strb.w	r3, [fp]
 8008660:	462b      	mov	r3, r5
 8008662:	461d      	mov	r5, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800866a:	2a39      	cmp	r2, #57	; 0x39
 800866c:	d071      	beq.n	8008752 <_dtoa_r+0xb9a>
 800866e:	3201      	adds	r2, #1
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	e746      	b.n	8008502 <_dtoa_r+0x94a>
 8008674:	2a00      	cmp	r2, #0
 8008676:	dd07      	ble.n	8008688 <_dtoa_r+0xad0>
 8008678:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800867c:	d0ed      	beq.n	800865a <_dtoa_r+0xaa2>
 800867e:	f10a 0301 	add.w	r3, sl, #1
 8008682:	f88b 3000 	strb.w	r3, [fp]
 8008686:	e73c      	b.n	8008502 <_dtoa_r+0x94a>
 8008688:	9b05      	ldr	r3, [sp, #20]
 800868a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800868e:	4599      	cmp	r9, r3
 8008690:	d047      	beq.n	8008722 <_dtoa_r+0xb6a>
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2300      	movs	r3, #0
 8008698:	220a      	movs	r2, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fe96 	bl	80093cc <__multadd>
 80086a0:	45b8      	cmp	r8, r7
 80086a2:	ee08 0a10 	vmov	s16, r0
 80086a6:	f04f 0300 	mov.w	r3, #0
 80086aa:	f04f 020a 	mov.w	r2, #10
 80086ae:	4641      	mov	r1, r8
 80086b0:	4620      	mov	r0, r4
 80086b2:	d106      	bne.n	80086c2 <_dtoa_r+0xb0a>
 80086b4:	f000 fe8a 	bl	80093cc <__multadd>
 80086b8:	4680      	mov	r8, r0
 80086ba:	4607      	mov	r7, r0
 80086bc:	f109 0901 	add.w	r9, r9, #1
 80086c0:	e772      	b.n	80085a8 <_dtoa_r+0x9f0>
 80086c2:	f000 fe83 	bl	80093cc <__multadd>
 80086c6:	4639      	mov	r1, r7
 80086c8:	4680      	mov	r8, r0
 80086ca:	2300      	movs	r3, #0
 80086cc:	220a      	movs	r2, #10
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 fe7c 	bl	80093cc <__multadd>
 80086d4:	4607      	mov	r7, r0
 80086d6:	e7f1      	b.n	80086bc <_dtoa_r+0xb04>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	9d01      	ldr	r5, [sp, #4]
 80086de:	ee18 0a10 	vmov	r0, s16
 80086e2:	4631      	mov	r1, r6
 80086e4:	f7ff f9dc 	bl	8007aa0 <quorem>
 80086e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	f805 ab01 	strb.w	sl, [r5], #1
 80086f2:	1aea      	subs	r2, r5, r3
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	4293      	cmp	r3, r2
 80086f8:	dd09      	ble.n	800870e <_dtoa_r+0xb56>
 80086fa:	ee18 1a10 	vmov	r1, s16
 80086fe:	2300      	movs	r3, #0
 8008700:	220a      	movs	r2, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fe62 	bl	80093cc <__multadd>
 8008708:	ee08 0a10 	vmov	s16, r0
 800870c:	e7e7      	b.n	80086de <_dtoa_r+0xb26>
 800870e:	9b02      	ldr	r3, [sp, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	bfc8      	it	gt
 8008714:	461d      	movgt	r5, r3
 8008716:	9b01      	ldr	r3, [sp, #4]
 8008718:	bfd8      	it	le
 800871a:	2501      	movle	r5, #1
 800871c:	441d      	add	r5, r3
 800871e:	f04f 0800 	mov.w	r8, #0
 8008722:	ee18 1a10 	vmov	r1, s16
 8008726:	2201      	movs	r2, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f001 f849 	bl	80097c0 <__lshift>
 800872e:	4631      	mov	r1, r6
 8008730:	ee08 0a10 	vmov	s16, r0
 8008734:	f001 f8b4 	bl	80098a0 <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	dc91      	bgt.n	8008660 <_dtoa_r+0xaa8>
 800873c:	d102      	bne.n	8008744 <_dtoa_r+0xb8c>
 800873e:	f01a 0f01 	tst.w	sl, #1
 8008742:	d18d      	bne.n	8008660 <_dtoa_r+0xaa8>
 8008744:	462b      	mov	r3, r5
 8008746:	461d      	mov	r5, r3
 8008748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800874c:	2a30      	cmp	r2, #48	; 0x30
 800874e:	d0fa      	beq.n	8008746 <_dtoa_r+0xb8e>
 8008750:	e6d7      	b.n	8008502 <_dtoa_r+0x94a>
 8008752:	9a01      	ldr	r2, [sp, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d184      	bne.n	8008662 <_dtoa_r+0xaaa>
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2331      	movs	r3, #49	; 0x31
 8008760:	7013      	strb	r3, [r2, #0]
 8008762:	e6ce      	b.n	8008502 <_dtoa_r+0x94a>
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <_dtoa_r+0xbd4>)
 8008766:	f7ff ba95 	b.w	8007c94 <_dtoa_r+0xdc>
 800876a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800876c:	2b00      	cmp	r3, #0
 800876e:	f47f aa6e 	bne.w	8007c4e <_dtoa_r+0x96>
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <_dtoa_r+0xbd8>)
 8008774:	f7ff ba8e 	b.w	8007c94 <_dtoa_r+0xdc>
 8008778:	9b02      	ldr	r3, [sp, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dcae      	bgt.n	80086dc <_dtoa_r+0xb24>
 800877e:	9b06      	ldr	r3, [sp, #24]
 8008780:	2b02      	cmp	r3, #2
 8008782:	f73f aea8 	bgt.w	80084d6 <_dtoa_r+0x91e>
 8008786:	e7a9      	b.n	80086dc <_dtoa_r+0xb24>
 8008788:	0800ab58 	.word	0x0800ab58
 800878c:	0800a95c 	.word	0x0800a95c
 8008790:	0800aad9 	.word	0x0800aad9

08008794 <__sflush_r>:
 8008794:	898a      	ldrh	r2, [r1, #12]
 8008796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879a:	4605      	mov	r5, r0
 800879c:	0710      	lsls	r0, r2, #28
 800879e:	460c      	mov	r4, r1
 80087a0:	d458      	bmi.n	8008854 <__sflush_r+0xc0>
 80087a2:	684b      	ldr	r3, [r1, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc05      	bgt.n	80087b4 <__sflush_r+0x20>
 80087a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	dc02      	bgt.n	80087b4 <__sflush_r+0x20>
 80087ae:	2000      	movs	r0, #0
 80087b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	d0f9      	beq.n	80087ae <__sflush_r+0x1a>
 80087ba:	2300      	movs	r3, #0
 80087bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087c0:	682f      	ldr	r7, [r5, #0]
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	d032      	beq.n	800882c <__sflush_r+0x98>
 80087c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	075a      	lsls	r2, r3, #29
 80087cc:	d505      	bpl.n	80087da <__sflush_r+0x46>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	1ac0      	subs	r0, r0, r3
 80087d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087d4:	b10b      	cbz	r3, 80087da <__sflush_r+0x46>
 80087d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087d8:	1ac0      	subs	r0, r0, r3
 80087da:	2300      	movs	r3, #0
 80087dc:	4602      	mov	r2, r0
 80087de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e0:	6a21      	ldr	r1, [r4, #32]
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b0      	blx	r6
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	d106      	bne.n	80087fa <__sflush_r+0x66>
 80087ec:	6829      	ldr	r1, [r5, #0]
 80087ee:	291d      	cmp	r1, #29
 80087f0:	d82c      	bhi.n	800884c <__sflush_r+0xb8>
 80087f2:	4a2a      	ldr	r2, [pc, #168]	; (800889c <__sflush_r+0x108>)
 80087f4:	40ca      	lsrs	r2, r1
 80087f6:	07d6      	lsls	r6, r2, #31
 80087f8:	d528      	bpl.n	800884c <__sflush_r+0xb8>
 80087fa:	2200      	movs	r2, #0
 80087fc:	6062      	str	r2, [r4, #4]
 80087fe:	04d9      	lsls	r1, r3, #19
 8008800:	6922      	ldr	r2, [r4, #16]
 8008802:	6022      	str	r2, [r4, #0]
 8008804:	d504      	bpl.n	8008810 <__sflush_r+0x7c>
 8008806:	1c42      	adds	r2, r0, #1
 8008808:	d101      	bne.n	800880e <__sflush_r+0x7a>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	b903      	cbnz	r3, 8008810 <__sflush_r+0x7c>
 800880e:	6560      	str	r0, [r4, #84]	; 0x54
 8008810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008812:	602f      	str	r7, [r5, #0]
 8008814:	2900      	cmp	r1, #0
 8008816:	d0ca      	beq.n	80087ae <__sflush_r+0x1a>
 8008818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800881c:	4299      	cmp	r1, r3
 800881e:	d002      	beq.n	8008826 <__sflush_r+0x92>
 8008820:	4628      	mov	r0, r5
 8008822:	f001 fa49 	bl	8009cb8 <_free_r>
 8008826:	2000      	movs	r0, #0
 8008828:	6360      	str	r0, [r4, #52]	; 0x34
 800882a:	e7c1      	b.n	80087b0 <__sflush_r+0x1c>
 800882c:	6a21      	ldr	r1, [r4, #32]
 800882e:	2301      	movs	r3, #1
 8008830:	4628      	mov	r0, r5
 8008832:	47b0      	blx	r6
 8008834:	1c41      	adds	r1, r0, #1
 8008836:	d1c7      	bne.n	80087c8 <__sflush_r+0x34>
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0c4      	beq.n	80087c8 <__sflush_r+0x34>
 800883e:	2b1d      	cmp	r3, #29
 8008840:	d001      	beq.n	8008846 <__sflush_r+0xb2>
 8008842:	2b16      	cmp	r3, #22
 8008844:	d101      	bne.n	800884a <__sflush_r+0xb6>
 8008846:	602f      	str	r7, [r5, #0]
 8008848:	e7b1      	b.n	80087ae <__sflush_r+0x1a>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	e7ad      	b.n	80087b0 <__sflush_r+0x1c>
 8008854:	690f      	ldr	r7, [r1, #16]
 8008856:	2f00      	cmp	r7, #0
 8008858:	d0a9      	beq.n	80087ae <__sflush_r+0x1a>
 800885a:	0793      	lsls	r3, r2, #30
 800885c:	680e      	ldr	r6, [r1, #0]
 800885e:	bf08      	it	eq
 8008860:	694b      	ldreq	r3, [r1, #20]
 8008862:	600f      	str	r7, [r1, #0]
 8008864:	bf18      	it	ne
 8008866:	2300      	movne	r3, #0
 8008868:	eba6 0807 	sub.w	r8, r6, r7
 800886c:	608b      	str	r3, [r1, #8]
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	dd9c      	ble.n	80087ae <__sflush_r+0x1a>
 8008874:	6a21      	ldr	r1, [r4, #32]
 8008876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008878:	4643      	mov	r3, r8
 800887a:	463a      	mov	r2, r7
 800887c:	4628      	mov	r0, r5
 800887e:	47b0      	blx	r6
 8008880:	2800      	cmp	r0, #0
 8008882:	dc06      	bgt.n	8008892 <__sflush_r+0xfe>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e78e      	b.n	80087b0 <__sflush_r+0x1c>
 8008892:	4407      	add	r7, r0
 8008894:	eba8 0800 	sub.w	r8, r8, r0
 8008898:	e7e9      	b.n	800886e <__sflush_r+0xda>
 800889a:	bf00      	nop
 800889c:	20400001 	.word	0x20400001

080088a0 <_fflush_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	690b      	ldr	r3, [r1, #16]
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b913      	cbnz	r3, 80088b0 <_fflush_r+0x10>
 80088aa:	2500      	movs	r5, #0
 80088ac:	4628      	mov	r0, r5
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	b118      	cbz	r0, 80088ba <_fflush_r+0x1a>
 80088b2:	6983      	ldr	r3, [r0, #24]
 80088b4:	b90b      	cbnz	r3, 80088ba <_fflush_r+0x1a>
 80088b6:	f000 f887 	bl	80089c8 <__sinit>
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <_fflush_r+0x6c>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	d11b      	bne.n	80088f8 <_fflush_r+0x58>
 80088c0:	686c      	ldr	r4, [r5, #4]
 80088c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0ef      	beq.n	80088aa <_fflush_r+0xa>
 80088ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088cc:	07d0      	lsls	r0, r2, #31
 80088ce:	d404      	bmi.n	80088da <_fflush_r+0x3a>
 80088d0:	0599      	lsls	r1, r3, #22
 80088d2:	d402      	bmi.n	80088da <_fflush_r+0x3a>
 80088d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088d6:	f000 fc88 	bl	80091ea <__retarget_lock_acquire_recursive>
 80088da:	4628      	mov	r0, r5
 80088dc:	4621      	mov	r1, r4
 80088de:	f7ff ff59 	bl	8008794 <__sflush_r>
 80088e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e4:	07da      	lsls	r2, r3, #31
 80088e6:	4605      	mov	r5, r0
 80088e8:	d4e0      	bmi.n	80088ac <_fflush_r+0xc>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	059b      	lsls	r3, r3, #22
 80088ee:	d4dd      	bmi.n	80088ac <_fflush_r+0xc>
 80088f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f2:	f000 fc7b 	bl	80091ec <__retarget_lock_release_recursive>
 80088f6:	e7d9      	b.n	80088ac <_fflush_r+0xc>
 80088f8:	4b05      	ldr	r3, [pc, #20]	; (8008910 <_fflush_r+0x70>)
 80088fa:	429c      	cmp	r4, r3
 80088fc:	d101      	bne.n	8008902 <_fflush_r+0x62>
 80088fe:	68ac      	ldr	r4, [r5, #8]
 8008900:	e7df      	b.n	80088c2 <_fflush_r+0x22>
 8008902:	4b04      	ldr	r3, [pc, #16]	; (8008914 <_fflush_r+0x74>)
 8008904:	429c      	cmp	r4, r3
 8008906:	bf08      	it	eq
 8008908:	68ec      	ldreq	r4, [r5, #12]
 800890a:	e7da      	b.n	80088c2 <_fflush_r+0x22>
 800890c:	0800ab8c 	.word	0x0800ab8c
 8008910:	0800abac 	.word	0x0800abac
 8008914:	0800ab6c 	.word	0x0800ab6c

08008918 <std>:
 8008918:	2300      	movs	r3, #0
 800891a:	b510      	push	{r4, lr}
 800891c:	4604      	mov	r4, r0
 800891e:	e9c0 3300 	strd	r3, r3, [r0]
 8008922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008926:	6083      	str	r3, [r0, #8]
 8008928:	8181      	strh	r1, [r0, #12]
 800892a:	6643      	str	r3, [r0, #100]	; 0x64
 800892c:	81c2      	strh	r2, [r0, #14]
 800892e:	6183      	str	r3, [r0, #24]
 8008930:	4619      	mov	r1, r3
 8008932:	2208      	movs	r2, #8
 8008934:	305c      	adds	r0, #92	; 0x5c
 8008936:	f7fd fa79 	bl	8005e2c <memset>
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <std+0x38>)
 800893c:	6263      	str	r3, [r4, #36]	; 0x24
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <std+0x3c>)
 8008940:	62a3      	str	r3, [r4, #40]	; 0x28
 8008942:	4b05      	ldr	r3, [pc, #20]	; (8008958 <std+0x40>)
 8008944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <std+0x44>)
 8008948:	6224      	str	r4, [r4, #32]
 800894a:	6323      	str	r3, [r4, #48]	; 0x30
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	0800a419 	.word	0x0800a419
 8008954:	0800a43b 	.word	0x0800a43b
 8008958:	0800a473 	.word	0x0800a473
 800895c:	0800a497 	.word	0x0800a497

08008960 <_cleanup_r>:
 8008960:	4901      	ldr	r1, [pc, #4]	; (8008968 <_cleanup_r+0x8>)
 8008962:	f000 b8af 	b.w	8008ac4 <_fwalk_reent>
 8008966:	bf00      	nop
 8008968:	080088a1 	.word	0x080088a1

0800896c <__sfmoreglue>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	2268      	movs	r2, #104	; 0x68
 8008970:	1e4d      	subs	r5, r1, #1
 8008972:	4355      	muls	r5, r2
 8008974:	460e      	mov	r6, r1
 8008976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800897a:	f001 fa09 	bl	8009d90 <_malloc_r>
 800897e:	4604      	mov	r4, r0
 8008980:	b140      	cbz	r0, 8008994 <__sfmoreglue+0x28>
 8008982:	2100      	movs	r1, #0
 8008984:	e9c0 1600 	strd	r1, r6, [r0]
 8008988:	300c      	adds	r0, #12
 800898a:	60a0      	str	r0, [r4, #8]
 800898c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008990:	f7fd fa4c 	bl	8005e2c <memset>
 8008994:	4620      	mov	r0, r4
 8008996:	bd70      	pop	{r4, r5, r6, pc}

08008998 <__sfp_lock_acquire>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__sfp_lock_acquire+0x8>)
 800899a:	f000 bc26 	b.w	80091ea <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	20000355 	.word	0x20000355

080089a4 <__sfp_lock_release>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__sfp_lock_release+0x8>)
 80089a6:	f000 bc21 	b.w	80091ec <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	20000355 	.word	0x20000355

080089b0 <__sinit_lock_acquire>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__sinit_lock_acquire+0x8>)
 80089b2:	f000 bc1a 	b.w	80091ea <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20000356 	.word	0x20000356

080089bc <__sinit_lock_release>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__sinit_lock_release+0x8>)
 80089be:	f000 bc15 	b.w	80091ec <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000356 	.word	0x20000356

080089c8 <__sinit>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	4604      	mov	r4, r0
 80089cc:	f7ff fff0 	bl	80089b0 <__sinit_lock_acquire>
 80089d0:	69a3      	ldr	r3, [r4, #24]
 80089d2:	b11b      	cbz	r3, 80089dc <__sinit+0x14>
 80089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d8:	f7ff bff0 	b.w	80089bc <__sinit_lock_release>
 80089dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089e0:	6523      	str	r3, [r4, #80]	; 0x50
 80089e2:	4b13      	ldr	r3, [pc, #76]	; (8008a30 <__sinit+0x68>)
 80089e4:	4a13      	ldr	r2, [pc, #76]	; (8008a34 <__sinit+0x6c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80089ea:	42a3      	cmp	r3, r4
 80089ec:	bf04      	itt	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	61a3      	streq	r3, [r4, #24]
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f820 	bl	8008a38 <__sfp>
 80089f8:	6060      	str	r0, [r4, #4]
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 f81c 	bl	8008a38 <__sfp>
 8008a00:	60a0      	str	r0, [r4, #8]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f818 	bl	8008a38 <__sfp>
 8008a08:	2200      	movs	r2, #0
 8008a0a:	60e0      	str	r0, [r4, #12]
 8008a0c:	2104      	movs	r1, #4
 8008a0e:	6860      	ldr	r0, [r4, #4]
 8008a10:	f7ff ff82 	bl	8008918 <std>
 8008a14:	68a0      	ldr	r0, [r4, #8]
 8008a16:	2201      	movs	r2, #1
 8008a18:	2109      	movs	r1, #9
 8008a1a:	f7ff ff7d 	bl	8008918 <std>
 8008a1e:	68e0      	ldr	r0, [r4, #12]
 8008a20:	2202      	movs	r2, #2
 8008a22:	2112      	movs	r1, #18
 8008a24:	f7ff ff78 	bl	8008918 <std>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	61a3      	str	r3, [r4, #24]
 8008a2c:	e7d2      	b.n	80089d4 <__sinit+0xc>
 8008a2e:	bf00      	nop
 8008a30:	0800a948 	.word	0x0800a948
 8008a34:	08008961 	.word	0x08008961

08008a38 <__sfp>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	f7ff ffac 	bl	8008998 <__sfp_lock_acquire>
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <__sfp+0x84>)
 8008a42:	681e      	ldr	r6, [r3, #0]
 8008a44:	69b3      	ldr	r3, [r6, #24]
 8008a46:	b913      	cbnz	r3, 8008a4e <__sfp+0x16>
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ffbd 	bl	80089c8 <__sinit>
 8008a4e:	3648      	adds	r6, #72	; 0x48
 8008a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	d503      	bpl.n	8008a60 <__sfp+0x28>
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	b30b      	cbz	r3, 8008aa0 <__sfp+0x68>
 8008a5c:	6836      	ldr	r6, [r6, #0]
 8008a5e:	e7f7      	b.n	8008a50 <__sfp+0x18>
 8008a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a64:	b9d5      	cbnz	r5, 8008a9c <__sfp+0x64>
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <__sfp+0x88>)
 8008a68:	60e3      	str	r3, [r4, #12]
 8008a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8008a70:	f000 fbba 	bl	80091e8 <__retarget_lock_init_recursive>
 8008a74:	f7ff ff96 	bl	80089a4 <__sfp_lock_release>
 8008a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a80:	6025      	str	r5, [r4, #0]
 8008a82:	61a5      	str	r5, [r4, #24]
 8008a84:	2208      	movs	r2, #8
 8008a86:	4629      	mov	r1, r5
 8008a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a8c:	f7fd f9ce 	bl	8005e2c <memset>
 8008a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9c:	3468      	adds	r4, #104	; 0x68
 8008a9e:	e7d9      	b.n	8008a54 <__sfp+0x1c>
 8008aa0:	2104      	movs	r1, #4
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7ff ff62 	bl	800896c <__sfmoreglue>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	6030      	str	r0, [r6, #0]
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d1d5      	bne.n	8008a5c <__sfp+0x24>
 8008ab0:	f7ff ff78 	bl	80089a4 <__sfp_lock_release>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	e7ee      	b.n	8008a98 <__sfp+0x60>
 8008aba:	bf00      	nop
 8008abc:	0800a948 	.word	0x0800a948
 8008ac0:	ffff0001 	.word	0xffff0001

08008ac4 <_fwalk_reent>:
 8008ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	4606      	mov	r6, r0
 8008aca:	4688      	mov	r8, r1
 8008acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ad0:	2700      	movs	r7, #0
 8008ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8008ada:	d505      	bpl.n	8008ae8 <_fwalk_reent+0x24>
 8008adc:	6824      	ldr	r4, [r4, #0]
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d1f7      	bne.n	8008ad2 <_fwalk_reent+0xe>
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae8:	89ab      	ldrh	r3, [r5, #12]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d907      	bls.n	8008afe <_fwalk_reent+0x3a>
 8008aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008af2:	3301      	adds	r3, #1
 8008af4:	d003      	beq.n	8008afe <_fwalk_reent+0x3a>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4630      	mov	r0, r6
 8008afa:	47c0      	blx	r8
 8008afc:	4307      	orrs	r7, r0
 8008afe:	3568      	adds	r5, #104	; 0x68
 8008b00:	e7e9      	b.n	8008ad6 <_fwalk_reent+0x12>

08008b02 <rshift>:
 8008b02:	6903      	ldr	r3, [r0, #16]
 8008b04:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b10:	f100 0414 	add.w	r4, r0, #20
 8008b14:	dd45      	ble.n	8008ba2 <rshift+0xa0>
 8008b16:	f011 011f 	ands.w	r1, r1, #31
 8008b1a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b1e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b22:	d10c      	bne.n	8008b3e <rshift+0x3c>
 8008b24:	f100 0710 	add.w	r7, r0, #16
 8008b28:	4629      	mov	r1, r5
 8008b2a:	42b1      	cmp	r1, r6
 8008b2c:	d334      	bcc.n	8008b98 <rshift+0x96>
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	1eea      	subs	r2, r5, #3
 8008b34:	4296      	cmp	r6, r2
 8008b36:	bf38      	it	cc
 8008b38:	2300      	movcc	r3, #0
 8008b3a:	4423      	add	r3, r4
 8008b3c:	e015      	b.n	8008b6a <rshift+0x68>
 8008b3e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b42:	f1c1 0820 	rsb	r8, r1, #32
 8008b46:	40cf      	lsrs	r7, r1
 8008b48:	f105 0e04 	add.w	lr, r5, #4
 8008b4c:	46a1      	mov	r9, r4
 8008b4e:	4576      	cmp	r6, lr
 8008b50:	46f4      	mov	ip, lr
 8008b52:	d815      	bhi.n	8008b80 <rshift+0x7e>
 8008b54:	1a9a      	subs	r2, r3, r2
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	3a04      	subs	r2, #4
 8008b5a:	3501      	adds	r5, #1
 8008b5c:	42ae      	cmp	r6, r5
 8008b5e:	bf38      	it	cc
 8008b60:	2200      	movcc	r2, #0
 8008b62:	18a3      	adds	r3, r4, r2
 8008b64:	50a7      	str	r7, [r4, r2]
 8008b66:	b107      	cbz	r7, 8008b6a <rshift+0x68>
 8008b68:	3304      	adds	r3, #4
 8008b6a:	1b1a      	subs	r2, r3, r4
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b72:	bf08      	it	eq
 8008b74:	2300      	moveq	r3, #0
 8008b76:	6102      	str	r2, [r0, #16]
 8008b78:	bf08      	it	eq
 8008b7a:	6143      	streq	r3, [r0, #20]
 8008b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b80:	f8dc c000 	ldr.w	ip, [ip]
 8008b84:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b88:	ea4c 0707 	orr.w	r7, ip, r7
 8008b8c:	f849 7b04 	str.w	r7, [r9], #4
 8008b90:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b94:	40cf      	lsrs	r7, r1
 8008b96:	e7da      	b.n	8008b4e <rshift+0x4c>
 8008b98:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b9c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ba0:	e7c3      	b.n	8008b2a <rshift+0x28>
 8008ba2:	4623      	mov	r3, r4
 8008ba4:	e7e1      	b.n	8008b6a <rshift+0x68>

08008ba6 <__hexdig_fun>:
 8008ba6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d802      	bhi.n	8008bb4 <__hexdig_fun+0xe>
 8008bae:	3820      	subs	r0, #32
 8008bb0:	b2c0      	uxtb	r0, r0
 8008bb2:	4770      	bx	lr
 8008bb4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	d801      	bhi.n	8008bc0 <__hexdig_fun+0x1a>
 8008bbc:	3847      	subs	r0, #71	; 0x47
 8008bbe:	e7f7      	b.n	8008bb0 <__hexdig_fun+0xa>
 8008bc0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bc4:	2b05      	cmp	r3, #5
 8008bc6:	d801      	bhi.n	8008bcc <__hexdig_fun+0x26>
 8008bc8:	3827      	subs	r0, #39	; 0x27
 8008bca:	e7f1      	b.n	8008bb0 <__hexdig_fun+0xa>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	4770      	bx	lr

08008bd0 <__gethex>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	ed2d 8b02 	vpush	{d8}
 8008bd8:	b089      	sub	sp, #36	; 0x24
 8008bda:	ee08 0a10 	vmov	s16, r0
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	4bb4      	ldr	r3, [pc, #720]	; (8008eb4 <__gethex+0x2e4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	4618      	mov	r0, r3
 8008be8:	468b      	mov	fp, r1
 8008bea:	4690      	mov	r8, r2
 8008bec:	f7f7 fb18 	bl	8000220 <strlen>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	f8db 2000 	ldr.w	r2, [fp]
 8008bf6:	4403      	add	r3, r0
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bfe:	9305      	str	r3, [sp, #20]
 8008c00:	1c93      	adds	r3, r2, #2
 8008c02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c0a:	32fe      	adds	r2, #254	; 0xfe
 8008c0c:	18d1      	adds	r1, r2, r3
 8008c0e:	461f      	mov	r7, r3
 8008c10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c14:	9100      	str	r1, [sp, #0]
 8008c16:	2830      	cmp	r0, #48	; 0x30
 8008c18:	d0f8      	beq.n	8008c0c <__gethex+0x3c>
 8008c1a:	f7ff ffc4 	bl	8008ba6 <__hexdig_fun>
 8008c1e:	4604      	mov	r4, r0
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d13a      	bne.n	8008c9a <__gethex+0xca>
 8008c24:	9901      	ldr	r1, [sp, #4]
 8008c26:	4652      	mov	r2, sl
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f001 fc38 	bl	800a49e <strncmp>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d168      	bne.n	8008d06 <__gethex+0x136>
 8008c34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c38:	eb07 060a 	add.w	r6, r7, sl
 8008c3c:	f7ff ffb3 	bl	8008ba6 <__hexdig_fun>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d062      	beq.n	8008d0a <__gethex+0x13a>
 8008c44:	4633      	mov	r3, r6
 8008c46:	7818      	ldrb	r0, [r3, #0]
 8008c48:	2830      	cmp	r0, #48	; 0x30
 8008c4a:	461f      	mov	r7, r3
 8008c4c:	f103 0301 	add.w	r3, r3, #1
 8008c50:	d0f9      	beq.n	8008c46 <__gethex+0x76>
 8008c52:	f7ff ffa8 	bl	8008ba6 <__hexdig_fun>
 8008c56:	2301      	movs	r3, #1
 8008c58:	fab0 f480 	clz	r4, r0
 8008c5c:	0964      	lsrs	r4, r4, #5
 8008c5e:	4635      	mov	r5, r6
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	463a      	mov	r2, r7
 8008c64:	4616      	mov	r6, r2
 8008c66:	3201      	adds	r2, #1
 8008c68:	7830      	ldrb	r0, [r6, #0]
 8008c6a:	f7ff ff9c 	bl	8008ba6 <__hexdig_fun>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d1f8      	bne.n	8008c64 <__gethex+0x94>
 8008c72:	9901      	ldr	r1, [sp, #4]
 8008c74:	4652      	mov	r2, sl
 8008c76:	4630      	mov	r0, r6
 8008c78:	f001 fc11 	bl	800a49e <strncmp>
 8008c7c:	b980      	cbnz	r0, 8008ca0 <__gethex+0xd0>
 8008c7e:	b94d      	cbnz	r5, 8008c94 <__gethex+0xc4>
 8008c80:	eb06 050a 	add.w	r5, r6, sl
 8008c84:	462a      	mov	r2, r5
 8008c86:	4616      	mov	r6, r2
 8008c88:	3201      	adds	r2, #1
 8008c8a:	7830      	ldrb	r0, [r6, #0]
 8008c8c:	f7ff ff8b 	bl	8008ba6 <__hexdig_fun>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d1f8      	bne.n	8008c86 <__gethex+0xb6>
 8008c94:	1bad      	subs	r5, r5, r6
 8008c96:	00ad      	lsls	r5, r5, #2
 8008c98:	e004      	b.n	8008ca4 <__gethex+0xd4>
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	4625      	mov	r5, r4
 8008c9e:	e7e0      	b.n	8008c62 <__gethex+0x92>
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	d1f7      	bne.n	8008c94 <__gethex+0xc4>
 8008ca4:	7833      	ldrb	r3, [r6, #0]
 8008ca6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008caa:	2b50      	cmp	r3, #80	; 0x50
 8008cac:	d13b      	bne.n	8008d26 <__gethex+0x156>
 8008cae:	7873      	ldrb	r3, [r6, #1]
 8008cb0:	2b2b      	cmp	r3, #43	; 0x2b
 8008cb2:	d02c      	beq.n	8008d0e <__gethex+0x13e>
 8008cb4:	2b2d      	cmp	r3, #45	; 0x2d
 8008cb6:	d02e      	beq.n	8008d16 <__gethex+0x146>
 8008cb8:	1c71      	adds	r1, r6, #1
 8008cba:	f04f 0900 	mov.w	r9, #0
 8008cbe:	7808      	ldrb	r0, [r1, #0]
 8008cc0:	f7ff ff71 	bl	8008ba6 <__hexdig_fun>
 8008cc4:	1e43      	subs	r3, r0, #1
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b18      	cmp	r3, #24
 8008cca:	d82c      	bhi.n	8008d26 <__gethex+0x156>
 8008ccc:	f1a0 0210 	sub.w	r2, r0, #16
 8008cd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cd4:	f7ff ff67 	bl	8008ba6 <__hexdig_fun>
 8008cd8:	1e43      	subs	r3, r0, #1
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b18      	cmp	r3, #24
 8008cde:	d91d      	bls.n	8008d1c <__gethex+0x14c>
 8008ce0:	f1b9 0f00 	cmp.w	r9, #0
 8008ce4:	d000      	beq.n	8008ce8 <__gethex+0x118>
 8008ce6:	4252      	negs	r2, r2
 8008ce8:	4415      	add	r5, r2
 8008cea:	f8cb 1000 	str.w	r1, [fp]
 8008cee:	b1e4      	cbz	r4, 8008d2a <__gethex+0x15a>
 8008cf0:	9b00      	ldr	r3, [sp, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf14      	ite	ne
 8008cf6:	2700      	movne	r7, #0
 8008cf8:	2706      	moveq	r7, #6
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	b009      	add	sp, #36	; 0x24
 8008cfe:	ecbd 8b02 	vpop	{d8}
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d06:	463e      	mov	r6, r7
 8008d08:	4625      	mov	r5, r4
 8008d0a:	2401      	movs	r4, #1
 8008d0c:	e7ca      	b.n	8008ca4 <__gethex+0xd4>
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	1cb1      	adds	r1, r6, #2
 8008d14:	e7d3      	b.n	8008cbe <__gethex+0xee>
 8008d16:	f04f 0901 	mov.w	r9, #1
 8008d1a:	e7fa      	b.n	8008d12 <__gethex+0x142>
 8008d1c:	230a      	movs	r3, #10
 8008d1e:	fb03 0202 	mla	r2, r3, r2, r0
 8008d22:	3a10      	subs	r2, #16
 8008d24:	e7d4      	b.n	8008cd0 <__gethex+0x100>
 8008d26:	4631      	mov	r1, r6
 8008d28:	e7df      	b.n	8008cea <__gethex+0x11a>
 8008d2a:	1bf3      	subs	r3, r6, r7
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	4621      	mov	r1, r4
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	dc0b      	bgt.n	8008d4c <__gethex+0x17c>
 8008d34:	ee18 0a10 	vmov	r0, s16
 8008d38:	f000 fae6 	bl	8009308 <_Balloc>
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	b940      	cbnz	r0, 8008d52 <__gethex+0x182>
 8008d40:	4b5d      	ldr	r3, [pc, #372]	; (8008eb8 <__gethex+0x2e8>)
 8008d42:	4602      	mov	r2, r0
 8008d44:	21de      	movs	r1, #222	; 0xde
 8008d46:	485d      	ldr	r0, [pc, #372]	; (8008ebc <__gethex+0x2ec>)
 8008d48:	f001 fc9e 	bl	800a688 <__assert_func>
 8008d4c:	3101      	adds	r1, #1
 8008d4e:	105b      	asrs	r3, r3, #1
 8008d50:	e7ee      	b.n	8008d30 <__gethex+0x160>
 8008d52:	f100 0914 	add.w	r9, r0, #20
 8008d56:	f04f 0b00 	mov.w	fp, #0
 8008d5a:	f1ca 0301 	rsb	r3, sl, #1
 8008d5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d62:	f8cd b000 	str.w	fp, [sp]
 8008d66:	9306      	str	r3, [sp, #24]
 8008d68:	42b7      	cmp	r7, r6
 8008d6a:	d340      	bcc.n	8008dee <__gethex+0x21e>
 8008d6c:	9802      	ldr	r0, [sp, #8]
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	f840 3b04 	str.w	r3, [r0], #4
 8008d74:	eba0 0009 	sub.w	r0, r0, r9
 8008d78:	1080      	asrs	r0, r0, #2
 8008d7a:	0146      	lsls	r6, r0, #5
 8008d7c:	6120      	str	r0, [r4, #16]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fbb4 	bl	80094ec <__hi0bits>
 8008d84:	1a30      	subs	r0, r6, r0
 8008d86:	f8d8 6000 	ldr.w	r6, [r8]
 8008d8a:	42b0      	cmp	r0, r6
 8008d8c:	dd63      	ble.n	8008e56 <__gethex+0x286>
 8008d8e:	1b87      	subs	r7, r0, r6
 8008d90:	4639      	mov	r1, r7
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 ff58 	bl	8009c48 <__any_on>
 8008d98:	4682      	mov	sl, r0
 8008d9a:	b1a8      	cbz	r0, 8008dc8 <__gethex+0x1f8>
 8008d9c:	1e7b      	subs	r3, r7, #1
 8008d9e:	1159      	asrs	r1, r3, #5
 8008da0:	f003 021f 	and.w	r2, r3, #31
 8008da4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008da8:	f04f 0a01 	mov.w	sl, #1
 8008dac:	fa0a f202 	lsl.w	r2, sl, r2
 8008db0:	420a      	tst	r2, r1
 8008db2:	d009      	beq.n	8008dc8 <__gethex+0x1f8>
 8008db4:	4553      	cmp	r3, sl
 8008db6:	dd05      	ble.n	8008dc4 <__gethex+0x1f4>
 8008db8:	1eb9      	subs	r1, r7, #2
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 ff44 	bl	8009c48 <__any_on>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d145      	bne.n	8008e50 <__gethex+0x280>
 8008dc4:	f04f 0a02 	mov.w	sl, #2
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff fe99 	bl	8008b02 <rshift>
 8008dd0:	443d      	add	r5, r7
 8008dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dd6:	42ab      	cmp	r3, r5
 8008dd8:	da4c      	bge.n	8008e74 <__gethex+0x2a4>
 8008dda:	ee18 0a10 	vmov	r0, s16
 8008dde:	4621      	mov	r1, r4
 8008de0:	f000 fad2 	bl	8009388 <_Bfree>
 8008de4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008de6:	2300      	movs	r3, #0
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	27a3      	movs	r7, #163	; 0xa3
 8008dec:	e785      	b.n	8008cfa <__gethex+0x12a>
 8008dee:	1e73      	subs	r3, r6, #1
 8008df0:	9a05      	ldr	r2, [sp, #20]
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d019      	beq.n	8008e30 <__gethex+0x260>
 8008dfc:	f1bb 0f20 	cmp.w	fp, #32
 8008e00:	d107      	bne.n	8008e12 <__gethex+0x242>
 8008e02:	9b02      	ldr	r3, [sp, #8]
 8008e04:	9a00      	ldr	r2, [sp, #0]
 8008e06:	f843 2b04 	str.w	r2, [r3], #4
 8008e0a:	9302      	str	r3, [sp, #8]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	469b      	mov	fp, r3
 8008e12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e16:	f7ff fec6 	bl	8008ba6 <__hexdig_fun>
 8008e1a:	9b00      	ldr	r3, [sp, #0]
 8008e1c:	f000 000f 	and.w	r0, r0, #15
 8008e20:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e24:	4303      	orrs	r3, r0
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	f10b 0b04 	add.w	fp, fp, #4
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	e00d      	b.n	8008e4c <__gethex+0x27c>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	9a06      	ldr	r2, [sp, #24]
 8008e34:	4413      	add	r3, r2
 8008e36:	42bb      	cmp	r3, r7
 8008e38:	d3e0      	bcc.n	8008dfc <__gethex+0x22c>
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	9901      	ldr	r1, [sp, #4]
 8008e3e:	9307      	str	r3, [sp, #28]
 8008e40:	4652      	mov	r2, sl
 8008e42:	f001 fb2c 	bl	800a49e <strncmp>
 8008e46:	9b07      	ldr	r3, [sp, #28]
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1d7      	bne.n	8008dfc <__gethex+0x22c>
 8008e4c:	461e      	mov	r6, r3
 8008e4e:	e78b      	b.n	8008d68 <__gethex+0x198>
 8008e50:	f04f 0a03 	mov.w	sl, #3
 8008e54:	e7b8      	b.n	8008dc8 <__gethex+0x1f8>
 8008e56:	da0a      	bge.n	8008e6e <__gethex+0x29e>
 8008e58:	1a37      	subs	r7, r6, r0
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	ee18 0a10 	vmov	r0, s16
 8008e60:	463a      	mov	r2, r7
 8008e62:	f000 fcad 	bl	80097c0 <__lshift>
 8008e66:	1bed      	subs	r5, r5, r7
 8008e68:	4604      	mov	r4, r0
 8008e6a:	f100 0914 	add.w	r9, r0, #20
 8008e6e:	f04f 0a00 	mov.w	sl, #0
 8008e72:	e7ae      	b.n	8008dd2 <__gethex+0x202>
 8008e74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e78:	42a8      	cmp	r0, r5
 8008e7a:	dd72      	ble.n	8008f62 <__gethex+0x392>
 8008e7c:	1b45      	subs	r5, r0, r5
 8008e7e:	42ae      	cmp	r6, r5
 8008e80:	dc36      	bgt.n	8008ef0 <__gethex+0x320>
 8008e82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d02a      	beq.n	8008ee0 <__gethex+0x310>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d02c      	beq.n	8008ee8 <__gethex+0x318>
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d11c      	bne.n	8008ecc <__gethex+0x2fc>
 8008e92:	42ae      	cmp	r6, r5
 8008e94:	d11a      	bne.n	8008ecc <__gethex+0x2fc>
 8008e96:	2e01      	cmp	r6, #1
 8008e98:	d112      	bne.n	8008ec0 <__gethex+0x2f0>
 8008e9a:	9a04      	ldr	r2, [sp, #16]
 8008e9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	6123      	str	r3, [r4, #16]
 8008ea6:	f8c9 3000 	str.w	r3, [r9]
 8008eaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eac:	2762      	movs	r7, #98	; 0x62
 8008eae:	601c      	str	r4, [r3, #0]
 8008eb0:	e723      	b.n	8008cfa <__gethex+0x12a>
 8008eb2:	bf00      	nop
 8008eb4:	0800ac34 	.word	0x0800ac34
 8008eb8:	0800ab58 	.word	0x0800ab58
 8008ebc:	0800abcc 	.word	0x0800abcc
 8008ec0:	1e71      	subs	r1, r6, #1
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 fec0 	bl	8009c48 <__any_on>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d1e6      	bne.n	8008e9a <__gethex+0x2ca>
 8008ecc:	ee18 0a10 	vmov	r0, s16
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f000 fa59 	bl	8009388 <_Bfree>
 8008ed6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	2750      	movs	r7, #80	; 0x50
 8008ede:	e70c      	b.n	8008cfa <__gethex+0x12a>
 8008ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1f2      	bne.n	8008ecc <__gethex+0x2fc>
 8008ee6:	e7d8      	b.n	8008e9a <__gethex+0x2ca>
 8008ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1d5      	bne.n	8008e9a <__gethex+0x2ca>
 8008eee:	e7ed      	b.n	8008ecc <__gethex+0x2fc>
 8008ef0:	1e6f      	subs	r7, r5, #1
 8008ef2:	f1ba 0f00 	cmp.w	sl, #0
 8008ef6:	d131      	bne.n	8008f5c <__gethex+0x38c>
 8008ef8:	b127      	cbz	r7, 8008f04 <__gethex+0x334>
 8008efa:	4639      	mov	r1, r7
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fea3 	bl	8009c48 <__any_on>
 8008f02:	4682      	mov	sl, r0
 8008f04:	117b      	asrs	r3, r7, #5
 8008f06:	2101      	movs	r1, #1
 8008f08:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f0c:	f007 071f 	and.w	r7, r7, #31
 8008f10:	fa01 f707 	lsl.w	r7, r1, r7
 8008f14:	421f      	tst	r7, r3
 8008f16:	4629      	mov	r1, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	bf18      	it	ne
 8008f1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f20:	1b76      	subs	r6, r6, r5
 8008f22:	f7ff fdee 	bl	8008b02 <rshift>
 8008f26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f2a:	2702      	movs	r7, #2
 8008f2c:	f1ba 0f00 	cmp.w	sl, #0
 8008f30:	d048      	beq.n	8008fc4 <__gethex+0x3f4>
 8008f32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d015      	beq.n	8008f66 <__gethex+0x396>
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d017      	beq.n	8008f6e <__gethex+0x39e>
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d109      	bne.n	8008f56 <__gethex+0x386>
 8008f42:	f01a 0f02 	tst.w	sl, #2
 8008f46:	d006      	beq.n	8008f56 <__gethex+0x386>
 8008f48:	f8d9 0000 	ldr.w	r0, [r9]
 8008f4c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f50:	f01a 0f01 	tst.w	sl, #1
 8008f54:	d10e      	bne.n	8008f74 <__gethex+0x3a4>
 8008f56:	f047 0710 	orr.w	r7, r7, #16
 8008f5a:	e033      	b.n	8008fc4 <__gethex+0x3f4>
 8008f5c:	f04f 0a01 	mov.w	sl, #1
 8008f60:	e7d0      	b.n	8008f04 <__gethex+0x334>
 8008f62:	2701      	movs	r7, #1
 8008f64:	e7e2      	b.n	8008f2c <__gethex+0x35c>
 8008f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f68:	f1c3 0301 	rsb	r3, r3, #1
 8008f6c:	9315      	str	r3, [sp, #84]	; 0x54
 8008f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0f0      	beq.n	8008f56 <__gethex+0x386>
 8008f74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f78:	f104 0314 	add.w	r3, r4, #20
 8008f7c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f80:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f84:	f04f 0c00 	mov.w	ip, #0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f8e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008f92:	d01c      	beq.n	8008fce <__gethex+0x3fe>
 8008f94:	3201      	adds	r2, #1
 8008f96:	6002      	str	r2, [r0, #0]
 8008f98:	2f02      	cmp	r7, #2
 8008f9a:	f104 0314 	add.w	r3, r4, #20
 8008f9e:	d13f      	bne.n	8009020 <__gethex+0x450>
 8008fa0:	f8d8 2000 	ldr.w	r2, [r8]
 8008fa4:	3a01      	subs	r2, #1
 8008fa6:	42b2      	cmp	r2, r6
 8008fa8:	d10a      	bne.n	8008fc0 <__gethex+0x3f0>
 8008faa:	1171      	asrs	r1, r6, #5
 8008fac:	2201      	movs	r2, #1
 8008fae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fb2:	f006 061f 	and.w	r6, r6, #31
 8008fb6:	fa02 f606 	lsl.w	r6, r2, r6
 8008fba:	421e      	tst	r6, r3
 8008fbc:	bf18      	it	ne
 8008fbe:	4617      	movne	r7, r2
 8008fc0:	f047 0720 	orr.w	r7, r7, #32
 8008fc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fc6:	601c      	str	r4, [r3, #0]
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	601d      	str	r5, [r3, #0]
 8008fcc:	e695      	b.n	8008cfa <__gethex+0x12a>
 8008fce:	4299      	cmp	r1, r3
 8008fd0:	f843 cc04 	str.w	ip, [r3, #-4]
 8008fd4:	d8d8      	bhi.n	8008f88 <__gethex+0x3b8>
 8008fd6:	68a3      	ldr	r3, [r4, #8]
 8008fd8:	459b      	cmp	fp, r3
 8008fda:	db19      	blt.n	8009010 <__gethex+0x440>
 8008fdc:	6861      	ldr	r1, [r4, #4]
 8008fde:	ee18 0a10 	vmov	r0, s16
 8008fe2:	3101      	adds	r1, #1
 8008fe4:	f000 f990 	bl	8009308 <_Balloc>
 8008fe8:	4681      	mov	r9, r0
 8008fea:	b918      	cbnz	r0, 8008ff4 <__gethex+0x424>
 8008fec:	4b1a      	ldr	r3, [pc, #104]	; (8009058 <__gethex+0x488>)
 8008fee:	4602      	mov	r2, r0
 8008ff0:	2184      	movs	r1, #132	; 0x84
 8008ff2:	e6a8      	b.n	8008d46 <__gethex+0x176>
 8008ff4:	6922      	ldr	r2, [r4, #16]
 8008ff6:	3202      	adds	r2, #2
 8008ff8:	f104 010c 	add.w	r1, r4, #12
 8008ffc:	0092      	lsls	r2, r2, #2
 8008ffe:	300c      	adds	r0, #12
 8009000:	f000 f974 	bl	80092ec <memcpy>
 8009004:	4621      	mov	r1, r4
 8009006:	ee18 0a10 	vmov	r0, s16
 800900a:	f000 f9bd 	bl	8009388 <_Bfree>
 800900e:	464c      	mov	r4, r9
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009018:	6122      	str	r2, [r4, #16]
 800901a:	2201      	movs	r2, #1
 800901c:	615a      	str	r2, [r3, #20]
 800901e:	e7bb      	b.n	8008f98 <__gethex+0x3c8>
 8009020:	6922      	ldr	r2, [r4, #16]
 8009022:	455a      	cmp	r2, fp
 8009024:	dd0b      	ble.n	800903e <__gethex+0x46e>
 8009026:	2101      	movs	r1, #1
 8009028:	4620      	mov	r0, r4
 800902a:	f7ff fd6a 	bl	8008b02 <rshift>
 800902e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009032:	3501      	adds	r5, #1
 8009034:	42ab      	cmp	r3, r5
 8009036:	f6ff aed0 	blt.w	8008dda <__gethex+0x20a>
 800903a:	2701      	movs	r7, #1
 800903c:	e7c0      	b.n	8008fc0 <__gethex+0x3f0>
 800903e:	f016 061f 	ands.w	r6, r6, #31
 8009042:	d0fa      	beq.n	800903a <__gethex+0x46a>
 8009044:	4453      	add	r3, sl
 8009046:	f1c6 0620 	rsb	r6, r6, #32
 800904a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800904e:	f000 fa4d 	bl	80094ec <__hi0bits>
 8009052:	42b0      	cmp	r0, r6
 8009054:	dbe7      	blt.n	8009026 <__gethex+0x456>
 8009056:	e7f0      	b.n	800903a <__gethex+0x46a>
 8009058:	0800ab58 	.word	0x0800ab58

0800905c <L_shift>:
 800905c:	f1c2 0208 	rsb	r2, r2, #8
 8009060:	0092      	lsls	r2, r2, #2
 8009062:	b570      	push	{r4, r5, r6, lr}
 8009064:	f1c2 0620 	rsb	r6, r2, #32
 8009068:	6843      	ldr	r3, [r0, #4]
 800906a:	6804      	ldr	r4, [r0, #0]
 800906c:	fa03 f506 	lsl.w	r5, r3, r6
 8009070:	432c      	orrs	r4, r5
 8009072:	40d3      	lsrs	r3, r2
 8009074:	6004      	str	r4, [r0, #0]
 8009076:	f840 3f04 	str.w	r3, [r0, #4]!
 800907a:	4288      	cmp	r0, r1
 800907c:	d3f4      	bcc.n	8009068 <L_shift+0xc>
 800907e:	bd70      	pop	{r4, r5, r6, pc}

08009080 <__match>:
 8009080:	b530      	push	{r4, r5, lr}
 8009082:	6803      	ldr	r3, [r0, #0]
 8009084:	3301      	adds	r3, #1
 8009086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800908a:	b914      	cbnz	r4, 8009092 <__match+0x12>
 800908c:	6003      	str	r3, [r0, #0]
 800908e:	2001      	movs	r0, #1
 8009090:	bd30      	pop	{r4, r5, pc}
 8009092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009096:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800909a:	2d19      	cmp	r5, #25
 800909c:	bf98      	it	ls
 800909e:	3220      	addls	r2, #32
 80090a0:	42a2      	cmp	r2, r4
 80090a2:	d0f0      	beq.n	8009086 <__match+0x6>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7f3      	b.n	8009090 <__match+0x10>

080090a8 <__hexnan>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	680b      	ldr	r3, [r1, #0]
 80090ae:	115e      	asrs	r6, r3, #5
 80090b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090b4:	f013 031f 	ands.w	r3, r3, #31
 80090b8:	b087      	sub	sp, #28
 80090ba:	bf18      	it	ne
 80090bc:	3604      	addne	r6, #4
 80090be:	2500      	movs	r5, #0
 80090c0:	1f37      	subs	r7, r6, #4
 80090c2:	4690      	mov	r8, r2
 80090c4:	6802      	ldr	r2, [r0, #0]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	4682      	mov	sl, r0
 80090ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80090ce:	46b9      	mov	r9, r7
 80090d0:	463c      	mov	r4, r7
 80090d2:	9502      	str	r5, [sp, #8]
 80090d4:	46ab      	mov	fp, r5
 80090d6:	7851      	ldrb	r1, [r2, #1]
 80090d8:	1c53      	adds	r3, r2, #1
 80090da:	9303      	str	r3, [sp, #12]
 80090dc:	b341      	cbz	r1, 8009130 <__hexnan+0x88>
 80090de:	4608      	mov	r0, r1
 80090e0:	9205      	str	r2, [sp, #20]
 80090e2:	9104      	str	r1, [sp, #16]
 80090e4:	f7ff fd5f 	bl	8008ba6 <__hexdig_fun>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d14f      	bne.n	800918c <__hexnan+0xe4>
 80090ec:	9904      	ldr	r1, [sp, #16]
 80090ee:	9a05      	ldr	r2, [sp, #20]
 80090f0:	2920      	cmp	r1, #32
 80090f2:	d818      	bhi.n	8009126 <__hexnan+0x7e>
 80090f4:	9b02      	ldr	r3, [sp, #8]
 80090f6:	459b      	cmp	fp, r3
 80090f8:	dd13      	ble.n	8009122 <__hexnan+0x7a>
 80090fa:	454c      	cmp	r4, r9
 80090fc:	d206      	bcs.n	800910c <__hexnan+0x64>
 80090fe:	2d07      	cmp	r5, #7
 8009100:	dc04      	bgt.n	800910c <__hexnan+0x64>
 8009102:	462a      	mov	r2, r5
 8009104:	4649      	mov	r1, r9
 8009106:	4620      	mov	r0, r4
 8009108:	f7ff ffa8 	bl	800905c <L_shift>
 800910c:	4544      	cmp	r4, r8
 800910e:	d950      	bls.n	80091b2 <__hexnan+0x10a>
 8009110:	2300      	movs	r3, #0
 8009112:	f1a4 0904 	sub.w	r9, r4, #4
 8009116:	f844 3c04 	str.w	r3, [r4, #-4]
 800911a:	f8cd b008 	str.w	fp, [sp, #8]
 800911e:	464c      	mov	r4, r9
 8009120:	461d      	mov	r5, r3
 8009122:	9a03      	ldr	r2, [sp, #12]
 8009124:	e7d7      	b.n	80090d6 <__hexnan+0x2e>
 8009126:	2929      	cmp	r1, #41	; 0x29
 8009128:	d156      	bne.n	80091d8 <__hexnan+0x130>
 800912a:	3202      	adds	r2, #2
 800912c:	f8ca 2000 	str.w	r2, [sl]
 8009130:	f1bb 0f00 	cmp.w	fp, #0
 8009134:	d050      	beq.n	80091d8 <__hexnan+0x130>
 8009136:	454c      	cmp	r4, r9
 8009138:	d206      	bcs.n	8009148 <__hexnan+0xa0>
 800913a:	2d07      	cmp	r5, #7
 800913c:	dc04      	bgt.n	8009148 <__hexnan+0xa0>
 800913e:	462a      	mov	r2, r5
 8009140:	4649      	mov	r1, r9
 8009142:	4620      	mov	r0, r4
 8009144:	f7ff ff8a 	bl	800905c <L_shift>
 8009148:	4544      	cmp	r4, r8
 800914a:	d934      	bls.n	80091b6 <__hexnan+0x10e>
 800914c:	f1a8 0204 	sub.w	r2, r8, #4
 8009150:	4623      	mov	r3, r4
 8009152:	f853 1b04 	ldr.w	r1, [r3], #4
 8009156:	f842 1f04 	str.w	r1, [r2, #4]!
 800915a:	429f      	cmp	r7, r3
 800915c:	d2f9      	bcs.n	8009152 <__hexnan+0xaa>
 800915e:	1b3b      	subs	r3, r7, r4
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	3304      	adds	r3, #4
 8009166:	3401      	adds	r4, #1
 8009168:	3e03      	subs	r6, #3
 800916a:	42b4      	cmp	r4, r6
 800916c:	bf88      	it	hi
 800916e:	2304      	movhi	r3, #4
 8009170:	4443      	add	r3, r8
 8009172:	2200      	movs	r2, #0
 8009174:	f843 2b04 	str.w	r2, [r3], #4
 8009178:	429f      	cmp	r7, r3
 800917a:	d2fb      	bcs.n	8009174 <__hexnan+0xcc>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	b91b      	cbnz	r3, 8009188 <__hexnan+0xe0>
 8009180:	4547      	cmp	r7, r8
 8009182:	d127      	bne.n	80091d4 <__hexnan+0x12c>
 8009184:	2301      	movs	r3, #1
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	2005      	movs	r0, #5
 800918a:	e026      	b.n	80091da <__hexnan+0x132>
 800918c:	3501      	adds	r5, #1
 800918e:	2d08      	cmp	r5, #8
 8009190:	f10b 0b01 	add.w	fp, fp, #1
 8009194:	dd06      	ble.n	80091a4 <__hexnan+0xfc>
 8009196:	4544      	cmp	r4, r8
 8009198:	d9c3      	bls.n	8009122 <__hexnan+0x7a>
 800919a:	2300      	movs	r3, #0
 800919c:	f844 3c04 	str.w	r3, [r4, #-4]
 80091a0:	2501      	movs	r5, #1
 80091a2:	3c04      	subs	r4, #4
 80091a4:	6822      	ldr	r2, [r4, #0]
 80091a6:	f000 000f 	and.w	r0, r0, #15
 80091aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091ae:	6022      	str	r2, [r4, #0]
 80091b0:	e7b7      	b.n	8009122 <__hexnan+0x7a>
 80091b2:	2508      	movs	r5, #8
 80091b4:	e7b5      	b.n	8009122 <__hexnan+0x7a>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0df      	beq.n	800917c <__hexnan+0xd4>
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	f1c3 0320 	rsb	r3, r3, #32
 80091c4:	fa22 f303 	lsr.w	r3, r2, r3
 80091c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80091cc:	401a      	ands	r2, r3
 80091ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80091d2:	e7d3      	b.n	800917c <__hexnan+0xd4>
 80091d4:	3f04      	subs	r7, #4
 80091d6:	e7d1      	b.n	800917c <__hexnan+0xd4>
 80091d8:	2004      	movs	r0, #4
 80091da:	b007      	add	sp, #28
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091e0 <_localeconv_r>:
 80091e0:	4800      	ldr	r0, [pc, #0]	; (80091e4 <_localeconv_r+0x4>)
 80091e2:	4770      	bx	lr
 80091e4:	20000168 	.word	0x20000168

080091e8 <__retarget_lock_init_recursive>:
 80091e8:	4770      	bx	lr

080091ea <__retarget_lock_acquire_recursive>:
 80091ea:	4770      	bx	lr

080091ec <__retarget_lock_release_recursive>:
 80091ec:	4770      	bx	lr

080091ee <__swhatbuf_r>:
 80091ee:	b570      	push	{r4, r5, r6, lr}
 80091f0:	460e      	mov	r6, r1
 80091f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f6:	2900      	cmp	r1, #0
 80091f8:	b096      	sub	sp, #88	; 0x58
 80091fa:	4614      	mov	r4, r2
 80091fc:	461d      	mov	r5, r3
 80091fe:	da08      	bge.n	8009212 <__swhatbuf_r+0x24>
 8009200:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	602a      	str	r2, [r5, #0]
 8009208:	061a      	lsls	r2, r3, #24
 800920a:	d410      	bmi.n	800922e <__swhatbuf_r+0x40>
 800920c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009210:	e00e      	b.n	8009230 <__swhatbuf_r+0x42>
 8009212:	466a      	mov	r2, sp
 8009214:	f001 fa78 	bl	800a708 <_fstat_r>
 8009218:	2800      	cmp	r0, #0
 800921a:	dbf1      	blt.n	8009200 <__swhatbuf_r+0x12>
 800921c:	9a01      	ldr	r2, [sp, #4]
 800921e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009226:	425a      	negs	r2, r3
 8009228:	415a      	adcs	r2, r3
 800922a:	602a      	str	r2, [r5, #0]
 800922c:	e7ee      	b.n	800920c <__swhatbuf_r+0x1e>
 800922e:	2340      	movs	r3, #64	; 0x40
 8009230:	2000      	movs	r0, #0
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	b016      	add	sp, #88	; 0x58
 8009236:	bd70      	pop	{r4, r5, r6, pc}

08009238 <__smakebuf_r>:
 8009238:	898b      	ldrh	r3, [r1, #12]
 800923a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800923c:	079d      	lsls	r5, r3, #30
 800923e:	4606      	mov	r6, r0
 8009240:	460c      	mov	r4, r1
 8009242:	d507      	bpl.n	8009254 <__smakebuf_r+0x1c>
 8009244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	2301      	movs	r3, #1
 800924e:	6163      	str	r3, [r4, #20]
 8009250:	b002      	add	sp, #8
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	ab01      	add	r3, sp, #4
 8009256:	466a      	mov	r2, sp
 8009258:	f7ff ffc9 	bl	80091ee <__swhatbuf_r>
 800925c:	9900      	ldr	r1, [sp, #0]
 800925e:	4605      	mov	r5, r0
 8009260:	4630      	mov	r0, r6
 8009262:	f000 fd95 	bl	8009d90 <_malloc_r>
 8009266:	b948      	cbnz	r0, 800927c <__smakebuf_r+0x44>
 8009268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926c:	059a      	lsls	r2, r3, #22
 800926e:	d4ef      	bmi.n	8009250 <__smakebuf_r+0x18>
 8009270:	f023 0303 	bic.w	r3, r3, #3
 8009274:	f043 0302 	orr.w	r3, r3, #2
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	e7e3      	b.n	8009244 <__smakebuf_r+0xc>
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <__smakebuf_r+0x7c>)
 800927e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009288:	81a3      	strh	r3, [r4, #12]
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	6163      	str	r3, [r4, #20]
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	6120      	str	r0, [r4, #16]
 8009292:	b15b      	cbz	r3, 80092ac <__smakebuf_r+0x74>
 8009294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009298:	4630      	mov	r0, r6
 800929a:	f001 fa47 	bl	800a72c <_isatty_r>
 800929e:	b128      	cbz	r0, 80092ac <__smakebuf_r+0x74>
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	f023 0303 	bic.w	r3, r3, #3
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	89a0      	ldrh	r0, [r4, #12]
 80092ae:	4305      	orrs	r5, r0
 80092b0:	81a5      	strh	r5, [r4, #12]
 80092b2:	e7cd      	b.n	8009250 <__smakebuf_r+0x18>
 80092b4:	08008961 	.word	0x08008961

080092b8 <malloc>:
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <malloc+0xc>)
 80092ba:	4601      	mov	r1, r0
 80092bc:	6818      	ldr	r0, [r3, #0]
 80092be:	f000 bd67 	b.w	8009d90 <_malloc_r>
 80092c2:	bf00      	nop
 80092c4:	20000010 	.word	0x20000010

080092c8 <__ascii_mbtowc>:
 80092c8:	b082      	sub	sp, #8
 80092ca:	b901      	cbnz	r1, 80092ce <__ascii_mbtowc+0x6>
 80092cc:	a901      	add	r1, sp, #4
 80092ce:	b142      	cbz	r2, 80092e2 <__ascii_mbtowc+0x1a>
 80092d0:	b14b      	cbz	r3, 80092e6 <__ascii_mbtowc+0x1e>
 80092d2:	7813      	ldrb	r3, [r2, #0]
 80092d4:	600b      	str	r3, [r1, #0]
 80092d6:	7812      	ldrb	r2, [r2, #0]
 80092d8:	1e10      	subs	r0, r2, #0
 80092da:	bf18      	it	ne
 80092dc:	2001      	movne	r0, #1
 80092de:	b002      	add	sp, #8
 80092e0:	4770      	bx	lr
 80092e2:	4610      	mov	r0, r2
 80092e4:	e7fb      	b.n	80092de <__ascii_mbtowc+0x16>
 80092e6:	f06f 0001 	mvn.w	r0, #1
 80092ea:	e7f8      	b.n	80092de <__ascii_mbtowc+0x16>

080092ec <memcpy>:
 80092ec:	440a      	add	r2, r1
 80092ee:	4291      	cmp	r1, r2
 80092f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f4:	d100      	bne.n	80092f8 <memcpy+0xc>
 80092f6:	4770      	bx	lr
 80092f8:	b510      	push	{r4, lr}
 80092fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009302:	4291      	cmp	r1, r2
 8009304:	d1f9      	bne.n	80092fa <memcpy+0xe>
 8009306:	bd10      	pop	{r4, pc}

08009308 <_Balloc>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800930c:	4604      	mov	r4, r0
 800930e:	460d      	mov	r5, r1
 8009310:	b976      	cbnz	r6, 8009330 <_Balloc+0x28>
 8009312:	2010      	movs	r0, #16
 8009314:	f7ff ffd0 	bl	80092b8 <malloc>
 8009318:	4602      	mov	r2, r0
 800931a:	6260      	str	r0, [r4, #36]	; 0x24
 800931c:	b920      	cbnz	r0, 8009328 <_Balloc+0x20>
 800931e:	4b18      	ldr	r3, [pc, #96]	; (8009380 <_Balloc+0x78>)
 8009320:	4818      	ldr	r0, [pc, #96]	; (8009384 <_Balloc+0x7c>)
 8009322:	2166      	movs	r1, #102	; 0x66
 8009324:	f001 f9b0 	bl	800a688 <__assert_func>
 8009328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800932c:	6006      	str	r6, [r0, #0]
 800932e:	60c6      	str	r6, [r0, #12]
 8009330:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009332:	68f3      	ldr	r3, [r6, #12]
 8009334:	b183      	cbz	r3, 8009358 <_Balloc+0x50>
 8009336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800933e:	b9b8      	cbnz	r0, 8009370 <_Balloc+0x68>
 8009340:	2101      	movs	r1, #1
 8009342:	fa01 f605 	lsl.w	r6, r1, r5
 8009346:	1d72      	adds	r2, r6, #5
 8009348:	0092      	lsls	r2, r2, #2
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fc9d 	bl	8009c8a <_calloc_r>
 8009350:	b160      	cbz	r0, 800936c <_Balloc+0x64>
 8009352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009356:	e00e      	b.n	8009376 <_Balloc+0x6e>
 8009358:	2221      	movs	r2, #33	; 0x21
 800935a:	2104      	movs	r1, #4
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fc94 	bl	8009c8a <_calloc_r>
 8009362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009364:	60f0      	str	r0, [r6, #12]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e4      	bne.n	8009336 <_Balloc+0x2e>
 800936c:	2000      	movs	r0, #0
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	6802      	ldr	r2, [r0, #0]
 8009372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009376:	2300      	movs	r3, #0
 8009378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800937c:	e7f7      	b.n	800936e <_Balloc+0x66>
 800937e:	bf00      	nop
 8009380:	0800aae6 	.word	0x0800aae6
 8009384:	0800ac48 	.word	0x0800ac48

08009388 <_Bfree>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800938c:	4605      	mov	r5, r0
 800938e:	460c      	mov	r4, r1
 8009390:	b976      	cbnz	r6, 80093b0 <_Bfree+0x28>
 8009392:	2010      	movs	r0, #16
 8009394:	f7ff ff90 	bl	80092b8 <malloc>
 8009398:	4602      	mov	r2, r0
 800939a:	6268      	str	r0, [r5, #36]	; 0x24
 800939c:	b920      	cbnz	r0, 80093a8 <_Bfree+0x20>
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <_Bfree+0x3c>)
 80093a0:	4809      	ldr	r0, [pc, #36]	; (80093c8 <_Bfree+0x40>)
 80093a2:	218a      	movs	r1, #138	; 0x8a
 80093a4:	f001 f970 	bl	800a688 <__assert_func>
 80093a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093ac:	6006      	str	r6, [r0, #0]
 80093ae:	60c6      	str	r6, [r0, #12]
 80093b0:	b13c      	cbz	r4, 80093c2 <_Bfree+0x3a>
 80093b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093b4:	6862      	ldr	r2, [r4, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093bc:	6021      	str	r1, [r4, #0]
 80093be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	0800aae6 	.word	0x0800aae6
 80093c8:	0800ac48 	.word	0x0800ac48

080093cc <__multadd>:
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	690d      	ldr	r5, [r1, #16]
 80093d2:	4607      	mov	r7, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	461e      	mov	r6, r3
 80093d8:	f101 0c14 	add.w	ip, r1, #20
 80093dc:	2000      	movs	r0, #0
 80093de:	f8dc 3000 	ldr.w	r3, [ip]
 80093e2:	b299      	uxth	r1, r3
 80093e4:	fb02 6101 	mla	r1, r2, r1, r6
 80093e8:	0c1e      	lsrs	r6, r3, #16
 80093ea:	0c0b      	lsrs	r3, r1, #16
 80093ec:	fb02 3306 	mla	r3, r2, r6, r3
 80093f0:	b289      	uxth	r1, r1
 80093f2:	3001      	adds	r0, #1
 80093f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093f8:	4285      	cmp	r5, r0
 80093fa:	f84c 1b04 	str.w	r1, [ip], #4
 80093fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009402:	dcec      	bgt.n	80093de <__multadd+0x12>
 8009404:	b30e      	cbz	r6, 800944a <__multadd+0x7e>
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	42ab      	cmp	r3, r5
 800940a:	dc19      	bgt.n	8009440 <__multadd+0x74>
 800940c:	6861      	ldr	r1, [r4, #4]
 800940e:	4638      	mov	r0, r7
 8009410:	3101      	adds	r1, #1
 8009412:	f7ff ff79 	bl	8009308 <_Balloc>
 8009416:	4680      	mov	r8, r0
 8009418:	b928      	cbnz	r0, 8009426 <__multadd+0x5a>
 800941a:	4602      	mov	r2, r0
 800941c:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <__multadd+0x84>)
 800941e:	480d      	ldr	r0, [pc, #52]	; (8009454 <__multadd+0x88>)
 8009420:	21b5      	movs	r1, #181	; 0xb5
 8009422:	f001 f931 	bl	800a688 <__assert_func>
 8009426:	6922      	ldr	r2, [r4, #16]
 8009428:	3202      	adds	r2, #2
 800942a:	f104 010c 	add.w	r1, r4, #12
 800942e:	0092      	lsls	r2, r2, #2
 8009430:	300c      	adds	r0, #12
 8009432:	f7ff ff5b 	bl	80092ec <memcpy>
 8009436:	4621      	mov	r1, r4
 8009438:	4638      	mov	r0, r7
 800943a:	f7ff ffa5 	bl	8009388 <_Bfree>
 800943e:	4644      	mov	r4, r8
 8009440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009444:	3501      	adds	r5, #1
 8009446:	615e      	str	r6, [r3, #20]
 8009448:	6125      	str	r5, [r4, #16]
 800944a:	4620      	mov	r0, r4
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	0800ab58 	.word	0x0800ab58
 8009454:	0800ac48 	.word	0x0800ac48

08009458 <__s2b>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	4615      	mov	r5, r2
 8009460:	461f      	mov	r7, r3
 8009462:	2209      	movs	r2, #9
 8009464:	3308      	adds	r3, #8
 8009466:	4606      	mov	r6, r0
 8009468:	fb93 f3f2 	sdiv	r3, r3, r2
 800946c:	2100      	movs	r1, #0
 800946e:	2201      	movs	r2, #1
 8009470:	429a      	cmp	r2, r3
 8009472:	db09      	blt.n	8009488 <__s2b+0x30>
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff ff47 	bl	8009308 <_Balloc>
 800947a:	b940      	cbnz	r0, 800948e <__s2b+0x36>
 800947c:	4602      	mov	r2, r0
 800947e:	4b19      	ldr	r3, [pc, #100]	; (80094e4 <__s2b+0x8c>)
 8009480:	4819      	ldr	r0, [pc, #100]	; (80094e8 <__s2b+0x90>)
 8009482:	21ce      	movs	r1, #206	; 0xce
 8009484:	f001 f900 	bl	800a688 <__assert_func>
 8009488:	0052      	lsls	r2, r2, #1
 800948a:	3101      	adds	r1, #1
 800948c:	e7f0      	b.n	8009470 <__s2b+0x18>
 800948e:	9b08      	ldr	r3, [sp, #32]
 8009490:	6143      	str	r3, [r0, #20]
 8009492:	2d09      	cmp	r5, #9
 8009494:	f04f 0301 	mov.w	r3, #1
 8009498:	6103      	str	r3, [r0, #16]
 800949a:	dd16      	ble.n	80094ca <__s2b+0x72>
 800949c:	f104 0909 	add.w	r9, r4, #9
 80094a0:	46c8      	mov	r8, r9
 80094a2:	442c      	add	r4, r5
 80094a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094a8:	4601      	mov	r1, r0
 80094aa:	3b30      	subs	r3, #48	; 0x30
 80094ac:	220a      	movs	r2, #10
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff ff8c 	bl	80093cc <__multadd>
 80094b4:	45a0      	cmp	r8, r4
 80094b6:	d1f5      	bne.n	80094a4 <__s2b+0x4c>
 80094b8:	f1a5 0408 	sub.w	r4, r5, #8
 80094bc:	444c      	add	r4, r9
 80094be:	1b2d      	subs	r5, r5, r4
 80094c0:	1963      	adds	r3, r4, r5
 80094c2:	42bb      	cmp	r3, r7
 80094c4:	db04      	blt.n	80094d0 <__s2b+0x78>
 80094c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ca:	340a      	adds	r4, #10
 80094cc:	2509      	movs	r5, #9
 80094ce:	e7f6      	b.n	80094be <__s2b+0x66>
 80094d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094d4:	4601      	mov	r1, r0
 80094d6:	3b30      	subs	r3, #48	; 0x30
 80094d8:	220a      	movs	r2, #10
 80094da:	4630      	mov	r0, r6
 80094dc:	f7ff ff76 	bl	80093cc <__multadd>
 80094e0:	e7ee      	b.n	80094c0 <__s2b+0x68>
 80094e2:	bf00      	nop
 80094e4:	0800ab58 	.word	0x0800ab58
 80094e8:	0800ac48 	.word	0x0800ac48

080094ec <__hi0bits>:
 80094ec:	0c03      	lsrs	r3, r0, #16
 80094ee:	041b      	lsls	r3, r3, #16
 80094f0:	b9d3      	cbnz	r3, 8009528 <__hi0bits+0x3c>
 80094f2:	0400      	lsls	r0, r0, #16
 80094f4:	2310      	movs	r3, #16
 80094f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094fa:	bf04      	itt	eq
 80094fc:	0200      	lsleq	r0, r0, #8
 80094fe:	3308      	addeq	r3, #8
 8009500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009504:	bf04      	itt	eq
 8009506:	0100      	lsleq	r0, r0, #4
 8009508:	3304      	addeq	r3, #4
 800950a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800950e:	bf04      	itt	eq
 8009510:	0080      	lsleq	r0, r0, #2
 8009512:	3302      	addeq	r3, #2
 8009514:	2800      	cmp	r0, #0
 8009516:	db05      	blt.n	8009524 <__hi0bits+0x38>
 8009518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800951c:	f103 0301 	add.w	r3, r3, #1
 8009520:	bf08      	it	eq
 8009522:	2320      	moveq	r3, #32
 8009524:	4618      	mov	r0, r3
 8009526:	4770      	bx	lr
 8009528:	2300      	movs	r3, #0
 800952a:	e7e4      	b.n	80094f6 <__hi0bits+0xa>

0800952c <__lo0bits>:
 800952c:	6803      	ldr	r3, [r0, #0]
 800952e:	f013 0207 	ands.w	r2, r3, #7
 8009532:	4601      	mov	r1, r0
 8009534:	d00b      	beq.n	800954e <__lo0bits+0x22>
 8009536:	07da      	lsls	r2, r3, #31
 8009538:	d423      	bmi.n	8009582 <__lo0bits+0x56>
 800953a:	0798      	lsls	r0, r3, #30
 800953c:	bf49      	itett	mi
 800953e:	085b      	lsrmi	r3, r3, #1
 8009540:	089b      	lsrpl	r3, r3, #2
 8009542:	2001      	movmi	r0, #1
 8009544:	600b      	strmi	r3, [r1, #0]
 8009546:	bf5c      	itt	pl
 8009548:	600b      	strpl	r3, [r1, #0]
 800954a:	2002      	movpl	r0, #2
 800954c:	4770      	bx	lr
 800954e:	b298      	uxth	r0, r3
 8009550:	b9a8      	cbnz	r0, 800957e <__lo0bits+0x52>
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	2010      	movs	r0, #16
 8009556:	b2da      	uxtb	r2, r3
 8009558:	b90a      	cbnz	r2, 800955e <__lo0bits+0x32>
 800955a:	3008      	adds	r0, #8
 800955c:	0a1b      	lsrs	r3, r3, #8
 800955e:	071a      	lsls	r2, r3, #28
 8009560:	bf04      	itt	eq
 8009562:	091b      	lsreq	r3, r3, #4
 8009564:	3004      	addeq	r0, #4
 8009566:	079a      	lsls	r2, r3, #30
 8009568:	bf04      	itt	eq
 800956a:	089b      	lsreq	r3, r3, #2
 800956c:	3002      	addeq	r0, #2
 800956e:	07da      	lsls	r2, r3, #31
 8009570:	d403      	bmi.n	800957a <__lo0bits+0x4e>
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	f100 0001 	add.w	r0, r0, #1
 8009578:	d005      	beq.n	8009586 <__lo0bits+0x5a>
 800957a:	600b      	str	r3, [r1, #0]
 800957c:	4770      	bx	lr
 800957e:	4610      	mov	r0, r2
 8009580:	e7e9      	b.n	8009556 <__lo0bits+0x2a>
 8009582:	2000      	movs	r0, #0
 8009584:	4770      	bx	lr
 8009586:	2020      	movs	r0, #32
 8009588:	4770      	bx	lr
	...

0800958c <__i2b>:
 800958c:	b510      	push	{r4, lr}
 800958e:	460c      	mov	r4, r1
 8009590:	2101      	movs	r1, #1
 8009592:	f7ff feb9 	bl	8009308 <_Balloc>
 8009596:	4602      	mov	r2, r0
 8009598:	b928      	cbnz	r0, 80095a6 <__i2b+0x1a>
 800959a:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <__i2b+0x24>)
 800959c:	4805      	ldr	r0, [pc, #20]	; (80095b4 <__i2b+0x28>)
 800959e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095a2:	f001 f871 	bl	800a688 <__assert_func>
 80095a6:	2301      	movs	r3, #1
 80095a8:	6144      	str	r4, [r0, #20]
 80095aa:	6103      	str	r3, [r0, #16]
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	bf00      	nop
 80095b0:	0800ab58 	.word	0x0800ab58
 80095b4:	0800ac48 	.word	0x0800ac48

080095b8 <__multiply>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	4691      	mov	r9, r2
 80095be:	690a      	ldr	r2, [r1, #16]
 80095c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	bfb8      	it	lt
 80095c8:	460b      	movlt	r3, r1
 80095ca:	460c      	mov	r4, r1
 80095cc:	bfbc      	itt	lt
 80095ce:	464c      	movlt	r4, r9
 80095d0:	4699      	movlt	r9, r3
 80095d2:	6927      	ldr	r7, [r4, #16]
 80095d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	6861      	ldr	r1, [r4, #4]
 80095dc:	eb07 060a 	add.w	r6, r7, sl
 80095e0:	42b3      	cmp	r3, r6
 80095e2:	b085      	sub	sp, #20
 80095e4:	bfb8      	it	lt
 80095e6:	3101      	addlt	r1, #1
 80095e8:	f7ff fe8e 	bl	8009308 <_Balloc>
 80095ec:	b930      	cbnz	r0, 80095fc <__multiply+0x44>
 80095ee:	4602      	mov	r2, r0
 80095f0:	4b44      	ldr	r3, [pc, #272]	; (8009704 <__multiply+0x14c>)
 80095f2:	4845      	ldr	r0, [pc, #276]	; (8009708 <__multiply+0x150>)
 80095f4:	f240 115d 	movw	r1, #349	; 0x15d
 80095f8:	f001 f846 	bl	800a688 <__assert_func>
 80095fc:	f100 0514 	add.w	r5, r0, #20
 8009600:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009604:	462b      	mov	r3, r5
 8009606:	2200      	movs	r2, #0
 8009608:	4543      	cmp	r3, r8
 800960a:	d321      	bcc.n	8009650 <__multiply+0x98>
 800960c:	f104 0314 	add.w	r3, r4, #20
 8009610:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009614:	f109 0314 	add.w	r3, r9, #20
 8009618:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800961c:	9202      	str	r2, [sp, #8]
 800961e:	1b3a      	subs	r2, r7, r4
 8009620:	3a15      	subs	r2, #21
 8009622:	f022 0203 	bic.w	r2, r2, #3
 8009626:	3204      	adds	r2, #4
 8009628:	f104 0115 	add.w	r1, r4, #21
 800962c:	428f      	cmp	r7, r1
 800962e:	bf38      	it	cc
 8009630:	2204      	movcc	r2, #4
 8009632:	9201      	str	r2, [sp, #4]
 8009634:	9a02      	ldr	r2, [sp, #8]
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	429a      	cmp	r2, r3
 800963a:	d80c      	bhi.n	8009656 <__multiply+0x9e>
 800963c:	2e00      	cmp	r6, #0
 800963e:	dd03      	ble.n	8009648 <__multiply+0x90>
 8009640:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009644:	2b00      	cmp	r3, #0
 8009646:	d05a      	beq.n	80096fe <__multiply+0x146>
 8009648:	6106      	str	r6, [r0, #16]
 800964a:	b005      	add	sp, #20
 800964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009650:	f843 2b04 	str.w	r2, [r3], #4
 8009654:	e7d8      	b.n	8009608 <__multiply+0x50>
 8009656:	f8b3 a000 	ldrh.w	sl, [r3]
 800965a:	f1ba 0f00 	cmp.w	sl, #0
 800965e:	d024      	beq.n	80096aa <__multiply+0xf2>
 8009660:	f104 0e14 	add.w	lr, r4, #20
 8009664:	46a9      	mov	r9, r5
 8009666:	f04f 0c00 	mov.w	ip, #0
 800966a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800966e:	f8d9 1000 	ldr.w	r1, [r9]
 8009672:	fa1f fb82 	uxth.w	fp, r2
 8009676:	b289      	uxth	r1, r1
 8009678:	fb0a 110b 	mla	r1, sl, fp, r1
 800967c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009680:	f8d9 2000 	ldr.w	r2, [r9]
 8009684:	4461      	add	r1, ip
 8009686:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800968a:	fb0a c20b 	mla	r2, sl, fp, ip
 800968e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009692:	b289      	uxth	r1, r1
 8009694:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009698:	4577      	cmp	r7, lr
 800969a:	f849 1b04 	str.w	r1, [r9], #4
 800969e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096a2:	d8e2      	bhi.n	800966a <__multiply+0xb2>
 80096a4:	9a01      	ldr	r2, [sp, #4]
 80096a6:	f845 c002 	str.w	ip, [r5, r2]
 80096aa:	9a03      	ldr	r2, [sp, #12]
 80096ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096b0:	3304      	adds	r3, #4
 80096b2:	f1b9 0f00 	cmp.w	r9, #0
 80096b6:	d020      	beq.n	80096fa <__multiply+0x142>
 80096b8:	6829      	ldr	r1, [r5, #0]
 80096ba:	f104 0c14 	add.w	ip, r4, #20
 80096be:	46ae      	mov	lr, r5
 80096c0:	f04f 0a00 	mov.w	sl, #0
 80096c4:	f8bc b000 	ldrh.w	fp, [ip]
 80096c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096cc:	fb09 220b 	mla	r2, r9, fp, r2
 80096d0:	4492      	add	sl, r2
 80096d2:	b289      	uxth	r1, r1
 80096d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096d8:	f84e 1b04 	str.w	r1, [lr], #4
 80096dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096e0:	f8be 1000 	ldrh.w	r1, [lr]
 80096e4:	0c12      	lsrs	r2, r2, #16
 80096e6:	fb09 1102 	mla	r1, r9, r2, r1
 80096ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096ee:	4567      	cmp	r7, ip
 80096f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096f4:	d8e6      	bhi.n	80096c4 <__multiply+0x10c>
 80096f6:	9a01      	ldr	r2, [sp, #4]
 80096f8:	50a9      	str	r1, [r5, r2]
 80096fa:	3504      	adds	r5, #4
 80096fc:	e79a      	b.n	8009634 <__multiply+0x7c>
 80096fe:	3e01      	subs	r6, #1
 8009700:	e79c      	b.n	800963c <__multiply+0x84>
 8009702:	bf00      	nop
 8009704:	0800ab58 	.word	0x0800ab58
 8009708:	0800ac48 	.word	0x0800ac48

0800970c <__pow5mult>:
 800970c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009710:	4615      	mov	r5, r2
 8009712:	f012 0203 	ands.w	r2, r2, #3
 8009716:	4606      	mov	r6, r0
 8009718:	460f      	mov	r7, r1
 800971a:	d007      	beq.n	800972c <__pow5mult+0x20>
 800971c:	4c25      	ldr	r4, [pc, #148]	; (80097b4 <__pow5mult+0xa8>)
 800971e:	3a01      	subs	r2, #1
 8009720:	2300      	movs	r3, #0
 8009722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009726:	f7ff fe51 	bl	80093cc <__multadd>
 800972a:	4607      	mov	r7, r0
 800972c:	10ad      	asrs	r5, r5, #2
 800972e:	d03d      	beq.n	80097ac <__pow5mult+0xa0>
 8009730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009732:	b97c      	cbnz	r4, 8009754 <__pow5mult+0x48>
 8009734:	2010      	movs	r0, #16
 8009736:	f7ff fdbf 	bl	80092b8 <malloc>
 800973a:	4602      	mov	r2, r0
 800973c:	6270      	str	r0, [r6, #36]	; 0x24
 800973e:	b928      	cbnz	r0, 800974c <__pow5mult+0x40>
 8009740:	4b1d      	ldr	r3, [pc, #116]	; (80097b8 <__pow5mult+0xac>)
 8009742:	481e      	ldr	r0, [pc, #120]	; (80097bc <__pow5mult+0xb0>)
 8009744:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009748:	f000 ff9e 	bl	800a688 <__assert_func>
 800974c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009750:	6004      	str	r4, [r0, #0]
 8009752:	60c4      	str	r4, [r0, #12]
 8009754:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800975c:	b94c      	cbnz	r4, 8009772 <__pow5mult+0x66>
 800975e:	f240 2171 	movw	r1, #625	; 0x271
 8009762:	4630      	mov	r0, r6
 8009764:	f7ff ff12 	bl	800958c <__i2b>
 8009768:	2300      	movs	r3, #0
 800976a:	f8c8 0008 	str.w	r0, [r8, #8]
 800976e:	4604      	mov	r4, r0
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	f04f 0900 	mov.w	r9, #0
 8009776:	07eb      	lsls	r3, r5, #31
 8009778:	d50a      	bpl.n	8009790 <__pow5mult+0x84>
 800977a:	4639      	mov	r1, r7
 800977c:	4622      	mov	r2, r4
 800977e:	4630      	mov	r0, r6
 8009780:	f7ff ff1a 	bl	80095b8 <__multiply>
 8009784:	4639      	mov	r1, r7
 8009786:	4680      	mov	r8, r0
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fdfd 	bl	8009388 <_Bfree>
 800978e:	4647      	mov	r7, r8
 8009790:	106d      	asrs	r5, r5, #1
 8009792:	d00b      	beq.n	80097ac <__pow5mult+0xa0>
 8009794:	6820      	ldr	r0, [r4, #0]
 8009796:	b938      	cbnz	r0, 80097a8 <__pow5mult+0x9c>
 8009798:	4622      	mov	r2, r4
 800979a:	4621      	mov	r1, r4
 800979c:	4630      	mov	r0, r6
 800979e:	f7ff ff0b 	bl	80095b8 <__multiply>
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	f8c0 9000 	str.w	r9, [r0]
 80097a8:	4604      	mov	r4, r0
 80097aa:	e7e4      	b.n	8009776 <__pow5mult+0x6a>
 80097ac:	4638      	mov	r0, r7
 80097ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b2:	bf00      	nop
 80097b4:	0800ad98 	.word	0x0800ad98
 80097b8:	0800aae6 	.word	0x0800aae6
 80097bc:	0800ac48 	.word	0x0800ac48

080097c0 <__lshift>:
 80097c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c4:	460c      	mov	r4, r1
 80097c6:	6849      	ldr	r1, [r1, #4]
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097ce:	68a3      	ldr	r3, [r4, #8]
 80097d0:	4607      	mov	r7, r0
 80097d2:	4691      	mov	r9, r2
 80097d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097d8:	f108 0601 	add.w	r6, r8, #1
 80097dc:	42b3      	cmp	r3, r6
 80097de:	db0b      	blt.n	80097f8 <__lshift+0x38>
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7ff fd91 	bl	8009308 <_Balloc>
 80097e6:	4605      	mov	r5, r0
 80097e8:	b948      	cbnz	r0, 80097fe <__lshift+0x3e>
 80097ea:	4602      	mov	r2, r0
 80097ec:	4b2a      	ldr	r3, [pc, #168]	; (8009898 <__lshift+0xd8>)
 80097ee:	482b      	ldr	r0, [pc, #172]	; (800989c <__lshift+0xdc>)
 80097f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097f4:	f000 ff48 	bl	800a688 <__assert_func>
 80097f8:	3101      	adds	r1, #1
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	e7ee      	b.n	80097dc <__lshift+0x1c>
 80097fe:	2300      	movs	r3, #0
 8009800:	f100 0114 	add.w	r1, r0, #20
 8009804:	f100 0210 	add.w	r2, r0, #16
 8009808:	4618      	mov	r0, r3
 800980a:	4553      	cmp	r3, sl
 800980c:	db37      	blt.n	800987e <__lshift+0xbe>
 800980e:	6920      	ldr	r0, [r4, #16]
 8009810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009814:	f104 0314 	add.w	r3, r4, #20
 8009818:	f019 091f 	ands.w	r9, r9, #31
 800981c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009820:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009824:	d02f      	beq.n	8009886 <__lshift+0xc6>
 8009826:	f1c9 0e20 	rsb	lr, r9, #32
 800982a:	468a      	mov	sl, r1
 800982c:	f04f 0c00 	mov.w	ip, #0
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	fa02 f209 	lsl.w	r2, r2, r9
 8009836:	ea42 020c 	orr.w	r2, r2, ip
 800983a:	f84a 2b04 	str.w	r2, [sl], #4
 800983e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009842:	4298      	cmp	r0, r3
 8009844:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009848:	d8f2      	bhi.n	8009830 <__lshift+0x70>
 800984a:	1b03      	subs	r3, r0, r4
 800984c:	3b15      	subs	r3, #21
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	3304      	adds	r3, #4
 8009854:	f104 0215 	add.w	r2, r4, #21
 8009858:	4290      	cmp	r0, r2
 800985a:	bf38      	it	cc
 800985c:	2304      	movcc	r3, #4
 800985e:	f841 c003 	str.w	ip, [r1, r3]
 8009862:	f1bc 0f00 	cmp.w	ip, #0
 8009866:	d001      	beq.n	800986c <__lshift+0xac>
 8009868:	f108 0602 	add.w	r6, r8, #2
 800986c:	3e01      	subs	r6, #1
 800986e:	4638      	mov	r0, r7
 8009870:	612e      	str	r6, [r5, #16]
 8009872:	4621      	mov	r1, r4
 8009874:	f7ff fd88 	bl	8009388 <_Bfree>
 8009878:	4628      	mov	r0, r5
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009882:	3301      	adds	r3, #1
 8009884:	e7c1      	b.n	800980a <__lshift+0x4a>
 8009886:	3904      	subs	r1, #4
 8009888:	f853 2b04 	ldr.w	r2, [r3], #4
 800988c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009890:	4298      	cmp	r0, r3
 8009892:	d8f9      	bhi.n	8009888 <__lshift+0xc8>
 8009894:	e7ea      	b.n	800986c <__lshift+0xac>
 8009896:	bf00      	nop
 8009898:	0800ab58 	.word	0x0800ab58
 800989c:	0800ac48 	.word	0x0800ac48

080098a0 <__mcmp>:
 80098a0:	b530      	push	{r4, r5, lr}
 80098a2:	6902      	ldr	r2, [r0, #16]
 80098a4:	690c      	ldr	r4, [r1, #16]
 80098a6:	1b12      	subs	r2, r2, r4
 80098a8:	d10e      	bne.n	80098c8 <__mcmp+0x28>
 80098aa:	f100 0314 	add.w	r3, r0, #20
 80098ae:	3114      	adds	r1, #20
 80098b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098c0:	42a5      	cmp	r5, r4
 80098c2:	d003      	beq.n	80098cc <__mcmp+0x2c>
 80098c4:	d305      	bcc.n	80098d2 <__mcmp+0x32>
 80098c6:	2201      	movs	r2, #1
 80098c8:	4610      	mov	r0, r2
 80098ca:	bd30      	pop	{r4, r5, pc}
 80098cc:	4283      	cmp	r3, r0
 80098ce:	d3f3      	bcc.n	80098b8 <__mcmp+0x18>
 80098d0:	e7fa      	b.n	80098c8 <__mcmp+0x28>
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	e7f7      	b.n	80098c8 <__mcmp+0x28>

080098d8 <__mdiff>:
 80098d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	460c      	mov	r4, r1
 80098de:	4606      	mov	r6, r0
 80098e0:	4611      	mov	r1, r2
 80098e2:	4620      	mov	r0, r4
 80098e4:	4690      	mov	r8, r2
 80098e6:	f7ff ffdb 	bl	80098a0 <__mcmp>
 80098ea:	1e05      	subs	r5, r0, #0
 80098ec:	d110      	bne.n	8009910 <__mdiff+0x38>
 80098ee:	4629      	mov	r1, r5
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff fd09 	bl	8009308 <_Balloc>
 80098f6:	b930      	cbnz	r0, 8009906 <__mdiff+0x2e>
 80098f8:	4b3a      	ldr	r3, [pc, #232]	; (80099e4 <__mdiff+0x10c>)
 80098fa:	4602      	mov	r2, r0
 80098fc:	f240 2132 	movw	r1, #562	; 0x232
 8009900:	4839      	ldr	r0, [pc, #228]	; (80099e8 <__mdiff+0x110>)
 8009902:	f000 fec1 	bl	800a688 <__assert_func>
 8009906:	2301      	movs	r3, #1
 8009908:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800990c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009910:	bfa4      	itt	ge
 8009912:	4643      	movge	r3, r8
 8009914:	46a0      	movge	r8, r4
 8009916:	4630      	mov	r0, r6
 8009918:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800991c:	bfa6      	itte	ge
 800991e:	461c      	movge	r4, r3
 8009920:	2500      	movge	r5, #0
 8009922:	2501      	movlt	r5, #1
 8009924:	f7ff fcf0 	bl	8009308 <_Balloc>
 8009928:	b920      	cbnz	r0, 8009934 <__mdiff+0x5c>
 800992a:	4b2e      	ldr	r3, [pc, #184]	; (80099e4 <__mdiff+0x10c>)
 800992c:	4602      	mov	r2, r0
 800992e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009932:	e7e5      	b.n	8009900 <__mdiff+0x28>
 8009934:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009938:	6926      	ldr	r6, [r4, #16]
 800993a:	60c5      	str	r5, [r0, #12]
 800993c:	f104 0914 	add.w	r9, r4, #20
 8009940:	f108 0514 	add.w	r5, r8, #20
 8009944:	f100 0e14 	add.w	lr, r0, #20
 8009948:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800994c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009950:	f108 0210 	add.w	r2, r8, #16
 8009954:	46f2      	mov	sl, lr
 8009956:	2100      	movs	r1, #0
 8009958:	f859 3b04 	ldr.w	r3, [r9], #4
 800995c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009960:	fa1f f883 	uxth.w	r8, r3
 8009964:	fa11 f18b 	uxtah	r1, r1, fp
 8009968:	0c1b      	lsrs	r3, r3, #16
 800996a:	eba1 0808 	sub.w	r8, r1, r8
 800996e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009972:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009976:	fa1f f888 	uxth.w	r8, r8
 800997a:	1419      	asrs	r1, r3, #16
 800997c:	454e      	cmp	r6, r9
 800997e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009982:	f84a 3b04 	str.w	r3, [sl], #4
 8009986:	d8e7      	bhi.n	8009958 <__mdiff+0x80>
 8009988:	1b33      	subs	r3, r6, r4
 800998a:	3b15      	subs	r3, #21
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	3304      	adds	r3, #4
 8009992:	3415      	adds	r4, #21
 8009994:	42a6      	cmp	r6, r4
 8009996:	bf38      	it	cc
 8009998:	2304      	movcc	r3, #4
 800999a:	441d      	add	r5, r3
 800999c:	4473      	add	r3, lr
 800999e:	469e      	mov	lr, r3
 80099a0:	462e      	mov	r6, r5
 80099a2:	4566      	cmp	r6, ip
 80099a4:	d30e      	bcc.n	80099c4 <__mdiff+0xec>
 80099a6:	f10c 0203 	add.w	r2, ip, #3
 80099aa:	1b52      	subs	r2, r2, r5
 80099ac:	f022 0203 	bic.w	r2, r2, #3
 80099b0:	3d03      	subs	r5, #3
 80099b2:	45ac      	cmp	ip, r5
 80099b4:	bf38      	it	cc
 80099b6:	2200      	movcc	r2, #0
 80099b8:	441a      	add	r2, r3
 80099ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099be:	b17b      	cbz	r3, 80099e0 <__mdiff+0x108>
 80099c0:	6107      	str	r7, [r0, #16]
 80099c2:	e7a3      	b.n	800990c <__mdiff+0x34>
 80099c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80099c8:	fa11 f288 	uxtah	r2, r1, r8
 80099cc:	1414      	asrs	r4, r2, #16
 80099ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099d2:	b292      	uxth	r2, r2
 80099d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099d8:	f84e 2b04 	str.w	r2, [lr], #4
 80099dc:	1421      	asrs	r1, r4, #16
 80099de:	e7e0      	b.n	80099a2 <__mdiff+0xca>
 80099e0:	3f01      	subs	r7, #1
 80099e2:	e7ea      	b.n	80099ba <__mdiff+0xe2>
 80099e4:	0800ab58 	.word	0x0800ab58
 80099e8:	0800ac48 	.word	0x0800ac48

080099ec <__ulp>:
 80099ec:	b082      	sub	sp, #8
 80099ee:	ed8d 0b00 	vstr	d0, [sp]
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	4912      	ldr	r1, [pc, #72]	; (8009a40 <__ulp+0x54>)
 80099f6:	4019      	ands	r1, r3
 80099f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80099fc:	2900      	cmp	r1, #0
 80099fe:	dd05      	ble.n	8009a0c <__ulp+0x20>
 8009a00:	2200      	movs	r2, #0
 8009a02:	460b      	mov	r3, r1
 8009a04:	ec43 2b10 	vmov	d0, r2, r3
 8009a08:	b002      	add	sp, #8
 8009a0a:	4770      	bx	lr
 8009a0c:	4249      	negs	r1, r1
 8009a0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009a12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009a16:	f04f 0200 	mov.w	r2, #0
 8009a1a:	f04f 0300 	mov.w	r3, #0
 8009a1e:	da04      	bge.n	8009a2a <__ulp+0x3e>
 8009a20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009a24:	fa41 f300 	asr.w	r3, r1, r0
 8009a28:	e7ec      	b.n	8009a04 <__ulp+0x18>
 8009a2a:	f1a0 0114 	sub.w	r1, r0, #20
 8009a2e:	291e      	cmp	r1, #30
 8009a30:	bfda      	itte	le
 8009a32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009a36:	fa20 f101 	lsrle.w	r1, r0, r1
 8009a3a:	2101      	movgt	r1, #1
 8009a3c:	460a      	mov	r2, r1
 8009a3e:	e7e1      	b.n	8009a04 <__ulp+0x18>
 8009a40:	7ff00000 	.word	0x7ff00000

08009a44 <__b2d>:
 8009a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a46:	6905      	ldr	r5, [r0, #16]
 8009a48:	f100 0714 	add.w	r7, r0, #20
 8009a4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a50:	1f2e      	subs	r6, r5, #4
 8009a52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff fd48 	bl	80094ec <__hi0bits>
 8009a5c:	f1c0 0320 	rsb	r3, r0, #32
 8009a60:	280a      	cmp	r0, #10
 8009a62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009ae0 <__b2d+0x9c>
 8009a66:	600b      	str	r3, [r1, #0]
 8009a68:	dc14      	bgt.n	8009a94 <__b2d+0x50>
 8009a6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a72:	42b7      	cmp	r7, r6
 8009a74:	ea41 030c 	orr.w	r3, r1, ip
 8009a78:	bf34      	ite	cc
 8009a7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a7e:	2100      	movcs	r1, #0
 8009a80:	3015      	adds	r0, #21
 8009a82:	fa04 f000 	lsl.w	r0, r4, r0
 8009a86:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a8a:	ea40 0201 	orr.w	r2, r0, r1
 8009a8e:	ec43 2b10 	vmov	d0, r2, r3
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	42b7      	cmp	r7, r6
 8009a96:	bf3a      	itte	cc
 8009a98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009aa0:	2100      	movcs	r1, #0
 8009aa2:	380b      	subs	r0, #11
 8009aa4:	d017      	beq.n	8009ad6 <__b2d+0x92>
 8009aa6:	f1c0 0c20 	rsb	ip, r0, #32
 8009aaa:	fa04 f500 	lsl.w	r5, r4, r0
 8009aae:	42be      	cmp	r6, r7
 8009ab0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009ab4:	ea45 0504 	orr.w	r5, r5, r4
 8009ab8:	bf8c      	ite	hi
 8009aba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009abe:	2400      	movls	r4, #0
 8009ac0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009ac4:	fa01 f000 	lsl.w	r0, r1, r0
 8009ac8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009acc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ad0:	ea40 0204 	orr.w	r2, r0, r4
 8009ad4:	e7db      	b.n	8009a8e <__b2d+0x4a>
 8009ad6:	ea44 030c 	orr.w	r3, r4, ip
 8009ada:	460a      	mov	r2, r1
 8009adc:	e7d7      	b.n	8009a8e <__b2d+0x4a>
 8009ade:	bf00      	nop
 8009ae0:	3ff00000 	.word	0x3ff00000

08009ae4 <__d2b>:
 8009ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	4689      	mov	r9, r1
 8009aea:	2101      	movs	r1, #1
 8009aec:	ec57 6b10 	vmov	r6, r7, d0
 8009af0:	4690      	mov	r8, r2
 8009af2:	f7ff fc09 	bl	8009308 <_Balloc>
 8009af6:	4604      	mov	r4, r0
 8009af8:	b930      	cbnz	r0, 8009b08 <__d2b+0x24>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b25      	ldr	r3, [pc, #148]	; (8009b94 <__d2b+0xb0>)
 8009afe:	4826      	ldr	r0, [pc, #152]	; (8009b98 <__d2b+0xb4>)
 8009b00:	f240 310a 	movw	r1, #778	; 0x30a
 8009b04:	f000 fdc0 	bl	800a688 <__assert_func>
 8009b08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b10:	bb35      	cbnz	r5, 8009b60 <__d2b+0x7c>
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	d028      	beq.n	8009b6a <__d2b+0x86>
 8009b18:	4668      	mov	r0, sp
 8009b1a:	9600      	str	r6, [sp, #0]
 8009b1c:	f7ff fd06 	bl	800952c <__lo0bits>
 8009b20:	9900      	ldr	r1, [sp, #0]
 8009b22:	b300      	cbz	r0, 8009b66 <__d2b+0x82>
 8009b24:	9a01      	ldr	r2, [sp, #4]
 8009b26:	f1c0 0320 	rsb	r3, r0, #32
 8009b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	40c2      	lsrs	r2, r0
 8009b32:	6163      	str	r3, [r4, #20]
 8009b34:	9201      	str	r2, [sp, #4]
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	61a3      	str	r3, [r4, #24]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf14      	ite	ne
 8009b3e:	2202      	movne	r2, #2
 8009b40:	2201      	moveq	r2, #1
 8009b42:	6122      	str	r2, [r4, #16]
 8009b44:	b1d5      	cbz	r5, 8009b7c <__d2b+0x98>
 8009b46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b4a:	4405      	add	r5, r0
 8009b4c:	f8c9 5000 	str.w	r5, [r9]
 8009b50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b54:	f8c8 0000 	str.w	r0, [r8]
 8009b58:	4620      	mov	r0, r4
 8009b5a:	b003      	add	sp, #12
 8009b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b64:	e7d5      	b.n	8009b12 <__d2b+0x2e>
 8009b66:	6161      	str	r1, [r4, #20]
 8009b68:	e7e5      	b.n	8009b36 <__d2b+0x52>
 8009b6a:	a801      	add	r0, sp, #4
 8009b6c:	f7ff fcde 	bl	800952c <__lo0bits>
 8009b70:	9b01      	ldr	r3, [sp, #4]
 8009b72:	6163      	str	r3, [r4, #20]
 8009b74:	2201      	movs	r2, #1
 8009b76:	6122      	str	r2, [r4, #16]
 8009b78:	3020      	adds	r0, #32
 8009b7a:	e7e3      	b.n	8009b44 <__d2b+0x60>
 8009b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b84:	f8c9 0000 	str.w	r0, [r9]
 8009b88:	6918      	ldr	r0, [r3, #16]
 8009b8a:	f7ff fcaf 	bl	80094ec <__hi0bits>
 8009b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b92:	e7df      	b.n	8009b54 <__d2b+0x70>
 8009b94:	0800ab58 	.word	0x0800ab58
 8009b98:	0800ac48 	.word	0x0800ac48

08009b9c <__ratio>:
 8009b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	4688      	mov	r8, r1
 8009ba2:	4669      	mov	r1, sp
 8009ba4:	4681      	mov	r9, r0
 8009ba6:	f7ff ff4d 	bl	8009a44 <__b2d>
 8009baa:	a901      	add	r1, sp, #4
 8009bac:	4640      	mov	r0, r8
 8009bae:	ec55 4b10 	vmov	r4, r5, d0
 8009bb2:	f7ff ff47 	bl	8009a44 <__b2d>
 8009bb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009bbe:	eba3 0c02 	sub.w	ip, r3, r2
 8009bc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009bcc:	ec51 0b10 	vmov	r0, r1, d0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bfd6      	itet	le
 8009bd4:	460a      	movle	r2, r1
 8009bd6:	462a      	movgt	r2, r5
 8009bd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009bdc:	468b      	mov	fp, r1
 8009bde:	462f      	mov	r7, r5
 8009be0:	bfd4      	ite	le
 8009be2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009be6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009bea:	4620      	mov	r0, r4
 8009bec:	ee10 2a10 	vmov	r2, s0
 8009bf0:	465b      	mov	r3, fp
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	f7f6 fe52 	bl	800089c <__aeabi_ddiv>
 8009bf8:	ec41 0b10 	vmov	d0, r0, r1
 8009bfc:	b003      	add	sp, #12
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c02 <__copybits>:
 8009c02:	3901      	subs	r1, #1
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	1149      	asrs	r1, r1, #5
 8009c08:	6914      	ldr	r4, [r2, #16]
 8009c0a:	3101      	adds	r1, #1
 8009c0c:	f102 0314 	add.w	r3, r2, #20
 8009c10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c18:	1f05      	subs	r5, r0, #4
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	d30c      	bcc.n	8009c38 <__copybits+0x36>
 8009c1e:	1aa3      	subs	r3, r4, r2
 8009c20:	3b11      	subs	r3, #17
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	3211      	adds	r2, #17
 8009c28:	42a2      	cmp	r2, r4
 8009c2a:	bf88      	it	hi
 8009c2c:	2300      	movhi	r3, #0
 8009c2e:	4418      	add	r0, r3
 8009c30:	2300      	movs	r3, #0
 8009c32:	4288      	cmp	r0, r1
 8009c34:	d305      	bcc.n	8009c42 <__copybits+0x40>
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c40:	e7eb      	b.n	8009c1a <__copybits+0x18>
 8009c42:	f840 3b04 	str.w	r3, [r0], #4
 8009c46:	e7f4      	b.n	8009c32 <__copybits+0x30>

08009c48 <__any_on>:
 8009c48:	f100 0214 	add.w	r2, r0, #20
 8009c4c:	6900      	ldr	r0, [r0, #16]
 8009c4e:	114b      	asrs	r3, r1, #5
 8009c50:	4298      	cmp	r0, r3
 8009c52:	b510      	push	{r4, lr}
 8009c54:	db11      	blt.n	8009c7a <__any_on+0x32>
 8009c56:	dd0a      	ble.n	8009c6e <__any_on+0x26>
 8009c58:	f011 011f 	ands.w	r1, r1, #31
 8009c5c:	d007      	beq.n	8009c6e <__any_on+0x26>
 8009c5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c62:	fa24 f001 	lsr.w	r0, r4, r1
 8009c66:	fa00 f101 	lsl.w	r1, r0, r1
 8009c6a:	428c      	cmp	r4, r1
 8009c6c:	d10b      	bne.n	8009c86 <__any_on+0x3e>
 8009c6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d803      	bhi.n	8009c7e <__any_on+0x36>
 8009c76:	2000      	movs	r0, #0
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	e7f7      	b.n	8009c6e <__any_on+0x26>
 8009c7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c82:	2900      	cmp	r1, #0
 8009c84:	d0f5      	beq.n	8009c72 <__any_on+0x2a>
 8009c86:	2001      	movs	r0, #1
 8009c88:	e7f6      	b.n	8009c78 <__any_on+0x30>

08009c8a <_calloc_r>:
 8009c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8c:	fba1 2402 	umull	r2, r4, r1, r2
 8009c90:	b94c      	cbnz	r4, 8009ca6 <_calloc_r+0x1c>
 8009c92:	4611      	mov	r1, r2
 8009c94:	9201      	str	r2, [sp, #4]
 8009c96:	f000 f87b 	bl	8009d90 <_malloc_r>
 8009c9a:	9a01      	ldr	r2, [sp, #4]
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	b930      	cbnz	r0, 8009cae <_calloc_r+0x24>
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	b003      	add	sp, #12
 8009ca4:	bd30      	pop	{r4, r5, pc}
 8009ca6:	220c      	movs	r2, #12
 8009ca8:	6002      	str	r2, [r0, #0]
 8009caa:	2500      	movs	r5, #0
 8009cac:	e7f8      	b.n	8009ca0 <_calloc_r+0x16>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	f7fc f8bc 	bl	8005e2c <memset>
 8009cb4:	e7f4      	b.n	8009ca0 <_calloc_r+0x16>
	...

08009cb8 <_free_r>:
 8009cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cba:	2900      	cmp	r1, #0
 8009cbc:	d044      	beq.n	8009d48 <_free_r+0x90>
 8009cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc2:	9001      	str	r0, [sp, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8009cca:	bfb8      	it	lt
 8009ccc:	18e4      	addlt	r4, r4, r3
 8009cce:	f000 fd69 	bl	800a7a4 <__malloc_lock>
 8009cd2:	4a1e      	ldr	r2, [pc, #120]	; (8009d4c <_free_r+0x94>)
 8009cd4:	9801      	ldr	r0, [sp, #4]
 8009cd6:	6813      	ldr	r3, [r2, #0]
 8009cd8:	b933      	cbnz	r3, 8009ce8 <_free_r+0x30>
 8009cda:	6063      	str	r3, [r4, #4]
 8009cdc:	6014      	str	r4, [r2, #0]
 8009cde:	b003      	add	sp, #12
 8009ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ce4:	f000 bd64 	b.w	800a7b0 <__malloc_unlock>
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	d908      	bls.n	8009cfe <_free_r+0x46>
 8009cec:	6825      	ldr	r5, [r4, #0]
 8009cee:	1961      	adds	r1, r4, r5
 8009cf0:	428b      	cmp	r3, r1
 8009cf2:	bf01      	itttt	eq
 8009cf4:	6819      	ldreq	r1, [r3, #0]
 8009cf6:	685b      	ldreq	r3, [r3, #4]
 8009cf8:	1949      	addeq	r1, r1, r5
 8009cfa:	6021      	streq	r1, [r4, #0]
 8009cfc:	e7ed      	b.n	8009cda <_free_r+0x22>
 8009cfe:	461a      	mov	r2, r3
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	b10b      	cbz	r3, 8009d08 <_free_r+0x50>
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	d9fa      	bls.n	8009cfe <_free_r+0x46>
 8009d08:	6811      	ldr	r1, [r2, #0]
 8009d0a:	1855      	adds	r5, r2, r1
 8009d0c:	42a5      	cmp	r5, r4
 8009d0e:	d10b      	bne.n	8009d28 <_free_r+0x70>
 8009d10:	6824      	ldr	r4, [r4, #0]
 8009d12:	4421      	add	r1, r4
 8009d14:	1854      	adds	r4, r2, r1
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	6011      	str	r1, [r2, #0]
 8009d1a:	d1e0      	bne.n	8009cde <_free_r+0x26>
 8009d1c:	681c      	ldr	r4, [r3, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	6053      	str	r3, [r2, #4]
 8009d22:	4421      	add	r1, r4
 8009d24:	6011      	str	r1, [r2, #0]
 8009d26:	e7da      	b.n	8009cde <_free_r+0x26>
 8009d28:	d902      	bls.n	8009d30 <_free_r+0x78>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	e7d6      	b.n	8009cde <_free_r+0x26>
 8009d30:	6825      	ldr	r5, [r4, #0]
 8009d32:	1961      	adds	r1, r4, r5
 8009d34:	428b      	cmp	r3, r1
 8009d36:	bf04      	itt	eq
 8009d38:	6819      	ldreq	r1, [r3, #0]
 8009d3a:	685b      	ldreq	r3, [r3, #4]
 8009d3c:	6063      	str	r3, [r4, #4]
 8009d3e:	bf04      	itt	eq
 8009d40:	1949      	addeq	r1, r1, r5
 8009d42:	6021      	streq	r1, [r4, #0]
 8009d44:	6054      	str	r4, [r2, #4]
 8009d46:	e7ca      	b.n	8009cde <_free_r+0x26>
 8009d48:	b003      	add	sp, #12
 8009d4a:	bd30      	pop	{r4, r5, pc}
 8009d4c:	20000358 	.word	0x20000358

08009d50 <sbrk_aligned>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	4e0e      	ldr	r6, [pc, #56]	; (8009d8c <sbrk_aligned+0x3c>)
 8009d54:	460c      	mov	r4, r1
 8009d56:	6831      	ldr	r1, [r6, #0]
 8009d58:	4605      	mov	r5, r0
 8009d5a:	b911      	cbnz	r1, 8009d62 <sbrk_aligned+0x12>
 8009d5c:	f000 fb4c 	bl	800a3f8 <_sbrk_r>
 8009d60:	6030      	str	r0, [r6, #0]
 8009d62:	4621      	mov	r1, r4
 8009d64:	4628      	mov	r0, r5
 8009d66:	f000 fb47 	bl	800a3f8 <_sbrk_r>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d00a      	beq.n	8009d84 <sbrk_aligned+0x34>
 8009d6e:	1cc4      	adds	r4, r0, #3
 8009d70:	f024 0403 	bic.w	r4, r4, #3
 8009d74:	42a0      	cmp	r0, r4
 8009d76:	d007      	beq.n	8009d88 <sbrk_aligned+0x38>
 8009d78:	1a21      	subs	r1, r4, r0
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f000 fb3c 	bl	800a3f8 <_sbrk_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d101      	bne.n	8009d88 <sbrk_aligned+0x38>
 8009d84:	f04f 34ff 	mov.w	r4, #4294967295
 8009d88:	4620      	mov	r0, r4
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	2000035c 	.word	0x2000035c

08009d90 <_malloc_r>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	1ccd      	adds	r5, r1, #3
 8009d96:	f025 0503 	bic.w	r5, r5, #3
 8009d9a:	3508      	adds	r5, #8
 8009d9c:	2d0c      	cmp	r5, #12
 8009d9e:	bf38      	it	cc
 8009da0:	250c      	movcc	r5, #12
 8009da2:	2d00      	cmp	r5, #0
 8009da4:	4607      	mov	r7, r0
 8009da6:	db01      	blt.n	8009dac <_malloc_r+0x1c>
 8009da8:	42a9      	cmp	r1, r5
 8009daa:	d905      	bls.n	8009db8 <_malloc_r+0x28>
 8009dac:	230c      	movs	r3, #12
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	2600      	movs	r6, #0
 8009db2:	4630      	mov	r0, r6
 8009db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db8:	4e2e      	ldr	r6, [pc, #184]	; (8009e74 <_malloc_r+0xe4>)
 8009dba:	f000 fcf3 	bl	800a7a4 <__malloc_lock>
 8009dbe:	6833      	ldr	r3, [r6, #0]
 8009dc0:	461c      	mov	r4, r3
 8009dc2:	bb34      	cbnz	r4, 8009e12 <_malloc_r+0x82>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	f7ff ffc2 	bl	8009d50 <sbrk_aligned>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	4604      	mov	r4, r0
 8009dd0:	d14d      	bne.n	8009e6e <_malloc_r+0xde>
 8009dd2:	6834      	ldr	r4, [r6, #0]
 8009dd4:	4626      	mov	r6, r4
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	d140      	bne.n	8009e5c <_malloc_r+0xcc>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4638      	mov	r0, r7
 8009de0:	eb04 0803 	add.w	r8, r4, r3
 8009de4:	f000 fb08 	bl	800a3f8 <_sbrk_r>
 8009de8:	4580      	cmp	r8, r0
 8009dea:	d13a      	bne.n	8009e62 <_malloc_r+0xd2>
 8009dec:	6821      	ldr	r1, [r4, #0]
 8009dee:	3503      	adds	r5, #3
 8009df0:	1a6d      	subs	r5, r5, r1
 8009df2:	f025 0503 	bic.w	r5, r5, #3
 8009df6:	3508      	adds	r5, #8
 8009df8:	2d0c      	cmp	r5, #12
 8009dfa:	bf38      	it	cc
 8009dfc:	250c      	movcc	r5, #12
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff ffa5 	bl	8009d50 <sbrk_aligned>
 8009e06:	3001      	adds	r0, #1
 8009e08:	d02b      	beq.n	8009e62 <_malloc_r+0xd2>
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	442b      	add	r3, r5
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	e00e      	b.n	8009e30 <_malloc_r+0xa0>
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	1b52      	subs	r2, r2, r5
 8009e16:	d41e      	bmi.n	8009e56 <_malloc_r+0xc6>
 8009e18:	2a0b      	cmp	r2, #11
 8009e1a:	d916      	bls.n	8009e4a <_malloc_r+0xba>
 8009e1c:	1961      	adds	r1, r4, r5
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	6025      	str	r5, [r4, #0]
 8009e22:	bf18      	it	ne
 8009e24:	6059      	strne	r1, [r3, #4]
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	bf08      	it	eq
 8009e2a:	6031      	streq	r1, [r6, #0]
 8009e2c:	5162      	str	r2, [r4, r5]
 8009e2e:	604b      	str	r3, [r1, #4]
 8009e30:	4638      	mov	r0, r7
 8009e32:	f104 060b 	add.w	r6, r4, #11
 8009e36:	f000 fcbb 	bl	800a7b0 <__malloc_unlock>
 8009e3a:	f026 0607 	bic.w	r6, r6, #7
 8009e3e:	1d23      	adds	r3, r4, #4
 8009e40:	1af2      	subs	r2, r6, r3
 8009e42:	d0b6      	beq.n	8009db2 <_malloc_r+0x22>
 8009e44:	1b9b      	subs	r3, r3, r6
 8009e46:	50a3      	str	r3, [r4, r2]
 8009e48:	e7b3      	b.n	8009db2 <_malloc_r+0x22>
 8009e4a:	6862      	ldr	r2, [r4, #4]
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	bf0c      	ite	eq
 8009e50:	6032      	streq	r2, [r6, #0]
 8009e52:	605a      	strne	r2, [r3, #4]
 8009e54:	e7ec      	b.n	8009e30 <_malloc_r+0xa0>
 8009e56:	4623      	mov	r3, r4
 8009e58:	6864      	ldr	r4, [r4, #4]
 8009e5a:	e7b2      	b.n	8009dc2 <_malloc_r+0x32>
 8009e5c:	4634      	mov	r4, r6
 8009e5e:	6876      	ldr	r6, [r6, #4]
 8009e60:	e7b9      	b.n	8009dd6 <_malloc_r+0x46>
 8009e62:	230c      	movs	r3, #12
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4638      	mov	r0, r7
 8009e68:	f000 fca2 	bl	800a7b0 <__malloc_unlock>
 8009e6c:	e7a1      	b.n	8009db2 <_malloc_r+0x22>
 8009e6e:	6025      	str	r5, [r4, #0]
 8009e70:	e7de      	b.n	8009e30 <_malloc_r+0xa0>
 8009e72:	bf00      	nop
 8009e74:	20000358 	.word	0x20000358

08009e78 <__ssputs_r>:
 8009e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	688e      	ldr	r6, [r1, #8]
 8009e7e:	429e      	cmp	r6, r3
 8009e80:	4682      	mov	sl, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4690      	mov	r8, r2
 8009e86:	461f      	mov	r7, r3
 8009e88:	d838      	bhi.n	8009efc <__ssputs_r+0x84>
 8009e8a:	898a      	ldrh	r2, [r1, #12]
 8009e8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e90:	d032      	beq.n	8009ef8 <__ssputs_r+0x80>
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	6909      	ldr	r1, [r1, #16]
 8009e96:	eba5 0901 	sub.w	r9, r5, r1
 8009e9a:	6965      	ldr	r5, [r4, #20]
 8009e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	444b      	add	r3, r9
 8009ea8:	106d      	asrs	r5, r5, #1
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf38      	it	cc
 8009eae:	461d      	movcc	r5, r3
 8009eb0:	0553      	lsls	r3, r2, #21
 8009eb2:	d531      	bpl.n	8009f18 <__ssputs_r+0xa0>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7ff ff6b 	bl	8009d90 <_malloc_r>
 8009eba:	4606      	mov	r6, r0
 8009ebc:	b950      	cbnz	r0, 8009ed4 <__ssputs_r+0x5c>
 8009ebe:	230c      	movs	r3, #12
 8009ec0:	f8ca 3000 	str.w	r3, [sl]
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed4:	6921      	ldr	r1, [r4, #16]
 8009ed6:	464a      	mov	r2, r9
 8009ed8:	f7ff fa08 	bl	80092ec <memcpy>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	6126      	str	r6, [r4, #16]
 8009eea:	6165      	str	r5, [r4, #20]
 8009eec:	444e      	add	r6, r9
 8009eee:	eba5 0509 	sub.w	r5, r5, r9
 8009ef2:	6026      	str	r6, [r4, #0]
 8009ef4:	60a5      	str	r5, [r4, #8]
 8009ef6:	463e      	mov	r6, r7
 8009ef8:	42be      	cmp	r6, r7
 8009efa:	d900      	bls.n	8009efe <__ssputs_r+0x86>
 8009efc:	463e      	mov	r6, r7
 8009efe:	6820      	ldr	r0, [r4, #0]
 8009f00:	4632      	mov	r2, r6
 8009f02:	4641      	mov	r1, r8
 8009f04:	f000 fc34 	bl	800a770 <memmove>
 8009f08:	68a3      	ldr	r3, [r4, #8]
 8009f0a:	1b9b      	subs	r3, r3, r6
 8009f0c:	60a3      	str	r3, [r4, #8]
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	4433      	add	r3, r6
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7db      	b.n	8009ed0 <__ssputs_r+0x58>
 8009f18:	462a      	mov	r2, r5
 8009f1a:	f000 fc4f 	bl	800a7bc <_realloc_r>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1e1      	bne.n	8009ee8 <__ssputs_r+0x70>
 8009f24:	6921      	ldr	r1, [r4, #16]
 8009f26:	4650      	mov	r0, sl
 8009f28:	f7ff fec6 	bl	8009cb8 <_free_r>
 8009f2c:	e7c7      	b.n	8009ebe <__ssputs_r+0x46>
	...

08009f30 <_svfiprintf_r>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	4698      	mov	r8, r3
 8009f36:	898b      	ldrh	r3, [r1, #12]
 8009f38:	061b      	lsls	r3, r3, #24
 8009f3a:	b09d      	sub	sp, #116	; 0x74
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	460d      	mov	r5, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	d50e      	bpl.n	8009f62 <_svfiprintf_r+0x32>
 8009f44:	690b      	ldr	r3, [r1, #16]
 8009f46:	b963      	cbnz	r3, 8009f62 <_svfiprintf_r+0x32>
 8009f48:	2140      	movs	r1, #64	; 0x40
 8009f4a:	f7ff ff21 	bl	8009d90 <_malloc_r>
 8009f4e:	6028      	str	r0, [r5, #0]
 8009f50:	6128      	str	r0, [r5, #16]
 8009f52:	b920      	cbnz	r0, 8009f5e <_svfiprintf_r+0x2e>
 8009f54:	230c      	movs	r3, #12
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5c:	e0d1      	b.n	800a102 <_svfiprintf_r+0x1d2>
 8009f5e:	2340      	movs	r3, #64	; 0x40
 8009f60:	616b      	str	r3, [r5, #20]
 8009f62:	2300      	movs	r3, #0
 8009f64:	9309      	str	r3, [sp, #36]	; 0x24
 8009f66:	2320      	movs	r3, #32
 8009f68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f70:	2330      	movs	r3, #48	; 0x30
 8009f72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a11c <_svfiprintf_r+0x1ec>
 8009f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f7a:	f04f 0901 	mov.w	r9, #1
 8009f7e:	4623      	mov	r3, r4
 8009f80:	469a      	mov	sl, r3
 8009f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f86:	b10a      	cbz	r2, 8009f8c <_svfiprintf_r+0x5c>
 8009f88:	2a25      	cmp	r2, #37	; 0x25
 8009f8a:	d1f9      	bne.n	8009f80 <_svfiprintf_r+0x50>
 8009f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f90:	d00b      	beq.n	8009faa <_svfiprintf_r+0x7a>
 8009f92:	465b      	mov	r3, fp
 8009f94:	4622      	mov	r2, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff ff6d 	bl	8009e78 <__ssputs_r>
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f000 80aa 	beq.w	800a0f8 <_svfiprintf_r+0x1c8>
 8009fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fa6:	445a      	add	r2, fp
 8009fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8009faa:	f89a 3000 	ldrb.w	r3, [sl]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 80a2 	beq.w	800a0f8 <_svfiprintf_r+0x1c8>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fbe:	f10a 0a01 	add.w	sl, sl, #1
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fca:	931a      	str	r3, [sp, #104]	; 0x68
 8009fcc:	4654      	mov	r4, sl
 8009fce:	2205      	movs	r2, #5
 8009fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd4:	4851      	ldr	r0, [pc, #324]	; (800a11c <_svfiprintf_r+0x1ec>)
 8009fd6:	f7f6 f92b 	bl	8000230 <memchr>
 8009fda:	9a04      	ldr	r2, [sp, #16]
 8009fdc:	b9d8      	cbnz	r0, 800a016 <_svfiprintf_r+0xe6>
 8009fde:	06d0      	lsls	r0, r2, #27
 8009fe0:	bf44      	itt	mi
 8009fe2:	2320      	movmi	r3, #32
 8009fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe8:	0711      	lsls	r1, r2, #28
 8009fea:	bf44      	itt	mi
 8009fec:	232b      	movmi	r3, #43	; 0x2b
 8009fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff8:	d015      	beq.n	800a026 <_svfiprintf_r+0xf6>
 8009ffa:	9a07      	ldr	r2, [sp, #28]
 8009ffc:	4654      	mov	r4, sl
 8009ffe:	2000      	movs	r0, #0
 800a000:	f04f 0c0a 	mov.w	ip, #10
 800a004:	4621      	mov	r1, r4
 800a006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00a:	3b30      	subs	r3, #48	; 0x30
 800a00c:	2b09      	cmp	r3, #9
 800a00e:	d94e      	bls.n	800a0ae <_svfiprintf_r+0x17e>
 800a010:	b1b0      	cbz	r0, 800a040 <_svfiprintf_r+0x110>
 800a012:	9207      	str	r2, [sp, #28]
 800a014:	e014      	b.n	800a040 <_svfiprintf_r+0x110>
 800a016:	eba0 0308 	sub.w	r3, r0, r8
 800a01a:	fa09 f303 	lsl.w	r3, r9, r3
 800a01e:	4313      	orrs	r3, r2
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	46a2      	mov	sl, r4
 800a024:	e7d2      	b.n	8009fcc <_svfiprintf_r+0x9c>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	1d19      	adds	r1, r3, #4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	9103      	str	r1, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfbb      	ittet	lt
 800a032:	425b      	neglt	r3, r3
 800a034:	f042 0202 	orrlt.w	r2, r2, #2
 800a038:	9307      	strge	r3, [sp, #28]
 800a03a:	9307      	strlt	r3, [sp, #28]
 800a03c:	bfb8      	it	lt
 800a03e:	9204      	strlt	r2, [sp, #16]
 800a040:	7823      	ldrb	r3, [r4, #0]
 800a042:	2b2e      	cmp	r3, #46	; 0x2e
 800a044:	d10c      	bne.n	800a060 <_svfiprintf_r+0x130>
 800a046:	7863      	ldrb	r3, [r4, #1]
 800a048:	2b2a      	cmp	r3, #42	; 0x2a
 800a04a:	d135      	bne.n	800a0b8 <_svfiprintf_r+0x188>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	1d1a      	adds	r2, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9203      	str	r2, [sp, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfb8      	it	lt
 800a058:	f04f 33ff 	movlt.w	r3, #4294967295
 800a05c:	3402      	adds	r4, #2
 800a05e:	9305      	str	r3, [sp, #20]
 800a060:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a12c <_svfiprintf_r+0x1fc>
 800a064:	7821      	ldrb	r1, [r4, #0]
 800a066:	2203      	movs	r2, #3
 800a068:	4650      	mov	r0, sl
 800a06a:	f7f6 f8e1 	bl	8000230 <memchr>
 800a06e:	b140      	cbz	r0, 800a082 <_svfiprintf_r+0x152>
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	eba0 000a 	sub.w	r0, r0, sl
 800a076:	fa03 f000 	lsl.w	r0, r3, r0
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	4303      	orrs	r3, r0
 800a07e:	3401      	adds	r4, #1
 800a080:	9304      	str	r3, [sp, #16]
 800a082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a086:	4826      	ldr	r0, [pc, #152]	; (800a120 <_svfiprintf_r+0x1f0>)
 800a088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a08c:	2206      	movs	r2, #6
 800a08e:	f7f6 f8cf 	bl	8000230 <memchr>
 800a092:	2800      	cmp	r0, #0
 800a094:	d038      	beq.n	800a108 <_svfiprintf_r+0x1d8>
 800a096:	4b23      	ldr	r3, [pc, #140]	; (800a124 <_svfiprintf_r+0x1f4>)
 800a098:	bb1b      	cbnz	r3, 800a0e2 <_svfiprintf_r+0x1b2>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	3307      	adds	r3, #7
 800a09e:	f023 0307 	bic.w	r3, r3, #7
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	9303      	str	r3, [sp, #12]
 800a0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a8:	4433      	add	r3, r6
 800a0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ac:	e767      	b.n	8009f7e <_svfiprintf_r+0x4e>
 800a0ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	e7a5      	b.n	800a004 <_svfiprintf_r+0xd4>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	3401      	adds	r4, #1
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f04f 0c0a 	mov.w	ip, #10
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ca:	3a30      	subs	r2, #48	; 0x30
 800a0cc:	2a09      	cmp	r2, #9
 800a0ce:	d903      	bls.n	800a0d8 <_svfiprintf_r+0x1a8>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d0c5      	beq.n	800a060 <_svfiprintf_r+0x130>
 800a0d4:	9105      	str	r1, [sp, #20]
 800a0d6:	e7c3      	b.n	800a060 <_svfiprintf_r+0x130>
 800a0d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0dc:	4604      	mov	r4, r0
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e7f0      	b.n	800a0c4 <_svfiprintf_r+0x194>
 800a0e2:	ab03      	add	r3, sp, #12
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <_svfiprintf_r+0x1f8>)
 800a0ea:	a904      	add	r1, sp, #16
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7fb ff45 	bl	8005f7c <_printf_float>
 800a0f2:	1c42      	adds	r2, r0, #1
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	d1d6      	bne.n	800a0a6 <_svfiprintf_r+0x176>
 800a0f8:	89ab      	ldrh	r3, [r5, #12]
 800a0fa:	065b      	lsls	r3, r3, #25
 800a0fc:	f53f af2c 	bmi.w	8009f58 <_svfiprintf_r+0x28>
 800a100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a102:	b01d      	add	sp, #116	; 0x74
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a108:	ab03      	add	r3, sp, #12
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	462a      	mov	r2, r5
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <_svfiprintf_r+0x1f8>)
 800a110:	a904      	add	r1, sp, #16
 800a112:	4638      	mov	r0, r7
 800a114:	f7fc f9d6 	bl	80064c4 <_printf_i>
 800a118:	e7eb      	b.n	800a0f2 <_svfiprintf_r+0x1c2>
 800a11a:	bf00      	nop
 800a11c:	0800ada4 	.word	0x0800ada4
 800a120:	0800adae 	.word	0x0800adae
 800a124:	08005f7d 	.word	0x08005f7d
 800a128:	08009e79 	.word	0x08009e79
 800a12c:	0800adaa 	.word	0x0800adaa

0800a130 <__sfputc_r>:
 800a130:	6893      	ldr	r3, [r2, #8]
 800a132:	3b01      	subs	r3, #1
 800a134:	2b00      	cmp	r3, #0
 800a136:	b410      	push	{r4}
 800a138:	6093      	str	r3, [r2, #8]
 800a13a:	da08      	bge.n	800a14e <__sfputc_r+0x1e>
 800a13c:	6994      	ldr	r4, [r2, #24]
 800a13e:	42a3      	cmp	r3, r4
 800a140:	db01      	blt.n	800a146 <__sfputc_r+0x16>
 800a142:	290a      	cmp	r1, #10
 800a144:	d103      	bne.n	800a14e <__sfputc_r+0x1e>
 800a146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14a:	f000 b9bd 	b.w	800a4c8 <__swbuf_r>
 800a14e:	6813      	ldr	r3, [r2, #0]
 800a150:	1c58      	adds	r0, r3, #1
 800a152:	6010      	str	r0, [r2, #0]
 800a154:	7019      	strb	r1, [r3, #0]
 800a156:	4608      	mov	r0, r1
 800a158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <__sfputs_r>:
 800a15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a160:	4606      	mov	r6, r0
 800a162:	460f      	mov	r7, r1
 800a164:	4614      	mov	r4, r2
 800a166:	18d5      	adds	r5, r2, r3
 800a168:	42ac      	cmp	r4, r5
 800a16a:	d101      	bne.n	800a170 <__sfputs_r+0x12>
 800a16c:	2000      	movs	r0, #0
 800a16e:	e007      	b.n	800a180 <__sfputs_r+0x22>
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	463a      	mov	r2, r7
 800a176:	4630      	mov	r0, r6
 800a178:	f7ff ffda 	bl	800a130 <__sfputc_r>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d1f3      	bne.n	800a168 <__sfputs_r+0xa>
 800a180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a184 <_vfiprintf_r>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	460d      	mov	r5, r1
 800a18a:	b09d      	sub	sp, #116	; 0x74
 800a18c:	4614      	mov	r4, r2
 800a18e:	4698      	mov	r8, r3
 800a190:	4606      	mov	r6, r0
 800a192:	b118      	cbz	r0, 800a19c <_vfiprintf_r+0x18>
 800a194:	6983      	ldr	r3, [r0, #24]
 800a196:	b90b      	cbnz	r3, 800a19c <_vfiprintf_r+0x18>
 800a198:	f7fe fc16 	bl	80089c8 <__sinit>
 800a19c:	4b89      	ldr	r3, [pc, #548]	; (800a3c4 <_vfiprintf_r+0x240>)
 800a19e:	429d      	cmp	r5, r3
 800a1a0:	d11b      	bne.n	800a1da <_vfiprintf_r+0x56>
 800a1a2:	6875      	ldr	r5, [r6, #4]
 800a1a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a6:	07d9      	lsls	r1, r3, #31
 800a1a8:	d405      	bmi.n	800a1b6 <_vfiprintf_r+0x32>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	059a      	lsls	r2, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_vfiprintf_r+0x32>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b2:	f7ff f81a 	bl	80091ea <__retarget_lock_acquire_recursive>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	071b      	lsls	r3, r3, #28
 800a1ba:	d501      	bpl.n	800a1c0 <_vfiprintf_r+0x3c>
 800a1bc:	692b      	ldr	r3, [r5, #16]
 800a1be:	b9eb      	cbnz	r3, 800a1fc <_vfiprintf_r+0x78>
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f000 f9f2 	bl	800a5ac <__swsetup_r>
 800a1c8:	b1c0      	cbz	r0, 800a1fc <_vfiprintf_r+0x78>
 800a1ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1cc:	07dc      	lsls	r4, r3, #31
 800a1ce:	d50e      	bpl.n	800a1ee <_vfiprintf_r+0x6a>
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	b01d      	add	sp, #116	; 0x74
 800a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1da:	4b7b      	ldr	r3, [pc, #492]	; (800a3c8 <_vfiprintf_r+0x244>)
 800a1dc:	429d      	cmp	r5, r3
 800a1de:	d101      	bne.n	800a1e4 <_vfiprintf_r+0x60>
 800a1e0:	68b5      	ldr	r5, [r6, #8]
 800a1e2:	e7df      	b.n	800a1a4 <_vfiprintf_r+0x20>
 800a1e4:	4b79      	ldr	r3, [pc, #484]	; (800a3cc <_vfiprintf_r+0x248>)
 800a1e6:	429d      	cmp	r5, r3
 800a1e8:	bf08      	it	eq
 800a1ea:	68f5      	ldreq	r5, [r6, #12]
 800a1ec:	e7da      	b.n	800a1a4 <_vfiprintf_r+0x20>
 800a1ee:	89ab      	ldrh	r3, [r5, #12]
 800a1f0:	0598      	lsls	r0, r3, #22
 800a1f2:	d4ed      	bmi.n	800a1d0 <_vfiprintf_r+0x4c>
 800a1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f6:	f7fe fff9 	bl	80091ec <__retarget_lock_release_recursive>
 800a1fa:	e7e9      	b.n	800a1d0 <_vfiprintf_r+0x4c>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	2320      	movs	r3, #32
 800a202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a206:	f8cd 800c 	str.w	r8, [sp, #12]
 800a20a:	2330      	movs	r3, #48	; 0x30
 800a20c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3d0 <_vfiprintf_r+0x24c>
 800a210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a214:	f04f 0901 	mov.w	r9, #1
 800a218:	4623      	mov	r3, r4
 800a21a:	469a      	mov	sl, r3
 800a21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a220:	b10a      	cbz	r2, 800a226 <_vfiprintf_r+0xa2>
 800a222:	2a25      	cmp	r2, #37	; 0x25
 800a224:	d1f9      	bne.n	800a21a <_vfiprintf_r+0x96>
 800a226:	ebba 0b04 	subs.w	fp, sl, r4
 800a22a:	d00b      	beq.n	800a244 <_vfiprintf_r+0xc0>
 800a22c:	465b      	mov	r3, fp
 800a22e:	4622      	mov	r2, r4
 800a230:	4629      	mov	r1, r5
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ff93 	bl	800a15e <__sfputs_r>
 800a238:	3001      	adds	r0, #1
 800a23a:	f000 80aa 	beq.w	800a392 <_vfiprintf_r+0x20e>
 800a23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a240:	445a      	add	r2, fp
 800a242:	9209      	str	r2, [sp, #36]	; 0x24
 800a244:	f89a 3000 	ldrb.w	r3, [sl]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80a2 	beq.w	800a392 <_vfiprintf_r+0x20e>
 800a24e:	2300      	movs	r3, #0
 800a250:	f04f 32ff 	mov.w	r2, #4294967295
 800a254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a258:	f10a 0a01 	add.w	sl, sl, #1
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	9307      	str	r3, [sp, #28]
 800a260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a264:	931a      	str	r3, [sp, #104]	; 0x68
 800a266:	4654      	mov	r4, sl
 800a268:	2205      	movs	r2, #5
 800a26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a26e:	4858      	ldr	r0, [pc, #352]	; (800a3d0 <_vfiprintf_r+0x24c>)
 800a270:	f7f5 ffde 	bl	8000230 <memchr>
 800a274:	9a04      	ldr	r2, [sp, #16]
 800a276:	b9d8      	cbnz	r0, 800a2b0 <_vfiprintf_r+0x12c>
 800a278:	06d1      	lsls	r1, r2, #27
 800a27a:	bf44      	itt	mi
 800a27c:	2320      	movmi	r3, #32
 800a27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a282:	0713      	lsls	r3, r2, #28
 800a284:	bf44      	itt	mi
 800a286:	232b      	movmi	r3, #43	; 0x2b
 800a288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a28c:	f89a 3000 	ldrb.w	r3, [sl]
 800a290:	2b2a      	cmp	r3, #42	; 0x2a
 800a292:	d015      	beq.n	800a2c0 <_vfiprintf_r+0x13c>
 800a294:	9a07      	ldr	r2, [sp, #28]
 800a296:	4654      	mov	r4, sl
 800a298:	2000      	movs	r0, #0
 800a29a:	f04f 0c0a 	mov.w	ip, #10
 800a29e:	4621      	mov	r1, r4
 800a2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2a4:	3b30      	subs	r3, #48	; 0x30
 800a2a6:	2b09      	cmp	r3, #9
 800a2a8:	d94e      	bls.n	800a348 <_vfiprintf_r+0x1c4>
 800a2aa:	b1b0      	cbz	r0, 800a2da <_vfiprintf_r+0x156>
 800a2ac:	9207      	str	r2, [sp, #28]
 800a2ae:	e014      	b.n	800a2da <_vfiprintf_r+0x156>
 800a2b0:	eba0 0308 	sub.w	r3, r0, r8
 800a2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	9304      	str	r3, [sp, #16]
 800a2bc:	46a2      	mov	sl, r4
 800a2be:	e7d2      	b.n	800a266 <_vfiprintf_r+0xe2>
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	1d19      	adds	r1, r3, #4
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	9103      	str	r1, [sp, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bfbb      	ittet	lt
 800a2cc:	425b      	neglt	r3, r3
 800a2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a2d2:	9307      	strge	r3, [sp, #28]
 800a2d4:	9307      	strlt	r3, [sp, #28]
 800a2d6:	bfb8      	it	lt
 800a2d8:	9204      	strlt	r2, [sp, #16]
 800a2da:	7823      	ldrb	r3, [r4, #0]
 800a2dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a2de:	d10c      	bne.n	800a2fa <_vfiprintf_r+0x176>
 800a2e0:	7863      	ldrb	r3, [r4, #1]
 800a2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e4:	d135      	bne.n	800a352 <_vfiprintf_r+0x1ce>
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	1d1a      	adds	r2, r3, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	9203      	str	r2, [sp, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	bfb8      	it	lt
 800a2f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2f6:	3402      	adds	r4, #2
 800a2f8:	9305      	str	r3, [sp, #20]
 800a2fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3e0 <_vfiprintf_r+0x25c>
 800a2fe:	7821      	ldrb	r1, [r4, #0]
 800a300:	2203      	movs	r2, #3
 800a302:	4650      	mov	r0, sl
 800a304:	f7f5 ff94 	bl	8000230 <memchr>
 800a308:	b140      	cbz	r0, 800a31c <_vfiprintf_r+0x198>
 800a30a:	2340      	movs	r3, #64	; 0x40
 800a30c:	eba0 000a 	sub.w	r0, r0, sl
 800a310:	fa03 f000 	lsl.w	r0, r3, r0
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	4303      	orrs	r3, r0
 800a318:	3401      	adds	r4, #1
 800a31a:	9304      	str	r3, [sp, #16]
 800a31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a320:	482c      	ldr	r0, [pc, #176]	; (800a3d4 <_vfiprintf_r+0x250>)
 800a322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a326:	2206      	movs	r2, #6
 800a328:	f7f5 ff82 	bl	8000230 <memchr>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d03f      	beq.n	800a3b0 <_vfiprintf_r+0x22c>
 800a330:	4b29      	ldr	r3, [pc, #164]	; (800a3d8 <_vfiprintf_r+0x254>)
 800a332:	bb1b      	cbnz	r3, 800a37c <_vfiprintf_r+0x1f8>
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	3307      	adds	r3, #7
 800a338:	f023 0307 	bic.w	r3, r3, #7
 800a33c:	3308      	adds	r3, #8
 800a33e:	9303      	str	r3, [sp, #12]
 800a340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a342:	443b      	add	r3, r7
 800a344:	9309      	str	r3, [sp, #36]	; 0x24
 800a346:	e767      	b.n	800a218 <_vfiprintf_r+0x94>
 800a348:	fb0c 3202 	mla	r2, ip, r2, r3
 800a34c:	460c      	mov	r4, r1
 800a34e:	2001      	movs	r0, #1
 800a350:	e7a5      	b.n	800a29e <_vfiprintf_r+0x11a>
 800a352:	2300      	movs	r3, #0
 800a354:	3401      	adds	r4, #1
 800a356:	9305      	str	r3, [sp, #20]
 800a358:	4619      	mov	r1, r3
 800a35a:	f04f 0c0a 	mov.w	ip, #10
 800a35e:	4620      	mov	r0, r4
 800a360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a364:	3a30      	subs	r2, #48	; 0x30
 800a366:	2a09      	cmp	r2, #9
 800a368:	d903      	bls.n	800a372 <_vfiprintf_r+0x1ee>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0c5      	beq.n	800a2fa <_vfiprintf_r+0x176>
 800a36e:	9105      	str	r1, [sp, #20]
 800a370:	e7c3      	b.n	800a2fa <_vfiprintf_r+0x176>
 800a372:	fb0c 2101 	mla	r1, ip, r1, r2
 800a376:	4604      	mov	r4, r0
 800a378:	2301      	movs	r3, #1
 800a37a:	e7f0      	b.n	800a35e <_vfiprintf_r+0x1da>
 800a37c:	ab03      	add	r3, sp, #12
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	462a      	mov	r2, r5
 800a382:	4b16      	ldr	r3, [pc, #88]	; (800a3dc <_vfiprintf_r+0x258>)
 800a384:	a904      	add	r1, sp, #16
 800a386:	4630      	mov	r0, r6
 800a388:	f7fb fdf8 	bl	8005f7c <_printf_float>
 800a38c:	4607      	mov	r7, r0
 800a38e:	1c78      	adds	r0, r7, #1
 800a390:	d1d6      	bne.n	800a340 <_vfiprintf_r+0x1bc>
 800a392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a394:	07d9      	lsls	r1, r3, #31
 800a396:	d405      	bmi.n	800a3a4 <_vfiprintf_r+0x220>
 800a398:	89ab      	ldrh	r3, [r5, #12]
 800a39a:	059a      	lsls	r2, r3, #22
 800a39c:	d402      	bmi.n	800a3a4 <_vfiprintf_r+0x220>
 800a39e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a0:	f7fe ff24 	bl	80091ec <__retarget_lock_release_recursive>
 800a3a4:	89ab      	ldrh	r3, [r5, #12]
 800a3a6:	065b      	lsls	r3, r3, #25
 800a3a8:	f53f af12 	bmi.w	800a1d0 <_vfiprintf_r+0x4c>
 800a3ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ae:	e711      	b.n	800a1d4 <_vfiprintf_r+0x50>
 800a3b0:	ab03      	add	r3, sp, #12
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <_vfiprintf_r+0x258>)
 800a3b8:	a904      	add	r1, sp, #16
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7fc f882 	bl	80064c4 <_printf_i>
 800a3c0:	e7e4      	b.n	800a38c <_vfiprintf_r+0x208>
 800a3c2:	bf00      	nop
 800a3c4:	0800ab8c 	.word	0x0800ab8c
 800a3c8:	0800abac 	.word	0x0800abac
 800a3cc:	0800ab6c 	.word	0x0800ab6c
 800a3d0:	0800ada4 	.word	0x0800ada4
 800a3d4:	0800adae 	.word	0x0800adae
 800a3d8:	08005f7d 	.word	0x08005f7d
 800a3dc:	0800a15f 	.word	0x0800a15f
 800a3e0:	0800adaa 	.word	0x0800adaa
 800a3e4:	00000000 	.word	0x00000000

0800a3e8 <nan>:
 800a3e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a3f0 <nan+0x8>
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	00000000 	.word	0x00000000
 800a3f4:	7ff80000 	.word	0x7ff80000

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d06      	ldr	r5, [pc, #24]	; (800a414 <_sbrk_r+0x1c>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	f7f7 fcc6 	bl	8001d94 <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	20000360 	.word	0x20000360

0800a418 <__sread>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	460c      	mov	r4, r1
 800a41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a420:	f000 f9fc 	bl	800a81c <_read_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	bfab      	itete	ge
 800a428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a42a:	89a3      	ldrhlt	r3, [r4, #12]
 800a42c:	181b      	addge	r3, r3, r0
 800a42e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a432:	bfac      	ite	ge
 800a434:	6563      	strge	r3, [r4, #84]	; 0x54
 800a436:	81a3      	strhlt	r3, [r4, #12]
 800a438:	bd10      	pop	{r4, pc}

0800a43a <__swrite>:
 800a43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43e:	461f      	mov	r7, r3
 800a440:	898b      	ldrh	r3, [r1, #12]
 800a442:	05db      	lsls	r3, r3, #23
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	4616      	mov	r6, r2
 800a44a:	d505      	bpl.n	800a458 <__swrite+0x1e>
 800a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a450:	2302      	movs	r3, #2
 800a452:	2200      	movs	r2, #0
 800a454:	f000 f97a 	bl	800a74c <_lseek_r>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	4632      	mov	r2, r6
 800a466:	463b      	mov	r3, r7
 800a468:	4628      	mov	r0, r5
 800a46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a46e:	f000 b88b 	b.w	800a588 <_write_r>

0800a472 <__sseek>:
 800a472:	b510      	push	{r4, lr}
 800a474:	460c      	mov	r4, r1
 800a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47a:	f000 f967 	bl	800a74c <_lseek_r>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	bf15      	itete	ne
 800a484:	6560      	strne	r0, [r4, #84]	; 0x54
 800a486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a48a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a48e:	81a3      	strheq	r3, [r4, #12]
 800a490:	bf18      	it	ne
 800a492:	81a3      	strhne	r3, [r4, #12]
 800a494:	bd10      	pop	{r4, pc}

0800a496 <__sclose>:
 800a496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49a:	f000 b913 	b.w	800a6c4 <_close_r>

0800a49e <strncmp>:
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	b17a      	cbz	r2, 800a4c2 <strncmp+0x24>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	3901      	subs	r1, #1
 800a4a6:	1884      	adds	r4, r0, r2
 800a4a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a4b0:	4290      	cmp	r0, r2
 800a4b2:	d101      	bne.n	800a4b8 <strncmp+0x1a>
 800a4b4:	42a3      	cmp	r3, r4
 800a4b6:	d101      	bne.n	800a4bc <strncmp+0x1e>
 800a4b8:	1a80      	subs	r0, r0, r2
 800a4ba:	bd10      	pop	{r4, pc}
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1f3      	bne.n	800a4a8 <strncmp+0xa>
 800a4c0:	e7fa      	b.n	800a4b8 <strncmp+0x1a>
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	e7f9      	b.n	800a4ba <strncmp+0x1c>
	...

0800a4c8 <__swbuf_r>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	460e      	mov	r6, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	b118      	cbz	r0, 800a4da <__swbuf_r+0x12>
 800a4d2:	6983      	ldr	r3, [r0, #24]
 800a4d4:	b90b      	cbnz	r3, 800a4da <__swbuf_r+0x12>
 800a4d6:	f7fe fa77 	bl	80089c8 <__sinit>
 800a4da:	4b21      	ldr	r3, [pc, #132]	; (800a560 <__swbuf_r+0x98>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	d12b      	bne.n	800a538 <__swbuf_r+0x70>
 800a4e0:	686c      	ldr	r4, [r5, #4]
 800a4e2:	69a3      	ldr	r3, [r4, #24]
 800a4e4:	60a3      	str	r3, [r4, #8]
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	071a      	lsls	r2, r3, #28
 800a4ea:	d52f      	bpl.n	800a54c <__swbuf_r+0x84>
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	b36b      	cbz	r3, 800a54c <__swbuf_r+0x84>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	6820      	ldr	r0, [r4, #0]
 800a4f4:	1ac0      	subs	r0, r0, r3
 800a4f6:	6963      	ldr	r3, [r4, #20]
 800a4f8:	b2f6      	uxtb	r6, r6
 800a4fa:	4283      	cmp	r3, r0
 800a4fc:	4637      	mov	r7, r6
 800a4fe:	dc04      	bgt.n	800a50a <__swbuf_r+0x42>
 800a500:	4621      	mov	r1, r4
 800a502:	4628      	mov	r0, r5
 800a504:	f7fe f9cc 	bl	80088a0 <_fflush_r>
 800a508:	bb30      	cbnz	r0, 800a558 <__swbuf_r+0x90>
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	60a3      	str	r3, [r4, #8]
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	6022      	str	r2, [r4, #0]
 800a516:	701e      	strb	r6, [r3, #0]
 800a518:	6963      	ldr	r3, [r4, #20]
 800a51a:	3001      	adds	r0, #1
 800a51c:	4283      	cmp	r3, r0
 800a51e:	d004      	beq.n	800a52a <__swbuf_r+0x62>
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	07db      	lsls	r3, r3, #31
 800a524:	d506      	bpl.n	800a534 <__swbuf_r+0x6c>
 800a526:	2e0a      	cmp	r6, #10
 800a528:	d104      	bne.n	800a534 <__swbuf_r+0x6c>
 800a52a:	4621      	mov	r1, r4
 800a52c:	4628      	mov	r0, r5
 800a52e:	f7fe f9b7 	bl	80088a0 <_fflush_r>
 800a532:	b988      	cbnz	r0, 800a558 <__swbuf_r+0x90>
 800a534:	4638      	mov	r0, r7
 800a536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a538:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <__swbuf_r+0x9c>)
 800a53a:	429c      	cmp	r4, r3
 800a53c:	d101      	bne.n	800a542 <__swbuf_r+0x7a>
 800a53e:	68ac      	ldr	r4, [r5, #8]
 800a540:	e7cf      	b.n	800a4e2 <__swbuf_r+0x1a>
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <__swbuf_r+0xa0>)
 800a544:	429c      	cmp	r4, r3
 800a546:	bf08      	it	eq
 800a548:	68ec      	ldreq	r4, [r5, #12]
 800a54a:	e7ca      	b.n	800a4e2 <__swbuf_r+0x1a>
 800a54c:	4621      	mov	r1, r4
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 f82c 	bl	800a5ac <__swsetup_r>
 800a554:	2800      	cmp	r0, #0
 800a556:	d0cb      	beq.n	800a4f0 <__swbuf_r+0x28>
 800a558:	f04f 37ff 	mov.w	r7, #4294967295
 800a55c:	e7ea      	b.n	800a534 <__swbuf_r+0x6c>
 800a55e:	bf00      	nop
 800a560:	0800ab8c 	.word	0x0800ab8c
 800a564:	0800abac 	.word	0x0800abac
 800a568:	0800ab6c 	.word	0x0800ab6c

0800a56c <__ascii_wctomb>:
 800a56c:	b149      	cbz	r1, 800a582 <__ascii_wctomb+0x16>
 800a56e:	2aff      	cmp	r2, #255	; 0xff
 800a570:	bf85      	ittet	hi
 800a572:	238a      	movhi	r3, #138	; 0x8a
 800a574:	6003      	strhi	r3, [r0, #0]
 800a576:	700a      	strbls	r2, [r1, #0]
 800a578:	f04f 30ff 	movhi.w	r0, #4294967295
 800a57c:	bf98      	it	ls
 800a57e:	2001      	movls	r0, #1
 800a580:	4770      	bx	lr
 800a582:	4608      	mov	r0, r1
 800a584:	4770      	bx	lr
	...

0800a588 <_write_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	; (800a5a8 <_write_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 fbab 	bl	8001cf2 <_write>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_write_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_write_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000360 	.word	0x20000360

0800a5ac <__swsetup_r>:
 800a5ac:	4b32      	ldr	r3, [pc, #200]	; (800a678 <__swsetup_r+0xcc>)
 800a5ae:	b570      	push	{r4, r5, r6, lr}
 800a5b0:	681d      	ldr	r5, [r3, #0]
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	b125      	cbz	r5, 800a5c2 <__swsetup_r+0x16>
 800a5b8:	69ab      	ldr	r3, [r5, #24]
 800a5ba:	b913      	cbnz	r3, 800a5c2 <__swsetup_r+0x16>
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7fe fa03 	bl	80089c8 <__sinit>
 800a5c2:	4b2e      	ldr	r3, [pc, #184]	; (800a67c <__swsetup_r+0xd0>)
 800a5c4:	429c      	cmp	r4, r3
 800a5c6:	d10f      	bne.n	800a5e8 <__swsetup_r+0x3c>
 800a5c8:	686c      	ldr	r4, [r5, #4]
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d0:	0719      	lsls	r1, r3, #28
 800a5d2:	d42c      	bmi.n	800a62e <__swsetup_r+0x82>
 800a5d4:	06dd      	lsls	r5, r3, #27
 800a5d6:	d411      	bmi.n	800a5fc <__swsetup_r+0x50>
 800a5d8:	2309      	movs	r3, #9
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e6:	e03e      	b.n	800a666 <__swsetup_r+0xba>
 800a5e8:	4b25      	ldr	r3, [pc, #148]	; (800a680 <__swsetup_r+0xd4>)
 800a5ea:	429c      	cmp	r4, r3
 800a5ec:	d101      	bne.n	800a5f2 <__swsetup_r+0x46>
 800a5ee:	68ac      	ldr	r4, [r5, #8]
 800a5f0:	e7eb      	b.n	800a5ca <__swsetup_r+0x1e>
 800a5f2:	4b24      	ldr	r3, [pc, #144]	; (800a684 <__swsetup_r+0xd8>)
 800a5f4:	429c      	cmp	r4, r3
 800a5f6:	bf08      	it	eq
 800a5f8:	68ec      	ldreq	r4, [r5, #12]
 800a5fa:	e7e6      	b.n	800a5ca <__swsetup_r+0x1e>
 800a5fc:	0758      	lsls	r0, r3, #29
 800a5fe:	d512      	bpl.n	800a626 <__swsetup_r+0x7a>
 800a600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a602:	b141      	cbz	r1, 800a616 <__swsetup_r+0x6a>
 800a604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a608:	4299      	cmp	r1, r3
 800a60a:	d002      	beq.n	800a612 <__swsetup_r+0x66>
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff fb53 	bl	8009cb8 <_free_r>
 800a612:	2300      	movs	r3, #0
 800a614:	6363      	str	r3, [r4, #52]	; 0x34
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	2300      	movs	r3, #0
 800a620:	6063      	str	r3, [r4, #4]
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f043 0308 	orr.w	r3, r3, #8
 800a62c:	81a3      	strh	r3, [r4, #12]
 800a62e:	6923      	ldr	r3, [r4, #16]
 800a630:	b94b      	cbnz	r3, 800a646 <__swsetup_r+0x9a>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a63c:	d003      	beq.n	800a646 <__swsetup_r+0x9a>
 800a63e:	4621      	mov	r1, r4
 800a640:	4630      	mov	r0, r6
 800a642:	f7fe fdf9 	bl	8009238 <__smakebuf_r>
 800a646:	89a0      	ldrh	r0, [r4, #12]
 800a648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a64c:	f010 0301 	ands.w	r3, r0, #1
 800a650:	d00a      	beq.n	800a668 <__swsetup_r+0xbc>
 800a652:	2300      	movs	r3, #0
 800a654:	60a3      	str	r3, [r4, #8]
 800a656:	6963      	ldr	r3, [r4, #20]
 800a658:	425b      	negs	r3, r3
 800a65a:	61a3      	str	r3, [r4, #24]
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	b943      	cbnz	r3, 800a672 <__swsetup_r+0xc6>
 800a660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a664:	d1ba      	bne.n	800a5dc <__swsetup_r+0x30>
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	0781      	lsls	r1, r0, #30
 800a66a:	bf58      	it	pl
 800a66c:	6963      	ldrpl	r3, [r4, #20]
 800a66e:	60a3      	str	r3, [r4, #8]
 800a670:	e7f4      	b.n	800a65c <__swsetup_r+0xb0>
 800a672:	2000      	movs	r0, #0
 800a674:	e7f7      	b.n	800a666 <__swsetup_r+0xba>
 800a676:	bf00      	nop
 800a678:	20000010 	.word	0x20000010
 800a67c:	0800ab8c 	.word	0x0800ab8c
 800a680:	0800abac 	.word	0x0800abac
 800a684:	0800ab6c 	.word	0x0800ab6c

0800a688 <__assert_func>:
 800a688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a68a:	4614      	mov	r4, r2
 800a68c:	461a      	mov	r2, r3
 800a68e:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <__assert_func+0x2c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4605      	mov	r5, r0
 800a694:	68d8      	ldr	r0, [r3, #12]
 800a696:	b14c      	cbz	r4, 800a6ac <__assert_func+0x24>
 800a698:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <__assert_func+0x30>)
 800a69a:	9100      	str	r1, [sp, #0]
 800a69c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6a0:	4906      	ldr	r1, [pc, #24]	; (800a6bc <__assert_func+0x34>)
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	f000 f81e 	bl	800a6e4 <fiprintf>
 800a6a8:	f000 f8ca 	bl	800a840 <abort>
 800a6ac:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <__assert_func+0x38>)
 800a6ae:	461c      	mov	r4, r3
 800a6b0:	e7f3      	b.n	800a69a <__assert_func+0x12>
 800a6b2:	bf00      	nop
 800a6b4:	20000010 	.word	0x20000010
 800a6b8:	0800adb5 	.word	0x0800adb5
 800a6bc:	0800adc2 	.word	0x0800adc2
 800a6c0:	0800adf0 	.word	0x0800adf0

0800a6c4 <_close_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d06      	ldr	r5, [pc, #24]	; (800a6e0 <_close_r+0x1c>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	f7f7 fb2b 	bl	8001d2a <_close>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_close_r+0x1a>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_close_r+0x1a>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	20000360 	.word	0x20000360

0800a6e4 <fiprintf>:
 800a6e4:	b40e      	push	{r1, r2, r3}
 800a6e6:	b503      	push	{r0, r1, lr}
 800a6e8:	4601      	mov	r1, r0
 800a6ea:	ab03      	add	r3, sp, #12
 800a6ec:	4805      	ldr	r0, [pc, #20]	; (800a704 <fiprintf+0x20>)
 800a6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f2:	6800      	ldr	r0, [r0, #0]
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	f7ff fd45 	bl	800a184 <_vfiprintf_r>
 800a6fa:	b002      	add	sp, #8
 800a6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a700:	b003      	add	sp, #12
 800a702:	4770      	bx	lr
 800a704:	20000010 	.word	0x20000010

0800a708 <_fstat_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	; (800a728 <_fstat_r+0x20>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f7f7 fb14 	bl	8001d42 <_fstat>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d102      	bne.n	800a724 <_fstat_r+0x1c>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b103      	cbz	r3, 800a724 <_fstat_r+0x1c>
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	bf00      	nop
 800a728:	20000360 	.word	0x20000360

0800a72c <_isatty_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d06      	ldr	r5, [pc, #24]	; (800a748 <_isatty_r+0x1c>)
 800a730:	2300      	movs	r3, #0
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	602b      	str	r3, [r5, #0]
 800a738:	f7f7 fb13 	bl	8001d62 <_isatty>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_isatty_r+0x1a>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_isatty_r+0x1a>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	20000360 	.word	0x20000360

0800a74c <_lseek_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d07      	ldr	r5, [pc, #28]	; (800a76c <_lseek_r+0x20>)
 800a750:	4604      	mov	r4, r0
 800a752:	4608      	mov	r0, r1
 800a754:	4611      	mov	r1, r2
 800a756:	2200      	movs	r2, #0
 800a758:	602a      	str	r2, [r5, #0]
 800a75a:	461a      	mov	r2, r3
 800a75c:	f7f7 fb0c 	bl	8001d78 <_lseek>
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	d102      	bne.n	800a76a <_lseek_r+0x1e>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	b103      	cbz	r3, 800a76a <_lseek_r+0x1e>
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	20000360 	.word	0x20000360

0800a770 <memmove>:
 800a770:	4288      	cmp	r0, r1
 800a772:	b510      	push	{r4, lr}
 800a774:	eb01 0402 	add.w	r4, r1, r2
 800a778:	d902      	bls.n	800a780 <memmove+0x10>
 800a77a:	4284      	cmp	r4, r0
 800a77c:	4623      	mov	r3, r4
 800a77e:	d807      	bhi.n	800a790 <memmove+0x20>
 800a780:	1e43      	subs	r3, r0, #1
 800a782:	42a1      	cmp	r1, r4
 800a784:	d008      	beq.n	800a798 <memmove+0x28>
 800a786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a78a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a78e:	e7f8      	b.n	800a782 <memmove+0x12>
 800a790:	4402      	add	r2, r0
 800a792:	4601      	mov	r1, r0
 800a794:	428a      	cmp	r2, r1
 800a796:	d100      	bne.n	800a79a <memmove+0x2a>
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a79e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7a2:	e7f7      	b.n	800a794 <memmove+0x24>

0800a7a4 <__malloc_lock>:
 800a7a4:	4801      	ldr	r0, [pc, #4]	; (800a7ac <__malloc_lock+0x8>)
 800a7a6:	f7fe bd20 	b.w	80091ea <__retarget_lock_acquire_recursive>
 800a7aa:	bf00      	nop
 800a7ac:	20000354 	.word	0x20000354

0800a7b0 <__malloc_unlock>:
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <__malloc_unlock+0x8>)
 800a7b2:	f7fe bd1b 	b.w	80091ec <__retarget_lock_release_recursive>
 800a7b6:	bf00      	nop
 800a7b8:	20000354 	.word	0x20000354

0800a7bc <_realloc_r>:
 800a7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c0:	4680      	mov	r8, r0
 800a7c2:	4614      	mov	r4, r2
 800a7c4:	460e      	mov	r6, r1
 800a7c6:	b921      	cbnz	r1, 800a7d2 <_realloc_r+0x16>
 800a7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	f7ff badf 	b.w	8009d90 <_malloc_r>
 800a7d2:	b92a      	cbnz	r2, 800a7e0 <_realloc_r+0x24>
 800a7d4:	f7ff fa70 	bl	8009cb8 <_free_r>
 800a7d8:	4625      	mov	r5, r4
 800a7da:	4628      	mov	r0, r5
 800a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e0:	f000 f835 	bl	800a84e <_malloc_usable_size_r>
 800a7e4:	4284      	cmp	r4, r0
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	d802      	bhi.n	800a7f0 <_realloc_r+0x34>
 800a7ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7ee:	d812      	bhi.n	800a816 <_realloc_r+0x5a>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	f7ff facc 	bl	8009d90 <_malloc_r>
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d0ed      	beq.n	800a7da <_realloc_r+0x1e>
 800a7fe:	42bc      	cmp	r4, r7
 800a800:	4622      	mov	r2, r4
 800a802:	4631      	mov	r1, r6
 800a804:	bf28      	it	cs
 800a806:	463a      	movcs	r2, r7
 800a808:	f7fe fd70 	bl	80092ec <memcpy>
 800a80c:	4631      	mov	r1, r6
 800a80e:	4640      	mov	r0, r8
 800a810:	f7ff fa52 	bl	8009cb8 <_free_r>
 800a814:	e7e1      	b.n	800a7da <_realloc_r+0x1e>
 800a816:	4635      	mov	r5, r6
 800a818:	e7df      	b.n	800a7da <_realloc_r+0x1e>
	...

0800a81c <_read_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	; (800a83c <_read_r+0x20>)
 800a820:	4604      	mov	r4, r0
 800a822:	4608      	mov	r0, r1
 800a824:	4611      	mov	r1, r2
 800a826:	2200      	movs	r2, #0
 800a828:	602a      	str	r2, [r5, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f7f7 fa44 	bl	8001cb8 <_read>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	d102      	bne.n	800a83a <_read_r+0x1e>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b103      	cbz	r3, 800a83a <_read_r+0x1e>
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	bd38      	pop	{r3, r4, r5, pc}
 800a83c:	20000360 	.word	0x20000360

0800a840 <abort>:
 800a840:	b508      	push	{r3, lr}
 800a842:	2006      	movs	r0, #6
 800a844:	f000 f834 	bl	800a8b0 <raise>
 800a848:	2001      	movs	r0, #1
 800a84a:	f7f7 fa2b 	bl	8001ca4 <_exit>

0800a84e <_malloc_usable_size_r>:
 800a84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a852:	1f18      	subs	r0, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfbc      	itt	lt
 800a858:	580b      	ldrlt	r3, [r1, r0]
 800a85a:	18c0      	addlt	r0, r0, r3
 800a85c:	4770      	bx	lr

0800a85e <_raise_r>:
 800a85e:	291f      	cmp	r1, #31
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	460d      	mov	r5, r1
 800a866:	d904      	bls.n	800a872 <_raise_r+0x14>
 800a868:	2316      	movs	r3, #22
 800a86a:	6003      	str	r3, [r0, #0]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	bd38      	pop	{r3, r4, r5, pc}
 800a872:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a874:	b112      	cbz	r2, 800a87c <_raise_r+0x1e>
 800a876:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a87a:	b94b      	cbnz	r3, 800a890 <_raise_r+0x32>
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 f831 	bl	800a8e4 <_getpid_r>
 800a882:	462a      	mov	r2, r5
 800a884:	4601      	mov	r1, r0
 800a886:	4620      	mov	r0, r4
 800a888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a88c:	f000 b818 	b.w	800a8c0 <_kill_r>
 800a890:	2b01      	cmp	r3, #1
 800a892:	d00a      	beq.n	800a8aa <_raise_r+0x4c>
 800a894:	1c59      	adds	r1, r3, #1
 800a896:	d103      	bne.n	800a8a0 <_raise_r+0x42>
 800a898:	2316      	movs	r3, #22
 800a89a:	6003      	str	r3, [r0, #0]
 800a89c:	2001      	movs	r0, #1
 800a89e:	e7e7      	b.n	800a870 <_raise_r+0x12>
 800a8a0:	2400      	movs	r4, #0
 800a8a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	4798      	blx	r3
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7e0      	b.n	800a870 <_raise_r+0x12>
	...

0800a8b0 <raise>:
 800a8b0:	4b02      	ldr	r3, [pc, #8]	; (800a8bc <raise+0xc>)
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	f7ff bfd2 	b.w	800a85e <_raise_r>
 800a8ba:	bf00      	nop
 800a8bc:	20000010 	.word	0x20000010

0800a8c0 <_kill_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4d07      	ldr	r5, [pc, #28]	; (800a8e0 <_kill_r+0x20>)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	602b      	str	r3, [r5, #0]
 800a8ce:	f7f7 f9d9 	bl	8001c84 <_kill>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	d102      	bne.n	800a8dc <_kill_r+0x1c>
 800a8d6:	682b      	ldr	r3, [r5, #0]
 800a8d8:	b103      	cbz	r3, 800a8dc <_kill_r+0x1c>
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
 800a8de:	bf00      	nop
 800a8e0:	20000360 	.word	0x20000360

0800a8e4 <_getpid_r>:
 800a8e4:	f7f7 b9c6 	b.w	8001c74 <_getpid>

0800a8e8 <_init>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	bf00      	nop
 800a8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ee:	bc08      	pop	{r3}
 800a8f0:	469e      	mov	lr, r3
 800a8f2:	4770      	bx	lr

0800a8f4 <_fini>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	bf00      	nop
 800a8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fa:	bc08      	pop	{r3}
 800a8fc:	469e      	mov	lr, r3
 800a8fe:	4770      	bx	lr
